
stm32h503-can-protocols.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000258  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004c00  08000258  08000258  00010258  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000063c  08004e58  08004e58  00014e58  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005494  08005494  000201d4  2**0
                  CONTENTS
  4 .ARM          00000000  08005494  08005494  000201d4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005494  08005494  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005494  08005494  00015494  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005498  08005498  00015498  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  0800549c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000208  200001d4  08005670  000201d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003dc  08005670  000203dc  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002020a  2**0
                  CONTENTS, READONLY
 13 .debug_info   000025a5  00000000  00000000  0002024d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000053c  00000000  00000000  000227f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000218  00000000  00000000  00022d30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000189  00000000  00000000  00022f48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000177a3  00000000  00000000  000230d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00001ecf  00000000  00000000  0003a874  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00082526  00000000  00000000  0003c743  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001920  00000000  00000000  000bec6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005e  00000000  00000000  000c058c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000258 <__do_global_dtors_aux>:
 8000258:	b510      	push	{r4, lr}
 800025a:	4c05      	ldr	r4, [pc, #20]	; (8000270 <__do_global_dtors_aux+0x18>)
 800025c:	7823      	ldrb	r3, [r4, #0]
 800025e:	b933      	cbnz	r3, 800026e <__do_global_dtors_aux+0x16>
 8000260:	4b04      	ldr	r3, [pc, #16]	; (8000274 <__do_global_dtors_aux+0x1c>)
 8000262:	b113      	cbz	r3, 800026a <__do_global_dtors_aux+0x12>
 8000264:	4804      	ldr	r0, [pc, #16]	; (8000278 <__do_global_dtors_aux+0x20>)
 8000266:	f3af 8000 	nop.w
 800026a:	2301      	movs	r3, #1
 800026c:	7023      	strb	r3, [r4, #0]
 800026e:	bd10      	pop	{r4, pc}
 8000270:	200001d4 	.word	0x200001d4
 8000274:	00000000 	.word	0x00000000
 8000278:	08004e40 	.word	0x08004e40

0800027c <frame_dummy>:
 800027c:	b508      	push	{r3, lr}
 800027e:	4b03      	ldr	r3, [pc, #12]	; (800028c <frame_dummy+0x10>)
 8000280:	b11b      	cbz	r3, 800028a <frame_dummy+0xe>
 8000282:	4903      	ldr	r1, [pc, #12]	; (8000290 <frame_dummy+0x14>)
 8000284:	4803      	ldr	r0, [pc, #12]	; (8000294 <frame_dummy+0x18>)
 8000286:	f3af 8000 	nop.w
 800028a:	bd08      	pop	{r3, pc}
 800028c:	00000000 	.word	0x00000000
 8000290:	200001d8 	.word	0x200001d8
 8000294:	08004e40 	.word	0x08004e40

08000298 <strlen>:
 8000298:	4603      	mov	r3, r0
 800029a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800029e:	2a00      	cmp	r2, #0
 80002a0:	d1fb      	bne.n	800029a <strlen+0x2>
 80002a2:	1a18      	subs	r0, r3, r0
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr

080002a8 <__aeabi_drsub>:
 80002a8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002ac:	e002      	b.n	80002b4 <__adddf3>
 80002ae:	bf00      	nop

080002b0 <__aeabi_dsub>:
 80002b0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002b4 <__adddf3>:
 80002b4:	b530      	push	{r4, r5, lr}
 80002b6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002ba:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002be:	ea94 0f05 	teq	r4, r5
 80002c2:	bf08      	it	eq
 80002c4:	ea90 0f02 	teqeq	r0, r2
 80002c8:	bf1f      	itttt	ne
 80002ca:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002ce:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002d2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002d6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002da:	f000 80e2 	beq.w	80004a2 <__adddf3+0x1ee>
 80002de:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002e2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002e6:	bfb8      	it	lt
 80002e8:	426d      	neglt	r5, r5
 80002ea:	dd0c      	ble.n	8000306 <__adddf3+0x52>
 80002ec:	442c      	add	r4, r5
 80002ee:	ea80 0202 	eor.w	r2, r0, r2
 80002f2:	ea81 0303 	eor.w	r3, r1, r3
 80002f6:	ea82 0000 	eor.w	r0, r2, r0
 80002fa:	ea83 0101 	eor.w	r1, r3, r1
 80002fe:	ea80 0202 	eor.w	r2, r0, r2
 8000302:	ea81 0303 	eor.w	r3, r1, r3
 8000306:	2d36      	cmp	r5, #54	; 0x36
 8000308:	bf88      	it	hi
 800030a:	bd30      	pophi	{r4, r5, pc}
 800030c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000310:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000314:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000318:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800031c:	d002      	beq.n	8000324 <__adddf3+0x70>
 800031e:	4240      	negs	r0, r0
 8000320:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000324:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000328:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800032c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000330:	d002      	beq.n	8000338 <__adddf3+0x84>
 8000332:	4252      	negs	r2, r2
 8000334:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000338:	ea94 0f05 	teq	r4, r5
 800033c:	f000 80a7 	beq.w	800048e <__adddf3+0x1da>
 8000340:	f1a4 0401 	sub.w	r4, r4, #1
 8000344:	f1d5 0e20 	rsbs	lr, r5, #32
 8000348:	db0d      	blt.n	8000366 <__adddf3+0xb2>
 800034a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800034e:	fa22 f205 	lsr.w	r2, r2, r5
 8000352:	1880      	adds	r0, r0, r2
 8000354:	f141 0100 	adc.w	r1, r1, #0
 8000358:	fa03 f20e 	lsl.w	r2, r3, lr
 800035c:	1880      	adds	r0, r0, r2
 800035e:	fa43 f305 	asr.w	r3, r3, r5
 8000362:	4159      	adcs	r1, r3
 8000364:	e00e      	b.n	8000384 <__adddf3+0xd0>
 8000366:	f1a5 0520 	sub.w	r5, r5, #32
 800036a:	f10e 0e20 	add.w	lr, lr, #32
 800036e:	2a01      	cmp	r2, #1
 8000370:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000374:	bf28      	it	cs
 8000376:	f04c 0c02 	orrcs.w	ip, ip, #2
 800037a:	fa43 f305 	asr.w	r3, r3, r5
 800037e:	18c0      	adds	r0, r0, r3
 8000380:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000384:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000388:	d507      	bpl.n	800039a <__adddf3+0xe6>
 800038a:	f04f 0e00 	mov.w	lr, #0
 800038e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000392:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000396:	eb6e 0101 	sbc.w	r1, lr, r1
 800039a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800039e:	d31b      	bcc.n	80003d8 <__adddf3+0x124>
 80003a0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003a4:	d30c      	bcc.n	80003c0 <__adddf3+0x10c>
 80003a6:	0849      	lsrs	r1, r1, #1
 80003a8:	ea5f 0030 	movs.w	r0, r0, rrx
 80003ac:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b0:	f104 0401 	add.w	r4, r4, #1
 80003b4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003bc:	f080 809a 	bcs.w	80004f4 <__adddf3+0x240>
 80003c0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003c4:	bf08      	it	eq
 80003c6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003ca:	f150 0000 	adcs.w	r0, r0, #0
 80003ce:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003d2:	ea41 0105 	orr.w	r1, r1, r5
 80003d6:	bd30      	pop	{r4, r5, pc}
 80003d8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003dc:	4140      	adcs	r0, r0
 80003de:	eb41 0101 	adc.w	r1, r1, r1
 80003e2:	3c01      	subs	r4, #1
 80003e4:	bf28      	it	cs
 80003e6:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003ea:	d2e9      	bcs.n	80003c0 <__adddf3+0x10c>
 80003ec:	f091 0f00 	teq	r1, #0
 80003f0:	bf04      	itt	eq
 80003f2:	4601      	moveq	r1, r0
 80003f4:	2000      	moveq	r0, #0
 80003f6:	fab1 f381 	clz	r3, r1
 80003fa:	bf08      	it	eq
 80003fc:	3320      	addeq	r3, #32
 80003fe:	f1a3 030b 	sub.w	r3, r3, #11
 8000402:	f1b3 0220 	subs.w	r2, r3, #32
 8000406:	da0c      	bge.n	8000422 <__adddf3+0x16e>
 8000408:	320c      	adds	r2, #12
 800040a:	dd08      	ble.n	800041e <__adddf3+0x16a>
 800040c:	f102 0c14 	add.w	ip, r2, #20
 8000410:	f1c2 020c 	rsb	r2, r2, #12
 8000414:	fa01 f00c 	lsl.w	r0, r1, ip
 8000418:	fa21 f102 	lsr.w	r1, r1, r2
 800041c:	e00c      	b.n	8000438 <__adddf3+0x184>
 800041e:	f102 0214 	add.w	r2, r2, #20
 8000422:	bfd8      	it	le
 8000424:	f1c2 0c20 	rsble	ip, r2, #32
 8000428:	fa01 f102 	lsl.w	r1, r1, r2
 800042c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000430:	bfdc      	itt	le
 8000432:	ea41 010c 	orrle.w	r1, r1, ip
 8000436:	4090      	lslle	r0, r2
 8000438:	1ae4      	subs	r4, r4, r3
 800043a:	bfa2      	ittt	ge
 800043c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000440:	4329      	orrge	r1, r5
 8000442:	bd30      	popge	{r4, r5, pc}
 8000444:	ea6f 0404 	mvn.w	r4, r4
 8000448:	3c1f      	subs	r4, #31
 800044a:	da1c      	bge.n	8000486 <__adddf3+0x1d2>
 800044c:	340c      	adds	r4, #12
 800044e:	dc0e      	bgt.n	800046e <__adddf3+0x1ba>
 8000450:	f104 0414 	add.w	r4, r4, #20
 8000454:	f1c4 0220 	rsb	r2, r4, #32
 8000458:	fa20 f004 	lsr.w	r0, r0, r4
 800045c:	fa01 f302 	lsl.w	r3, r1, r2
 8000460:	ea40 0003 	orr.w	r0, r0, r3
 8000464:	fa21 f304 	lsr.w	r3, r1, r4
 8000468:	ea45 0103 	orr.w	r1, r5, r3
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	f1c4 040c 	rsb	r4, r4, #12
 8000472:	f1c4 0220 	rsb	r2, r4, #32
 8000476:	fa20 f002 	lsr.w	r0, r0, r2
 800047a:	fa01 f304 	lsl.w	r3, r1, r4
 800047e:	ea40 0003 	orr.w	r0, r0, r3
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	fa21 f004 	lsr.w	r0, r1, r4
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	f094 0f00 	teq	r4, #0
 8000492:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000496:	bf06      	itte	eq
 8000498:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800049c:	3401      	addeq	r4, #1
 800049e:	3d01      	subne	r5, #1
 80004a0:	e74e      	b.n	8000340 <__adddf3+0x8c>
 80004a2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004a6:	bf18      	it	ne
 80004a8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004ac:	d029      	beq.n	8000502 <__adddf3+0x24e>
 80004ae:	ea94 0f05 	teq	r4, r5
 80004b2:	bf08      	it	eq
 80004b4:	ea90 0f02 	teqeq	r0, r2
 80004b8:	d005      	beq.n	80004c6 <__adddf3+0x212>
 80004ba:	ea54 0c00 	orrs.w	ip, r4, r0
 80004be:	bf04      	itt	eq
 80004c0:	4619      	moveq	r1, r3
 80004c2:	4610      	moveq	r0, r2
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	ea91 0f03 	teq	r1, r3
 80004ca:	bf1e      	ittt	ne
 80004cc:	2100      	movne	r1, #0
 80004ce:	2000      	movne	r0, #0
 80004d0:	bd30      	popne	{r4, r5, pc}
 80004d2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004d6:	d105      	bne.n	80004e4 <__adddf3+0x230>
 80004d8:	0040      	lsls	r0, r0, #1
 80004da:	4149      	adcs	r1, r1
 80004dc:	bf28      	it	cs
 80004de:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004e2:	bd30      	pop	{r4, r5, pc}
 80004e4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e8:	bf3c      	itt	cc
 80004ea:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004ee:	bd30      	popcc	{r4, r5, pc}
 80004f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004f4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004fc:	f04f 0000 	mov.w	r0, #0
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000506:	bf1a      	itte	ne
 8000508:	4619      	movne	r1, r3
 800050a:	4610      	movne	r0, r2
 800050c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000510:	bf1c      	itt	ne
 8000512:	460b      	movne	r3, r1
 8000514:	4602      	movne	r2, r0
 8000516:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800051a:	bf06      	itte	eq
 800051c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000520:	ea91 0f03 	teqeq	r1, r3
 8000524:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	bf00      	nop

0800052c <__aeabi_ui2d>:
 800052c:	f090 0f00 	teq	r0, #0
 8000530:	bf04      	itt	eq
 8000532:	2100      	moveq	r1, #0
 8000534:	4770      	bxeq	lr
 8000536:	b530      	push	{r4, r5, lr}
 8000538:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800053c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000540:	f04f 0500 	mov.w	r5, #0
 8000544:	f04f 0100 	mov.w	r1, #0
 8000548:	e750      	b.n	80003ec <__adddf3+0x138>
 800054a:	bf00      	nop

0800054c <__aeabi_i2d>:
 800054c:	f090 0f00 	teq	r0, #0
 8000550:	bf04      	itt	eq
 8000552:	2100      	moveq	r1, #0
 8000554:	4770      	bxeq	lr
 8000556:	b530      	push	{r4, r5, lr}
 8000558:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800055c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000560:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000564:	bf48      	it	mi
 8000566:	4240      	negmi	r0, r0
 8000568:	f04f 0100 	mov.w	r1, #0
 800056c:	e73e      	b.n	80003ec <__adddf3+0x138>
 800056e:	bf00      	nop

08000570 <__aeabi_f2d>:
 8000570:	0042      	lsls	r2, r0, #1
 8000572:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000576:	ea4f 0131 	mov.w	r1, r1, rrx
 800057a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800057e:	bf1f      	itttt	ne
 8000580:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000584:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000588:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800058c:	4770      	bxne	lr
 800058e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000592:	bf08      	it	eq
 8000594:	4770      	bxeq	lr
 8000596:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800059a:	bf04      	itt	eq
 800059c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a0:	4770      	bxeq	lr
 80005a2:	b530      	push	{r4, r5, lr}
 80005a4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005ac:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b0:	e71c      	b.n	80003ec <__adddf3+0x138>
 80005b2:	bf00      	nop

080005b4 <__aeabi_ul2d>:
 80005b4:	ea50 0201 	orrs.w	r2, r0, r1
 80005b8:	bf08      	it	eq
 80005ba:	4770      	bxeq	lr
 80005bc:	b530      	push	{r4, r5, lr}
 80005be:	f04f 0500 	mov.w	r5, #0
 80005c2:	e00a      	b.n	80005da <__aeabi_l2d+0x16>

080005c4 <__aeabi_l2d>:
 80005c4:	ea50 0201 	orrs.w	r2, r0, r1
 80005c8:	bf08      	it	eq
 80005ca:	4770      	bxeq	lr
 80005cc:	b530      	push	{r4, r5, lr}
 80005ce:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005d2:	d502      	bpl.n	80005da <__aeabi_l2d+0x16>
 80005d4:	4240      	negs	r0, r0
 80005d6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005da:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005de:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005e2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005e6:	f43f aed8 	beq.w	800039a <__adddf3+0xe6>
 80005ea:	f04f 0203 	mov.w	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000602:	f1c2 0320 	rsb	r3, r2, #32
 8000606:	fa00 fc03 	lsl.w	ip, r0, r3
 800060a:	fa20 f002 	lsr.w	r0, r0, r2
 800060e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000612:	ea40 000e 	orr.w	r0, r0, lr
 8000616:	fa21 f102 	lsr.w	r1, r1, r2
 800061a:	4414      	add	r4, r2
 800061c:	e6bd      	b.n	800039a <__adddf3+0xe6>
 800061e:	bf00      	nop

08000620 <__aeabi_dmul>:
 8000620:	b570      	push	{r4, r5, r6, lr}
 8000622:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000626:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800062a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800062e:	bf1d      	ittte	ne
 8000630:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000634:	ea94 0f0c 	teqne	r4, ip
 8000638:	ea95 0f0c 	teqne	r5, ip
 800063c:	f000 f8de 	bleq	80007fc <__aeabi_dmul+0x1dc>
 8000640:	442c      	add	r4, r5
 8000642:	ea81 0603 	eor.w	r6, r1, r3
 8000646:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800064a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800064e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000652:	bf18      	it	ne
 8000654:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000658:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800065c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000660:	d038      	beq.n	80006d4 <__aeabi_dmul+0xb4>
 8000662:	fba0 ce02 	umull	ip, lr, r0, r2
 8000666:	f04f 0500 	mov.w	r5, #0
 800066a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800066e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000672:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000676:	f04f 0600 	mov.w	r6, #0
 800067a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800067e:	f09c 0f00 	teq	ip, #0
 8000682:	bf18      	it	ne
 8000684:	f04e 0e01 	orrne.w	lr, lr, #1
 8000688:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800068c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000690:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000694:	d204      	bcs.n	80006a0 <__aeabi_dmul+0x80>
 8000696:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800069a:	416d      	adcs	r5, r5
 800069c:	eb46 0606 	adc.w	r6, r6, r6
 80006a0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006a4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006ac:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006b4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b8:	bf88      	it	hi
 80006ba:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006be:	d81e      	bhi.n	80006fe <__aeabi_dmul+0xde>
 80006c0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006c4:	bf08      	it	eq
 80006c6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006ca:	f150 0000 	adcs.w	r0, r0, #0
 80006ce:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006d2:	bd70      	pop	{r4, r5, r6, pc}
 80006d4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d8:	ea46 0101 	orr.w	r1, r6, r1
 80006dc:	ea40 0002 	orr.w	r0, r0, r2
 80006e0:	ea81 0103 	eor.w	r1, r1, r3
 80006e4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e8:	bfc2      	ittt	gt
 80006ea:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006ee:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006f2:	bd70      	popgt	{r4, r5, r6, pc}
 80006f4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f8:	f04f 0e00 	mov.w	lr, #0
 80006fc:	3c01      	subs	r4, #1
 80006fe:	f300 80ab 	bgt.w	8000858 <__aeabi_dmul+0x238>
 8000702:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000706:	bfde      	ittt	le
 8000708:	2000      	movle	r0, #0
 800070a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800070e:	bd70      	pople	{r4, r5, r6, pc}
 8000710:	f1c4 0400 	rsb	r4, r4, #0
 8000714:	3c20      	subs	r4, #32
 8000716:	da35      	bge.n	8000784 <__aeabi_dmul+0x164>
 8000718:	340c      	adds	r4, #12
 800071a:	dc1b      	bgt.n	8000754 <__aeabi_dmul+0x134>
 800071c:	f104 0414 	add.w	r4, r4, #20
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f305 	lsl.w	r3, r0, r5
 8000728:	fa20 f004 	lsr.w	r0, r0, r4
 800072c:	fa01 f205 	lsl.w	r2, r1, r5
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000738:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800073c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000740:	fa21 f604 	lsr.w	r6, r1, r4
 8000744:	eb42 0106 	adc.w	r1, r2, r6
 8000748:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800074c:	bf08      	it	eq
 800074e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000752:	bd70      	pop	{r4, r5, r6, pc}
 8000754:	f1c4 040c 	rsb	r4, r4, #12
 8000758:	f1c4 0520 	rsb	r5, r4, #32
 800075c:	fa00 f304 	lsl.w	r3, r0, r4
 8000760:	fa20 f005 	lsr.w	r0, r0, r5
 8000764:	fa01 f204 	lsl.w	r2, r1, r4
 8000768:	ea40 0002 	orr.w	r0, r0, r2
 800076c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000770:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000774:	f141 0100 	adc.w	r1, r1, #0
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f1c4 0520 	rsb	r5, r4, #32
 8000788:	fa00 f205 	lsl.w	r2, r0, r5
 800078c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000790:	fa20 f304 	lsr.w	r3, r0, r4
 8000794:	fa01 f205 	lsl.w	r2, r1, r5
 8000798:	ea43 0302 	orr.w	r3, r3, r2
 800079c:	fa21 f004 	lsr.w	r0, r1, r4
 80007a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a4:	fa21 f204 	lsr.w	r2, r1, r4
 80007a8:	ea20 0002 	bic.w	r0, r0, r2
 80007ac:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b4:	bf08      	it	eq
 80007b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ba:	bd70      	pop	{r4, r5, r6, pc}
 80007bc:	f094 0f00 	teq	r4, #0
 80007c0:	d10f      	bne.n	80007e2 <__aeabi_dmul+0x1c2>
 80007c2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007c6:	0040      	lsls	r0, r0, #1
 80007c8:	eb41 0101 	adc.w	r1, r1, r1
 80007cc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d0:	bf08      	it	eq
 80007d2:	3c01      	subeq	r4, #1
 80007d4:	d0f7      	beq.n	80007c6 <__aeabi_dmul+0x1a6>
 80007d6:	ea41 0106 	orr.w	r1, r1, r6
 80007da:	f095 0f00 	teq	r5, #0
 80007de:	bf18      	it	ne
 80007e0:	4770      	bxne	lr
 80007e2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007e6:	0052      	lsls	r2, r2, #1
 80007e8:	eb43 0303 	adc.w	r3, r3, r3
 80007ec:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f0:	bf08      	it	eq
 80007f2:	3d01      	subeq	r5, #1
 80007f4:	d0f7      	beq.n	80007e6 <__aeabi_dmul+0x1c6>
 80007f6:	ea43 0306 	orr.w	r3, r3, r6
 80007fa:	4770      	bx	lr
 80007fc:	ea94 0f0c 	teq	r4, ip
 8000800:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000804:	bf18      	it	ne
 8000806:	ea95 0f0c 	teqne	r5, ip
 800080a:	d00c      	beq.n	8000826 <__aeabi_dmul+0x206>
 800080c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000810:	bf18      	it	ne
 8000812:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000816:	d1d1      	bne.n	80007bc <__aeabi_dmul+0x19c>
 8000818:	ea81 0103 	eor.w	r1, r1, r3
 800081c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000820:	f04f 0000 	mov.w	r0, #0
 8000824:	bd70      	pop	{r4, r5, r6, pc}
 8000826:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800082a:	bf06      	itte	eq
 800082c:	4610      	moveq	r0, r2
 800082e:	4619      	moveq	r1, r3
 8000830:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000834:	d019      	beq.n	800086a <__aeabi_dmul+0x24a>
 8000836:	ea94 0f0c 	teq	r4, ip
 800083a:	d102      	bne.n	8000842 <__aeabi_dmul+0x222>
 800083c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000840:	d113      	bne.n	800086a <__aeabi_dmul+0x24a>
 8000842:	ea95 0f0c 	teq	r5, ip
 8000846:	d105      	bne.n	8000854 <__aeabi_dmul+0x234>
 8000848:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800084c:	bf1c      	itt	ne
 800084e:	4610      	movne	r0, r2
 8000850:	4619      	movne	r1, r3
 8000852:	d10a      	bne.n	800086a <__aeabi_dmul+0x24a>
 8000854:	ea81 0103 	eor.w	r1, r1, r3
 8000858:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800085c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000860:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000864:	f04f 0000 	mov.w	r0, #0
 8000868:	bd70      	pop	{r4, r5, r6, pc}
 800086a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800086e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000872:	bd70      	pop	{r4, r5, r6, pc}

08000874 <__aeabi_ddiv>:
 8000874:	b570      	push	{r4, r5, r6, lr}
 8000876:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800087a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800087e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000882:	bf1d      	ittte	ne
 8000884:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000888:	ea94 0f0c 	teqne	r4, ip
 800088c:	ea95 0f0c 	teqne	r5, ip
 8000890:	f000 f8a7 	bleq	80009e2 <__aeabi_ddiv+0x16e>
 8000894:	eba4 0405 	sub.w	r4, r4, r5
 8000898:	ea81 0e03 	eor.w	lr, r1, r3
 800089c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008a4:	f000 8088 	beq.w	80009b8 <__aeabi_ddiv+0x144>
 80008a8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008ac:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008b4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008bc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008c4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008cc:	429d      	cmp	r5, r3
 80008ce:	bf08      	it	eq
 80008d0:	4296      	cmpeq	r6, r2
 80008d2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008d6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008da:	d202      	bcs.n	80008e2 <__aeabi_ddiv+0x6e>
 80008dc:	085b      	lsrs	r3, r3, #1
 80008de:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e2:	1ab6      	subs	r6, r6, r2
 80008e4:	eb65 0503 	sbc.w	r5, r5, r3
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008f2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 000c 	orrcs.w	r0, r0, ip
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000950:	ea55 0e06 	orrs.w	lr, r5, r6
 8000954:	d018      	beq.n	8000988 <__aeabi_ddiv+0x114>
 8000956:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800095a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800095e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000962:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000966:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800096a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800096e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000972:	d1c0      	bne.n	80008f6 <__aeabi_ddiv+0x82>
 8000974:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000978:	d10b      	bne.n	8000992 <__aeabi_ddiv+0x11e>
 800097a:	ea41 0100 	orr.w	r1, r1, r0
 800097e:	f04f 0000 	mov.w	r0, #0
 8000982:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000986:	e7b6      	b.n	80008f6 <__aeabi_ddiv+0x82>
 8000988:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800098c:	bf04      	itt	eq
 800098e:	4301      	orreq	r1, r0
 8000990:	2000      	moveq	r0, #0
 8000992:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000996:	bf88      	it	hi
 8000998:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800099c:	f63f aeaf 	bhi.w	80006fe <__aeabi_dmul+0xde>
 80009a0:	ebb5 0c03 	subs.w	ip, r5, r3
 80009a4:	bf04      	itt	eq
 80009a6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009aa:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009ae:	f150 0000 	adcs.w	r0, r0, #0
 80009b2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	pop	{r4, r5, r6, pc}
 80009b8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009bc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009c4:	bfc2      	ittt	gt
 80009c6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009ca:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	popgt	{r4, r5, r6, pc}
 80009d0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009d4:	f04f 0e00 	mov.w	lr, #0
 80009d8:	3c01      	subs	r4, #1
 80009da:	e690      	b.n	80006fe <__aeabi_dmul+0xde>
 80009dc:	ea45 0e06 	orr.w	lr, r5, r6
 80009e0:	e68d      	b.n	80006fe <__aeabi_dmul+0xde>
 80009e2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009e6:	ea94 0f0c 	teq	r4, ip
 80009ea:	bf08      	it	eq
 80009ec:	ea95 0f0c 	teqeq	r5, ip
 80009f0:	f43f af3b 	beq.w	800086a <__aeabi_dmul+0x24a>
 80009f4:	ea94 0f0c 	teq	r4, ip
 80009f8:	d10a      	bne.n	8000a10 <__aeabi_ddiv+0x19c>
 80009fa:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009fe:	f47f af34 	bne.w	800086a <__aeabi_dmul+0x24a>
 8000a02:	ea95 0f0c 	teq	r5, ip
 8000a06:	f47f af25 	bne.w	8000854 <__aeabi_dmul+0x234>
 8000a0a:	4610      	mov	r0, r2
 8000a0c:	4619      	mov	r1, r3
 8000a0e:	e72c      	b.n	800086a <__aeabi_dmul+0x24a>
 8000a10:	ea95 0f0c 	teq	r5, ip
 8000a14:	d106      	bne.n	8000a24 <__aeabi_ddiv+0x1b0>
 8000a16:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a1a:	f43f aefd 	beq.w	8000818 <__aeabi_dmul+0x1f8>
 8000a1e:	4610      	mov	r0, r2
 8000a20:	4619      	mov	r1, r3
 8000a22:	e722      	b.n	800086a <__aeabi_dmul+0x24a>
 8000a24:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a28:	bf18      	it	ne
 8000a2a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a2e:	f47f aec5 	bne.w	80007bc <__aeabi_dmul+0x19c>
 8000a32:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a36:	f47f af0d 	bne.w	8000854 <__aeabi_dmul+0x234>
 8000a3a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a3e:	f47f aeeb 	bne.w	8000818 <__aeabi_dmul+0x1f8>
 8000a42:	e712      	b.n	800086a <__aeabi_dmul+0x24a>

08000a44 <__gedf2>:
 8000a44:	f04f 3cff 	mov.w	ip, #4294967295
 8000a48:	e006      	b.n	8000a58 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__ledf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	e002      	b.n	8000a58 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__cmpdf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a64:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a68:	bf18      	it	ne
 8000a6a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a6e:	d01b      	beq.n	8000aa8 <__cmpdf2+0x54>
 8000a70:	b001      	add	sp, #4
 8000a72:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a76:	bf0c      	ite	eq
 8000a78:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a7c:	ea91 0f03 	teqne	r1, r3
 8000a80:	bf02      	ittt	eq
 8000a82:	ea90 0f02 	teqeq	r0, r2
 8000a86:	2000      	moveq	r0, #0
 8000a88:	4770      	bxeq	lr
 8000a8a:	f110 0f00 	cmn.w	r0, #0
 8000a8e:	ea91 0f03 	teq	r1, r3
 8000a92:	bf58      	it	pl
 8000a94:	4299      	cmppl	r1, r3
 8000a96:	bf08      	it	eq
 8000a98:	4290      	cmpeq	r0, r2
 8000a9a:	bf2c      	ite	cs
 8000a9c:	17d8      	asrcs	r0, r3, #31
 8000a9e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aa2:	f040 0001 	orr.w	r0, r0, #1
 8000aa6:	4770      	bx	lr
 8000aa8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aac:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab0:	d102      	bne.n	8000ab8 <__cmpdf2+0x64>
 8000ab2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ab6:	d107      	bne.n	8000ac8 <__cmpdf2+0x74>
 8000ab8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000abc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac0:	d1d6      	bne.n	8000a70 <__cmpdf2+0x1c>
 8000ac2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ac6:	d0d3      	beq.n	8000a70 <__cmpdf2+0x1c>
 8000ac8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000acc:	4770      	bx	lr
 8000ace:	bf00      	nop

08000ad0 <__aeabi_cdrcmple>:
 8000ad0:	4684      	mov	ip, r0
 8000ad2:	4610      	mov	r0, r2
 8000ad4:	4662      	mov	r2, ip
 8000ad6:	468c      	mov	ip, r1
 8000ad8:	4619      	mov	r1, r3
 8000ada:	4663      	mov	r3, ip
 8000adc:	e000      	b.n	8000ae0 <__aeabi_cdcmpeq>
 8000ade:	bf00      	nop

08000ae0 <__aeabi_cdcmpeq>:
 8000ae0:	b501      	push	{r0, lr}
 8000ae2:	f7ff ffb7 	bl	8000a54 <__cmpdf2>
 8000ae6:	2800      	cmp	r0, #0
 8000ae8:	bf48      	it	mi
 8000aea:	f110 0f00 	cmnmi.w	r0, #0
 8000aee:	bd01      	pop	{r0, pc}

08000af0 <__aeabi_dcmpeq>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff fff4 	bl	8000ae0 <__aeabi_cdcmpeq>
 8000af8:	bf0c      	ite	eq
 8000afa:	2001      	moveq	r0, #1
 8000afc:	2000      	movne	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmplt>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffea 	bl	8000ae0 <__aeabi_cdcmpeq>
 8000b0c:	bf34      	ite	cc
 8000b0e:	2001      	movcc	r0, #1
 8000b10:	2000      	movcs	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmple>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffe0 	bl	8000ae0 <__aeabi_cdcmpeq>
 8000b20:	bf94      	ite	ls
 8000b22:	2001      	movls	r0, #1
 8000b24:	2000      	movhi	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpge>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffce 	bl	8000ad0 <__aeabi_cdrcmple>
 8000b34:	bf94      	ite	ls
 8000b36:	2001      	movls	r0, #1
 8000b38:	2000      	movhi	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmpgt>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffc4 	bl	8000ad0 <__aeabi_cdrcmple>
 8000b48:	bf34      	ite	cc
 8000b4a:	2001      	movcc	r0, #1
 8000b4c:	2000      	movcs	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpun>:
 8000b54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b5c:	d102      	bne.n	8000b64 <__aeabi_dcmpun+0x10>
 8000b5e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b62:	d10a      	bne.n	8000b7a <__aeabi_dcmpun+0x26>
 8000b64:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b6c:	d102      	bne.n	8000b74 <__aeabi_dcmpun+0x20>
 8000b6e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b72:	d102      	bne.n	8000b7a <__aeabi_dcmpun+0x26>
 8000b74:	f04f 0000 	mov.w	r0, #0
 8000b78:	4770      	bx	lr
 8000b7a:	f04f 0001 	mov.w	r0, #1
 8000b7e:	4770      	bx	lr

08000b80 <__aeabi_d2iz>:
 8000b80:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b84:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b88:	d215      	bcs.n	8000bb6 <__aeabi_d2iz+0x36>
 8000b8a:	d511      	bpl.n	8000bb0 <__aeabi_d2iz+0x30>
 8000b8c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b90:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b94:	d912      	bls.n	8000bbc <__aeabi_d2iz+0x3c>
 8000b96:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b9a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b9e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ba2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ba6:	fa23 f002 	lsr.w	r0, r3, r2
 8000baa:	bf18      	it	ne
 8000bac:	4240      	negne	r0, r0
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bba:	d105      	bne.n	8000bc8 <__aeabi_d2iz+0x48>
 8000bbc:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc0:	bf08      	it	eq
 8000bc2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	bf00      	nop

08000bd0 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	b083      	sub	sp, #12
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000bd8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000bdc:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000be0:	f003 0301 	and.w	r3, r3, #1
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d013      	beq.n	8000c10 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000be8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000bec:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000bf0:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d00b      	beq.n	8000c10 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000bf8:	e000      	b.n	8000bfc <ITM_SendChar+0x2c>
    {
      __NOP();
 8000bfa:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000bfc:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d0f9      	beq.n	8000bfa <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000c06:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000c0a:	687a      	ldr	r2, [r7, #4]
 8000c0c:	b2d2      	uxtb	r2, r2
 8000c0e:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000c10:	687b      	ldr	r3, [r7, #4]
}
 8000c12:	4618      	mov	r0, r3
 8000c14:	370c      	adds	r7, #12
 8000c16:	46bd      	mov	sp, r7
 8000c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1c:	4770      	bx	lr
	...

08000c20 <main>:
 * Main Function
 *
 * Entry point that initializes the peripherals and contains the main loop
 * for the CAN communication demonstration.
 ****************************************************************************/
int main(void) {
 8000c20:	b580      	push	{r7, lr}
 8000c22:	af00      	add	r7, sp, #0
	/* System initialization */
	SYSTEM_CLOCK_CONFIG();             // Configure system clock
 8000c24:	f000 fcde 	bl	80015e4 <SYSTEM_CLOCK_CONFIG>
	ICACHE_EN();                     // Enable instruction cache for performance
 8000c28:	4b5f      	ldr	r3, [pc, #380]	; (8000da8 <main+0x188>)
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	4a5e      	ldr	r2, [pc, #376]	; (8000da8 <main+0x188>)
 8000c2e:	f043 0301 	orr.w	r3, r3, #1
 8000c32:	6013      	str	r3, [r2, #0]

	/* Configure PA11 (FDCAN1_RX) and PA12 (FDCAN1_TX) */
	USER_GPIOA_INIT();                 // Initialize GPIOA pins for FDCAN
 8000c34:	f000 faae 	bl	8001194 <USER_GPIOA_INIT>

	/* Configure GPIOB pins for LED status indicators */
	USER_GPIOB_INIT();               // Initialize GPIOB pins for LED indicators
 8000c38:	f000 fad2 	bl	80011e0 <USER_GPIOB_INIT>

	// Config TIMER2
	// Enable TIM2
	SET_BIT_FIELD(RCC_t->APB1LENR, 0);
 8000c3c:	4b5b      	ldr	r3, [pc, #364]	; (8000dac <main+0x18c>)
 8000c3e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8000c42:	4a5a      	ldr	r2, [pc, #360]	; (8000dac <main+0x18c>)
 8000c44:	f043 0301 	orr.w	r3, r3, #1
 8000c48:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c

	// Prescaler for TIM2 --> 250Mhz to 1Mhz (each count will be 1us)
	WRITE_REG_BIT(TIM2_t->PSC, 249, 0);
 8000c4c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000c50:	22f9      	movs	r2, #249	; 0xf9
 8000c52:	629a      	str	r2, [r3, #40]	; 0x28

	// ARR max value
	WRITE_REG_BIT(TIM2_t->ARR, 0xFFFF, 0);
 8000c54:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000c58:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000c5c:	62da      	str	r2, [r3, #44]	; 0x2c

	// ENABLE COUNTER
	SET_BIT_FIELD(TIM2_t->CR1, 0);
 8000c5e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c68:	f043 0301 	orr.w	r3, r3, #1
 8000c6c:	6013      	str	r3, [r2, #0]

	// Update interrupt flag
	while (!READ_BIT_FIELD(TIM2_t->SR, 0, 0x1))
 8000c6e:	bf00      	nop
 8000c70:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000c74:	691b      	ldr	r3, [r3, #16]
 8000c76:	f003 0301 	and.w	r3, r3, #1
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d0f8      	beq.n	8000c70 <main+0x50>
		;

	// I2C Init
	I2C_INIT();
 8000c7e:	f001 f8c3 	bl	8001e08 <I2C_INIT>

	// NVIC I2C2 event interrupt at bit 53
	*NVIC_ISER1_p |= (1 << (I2C2_EV_IRQ_t % 32));
 8000c82:	4b4b      	ldr	r3, [pc, #300]	; (8000db0 <main+0x190>)
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	681a      	ldr	r2, [r3, #0]
 8000c88:	4b49      	ldr	r3, [pc, #292]	; (8000db0 <main+0x190>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8000c90:	601a      	str	r2, [r3, #0]

	// Set TXIE: TX interrupt enable
	SET_BIT_FIELD(I2C2_t->CR1, 1);
 8000c92:	4b48      	ldr	r3, [pc, #288]	; (8000db4 <main+0x194>)
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	4a47      	ldr	r2, [pc, #284]	; (8000db4 <main+0x194>)
 8000c98:	f043 0302 	orr.w	r3, r3, #2
 8000c9c:	6013      	str	r3, [r2, #0]

	// Set TCIE: Transfer complete interrupt enable
	SET_BIT_FIELD(I2C2_t->CR1, 6);
 8000c9e:	4b45      	ldr	r3, [pc, #276]	; (8000db4 <main+0x194>)
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	4a44      	ldr	r2, [pc, #272]	; (8000db4 <main+0x194>)
 8000ca4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ca8:	6013      	str	r3, [r2, #0]

	// LCD Init
	lcd_init();
 8000caa:	f001 fa1b 	bl	80020e4 <lcd_init>

	lcd_clear();
 8000cae:	f001 fa50 	bl	8002152 <lcd_clear>
	// Print char
	lcd_set_cursor(1, 5);
 8000cb2:	2105      	movs	r1, #5
 8000cb4:	2001      	movs	r0, #1
 8000cb6:	f001 f9f0 	bl	800209a <lcd_set_cursor>
	print_string(0x4E, "LCD I2C");
 8000cba:	493f      	ldr	r1, [pc, #252]	; (8000db8 <main+0x198>)
 8000cbc:	204e      	movs	r0, #78	; 0x4e
 8000cbe:	f001 f9d4 	bl	800206a <print_string>
	lcd_set_cursor(2, 3);
 8000cc2:	2103      	movs	r1, #3
 8000cc4:	2002      	movs	r0, #2
 8000cc6:	f001 f9e8 	bl	800209a <lcd_set_cursor>
	print_string(0x4E, "Hello World");
 8000cca:	493c      	ldr	r1, [pc, #240]	; (8000dbc <main+0x19c>)
 8000ccc:	204e      	movs	r0, #78	; 0x4e
 8000cce:	f001 f9cc 	bl	800206a <print_string>

	delayMS(1000);
 8000cd2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000cd6:	f001 f87f 	bl	8001dd8 <delayMS>
	lcd_clear();
 8000cda:	f001 fa3a 	bl	8002152 <lcd_clear>

	/* Configure FDCAN peripheral */
	USER_FDCAN_INIT();                 // Setup FDCAN with specific parameters
 8000cde:	f000 f87b 	bl	8000dd8 <USER_FDCAN_INIT>

	USER_FDCAN_Config_Filter();
 8000ce2:	f000 f99f 	bl	8001024 <USER_FDCAN_Config_Filter>

	// Enable Interrupt for FDCAN at bit 39 (IRQ39)
	*NVIC_ISER1_p |= (1 << (FDCAN1_IT0_IRQ_t % 32));
 8000ce6:	4b32      	ldr	r3, [pc, #200]	; (8000db0 <main+0x190>)
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	681a      	ldr	r2, [r3, #0]
 8000cec:	4b30      	ldr	r3, [pc, #192]	; (8000db0 <main+0x190>)
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000cf4:	601a      	str	r2, [r3, #0]

	// Enable the Rx FIFO 0 new message interrupt
	SET_BIT_FIELD(hfdCan1.Instace->IE, 0);
 8000cf6:	4b32      	ldr	r3, [pc, #200]	; (8000dc0 <main+0x1a0>)
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8000cfc:	4b30      	ldr	r3, [pc, #192]	; (8000dc0 <main+0x1a0>)
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	f042 0201 	orr.w	r2, r2, #1
 8000d04:	655a      	str	r2, [r3, #84]	; 0x54

	// FDCAN interrupt line select register (FDCAN_ILS)
	// BIT 0 --> LINE 0
	// BIT 1 --> LINE1
	CLEAR_BIT_FIELD(hfdCan1.Instace->ILS, 0);
 8000d06:	4b2e      	ldr	r3, [pc, #184]	; (8000dc0 <main+0x1a0>)
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000d0c:	4b2c      	ldr	r3, [pc, #176]	; (8000dc0 <main+0x1a0>)
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	f022 0201 	bic.w	r2, r2, #1
 8000d14:	659a      	str	r2, [r3, #88]	; 0x58

	// FDCAN interrupt line enable register (FDCAN_ILE)
	SET_BIT_FIELD(hfdCan1.Instace->ILE, 0);
 8000d16:	4b2a      	ldr	r3, [pc, #168]	; (8000dc0 <main+0x1a0>)
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8000d1c:	4b28      	ldr	r3, [pc, #160]	; (8000dc0 <main+0x1a0>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	f042 0201 	orr.w	r2, r2, #1
 8000d24:	65da      	str	r2, [r3, #92]	; 0x5c

	/* Exit initialization mode to enter normal operation */
	FDCAN_EXIT_INIT_MODE(hfdCan1.Instace);
 8000d26:	4b26      	ldr	r3, [pc, #152]	; (8000dc0 <main+0x1a0>)
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	699a      	ldr	r2, [r3, #24]
 8000d2c:	4b24      	ldr	r3, [pc, #144]	; (8000dc0 <main+0x1a0>)
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	f022 0201 	bic.w	r2, r2, #1
 8000d34:	619a      	str	r2, [r3, #24]
 8000d36:	4b22      	ldr	r3, [pc, #136]	; (8000dc0 <main+0x1a0>)
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	699b      	ldr	r3, [r3, #24]
 8000d3c:	f003 0301 	and.w	r3, r3, #1
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d1f8      	bne.n	8000d36 <main+0x116>

	/* Configure PC13 for LED blinking */
	USER_GPIOC_INIT();                 // Initialize GPIOC pin for status LED
 8000d44:	f000 fa94 	bl	8001270 <USER_GPIOC_INIT>
	/* Main application loop */
	while (1) {
		// Do CAN operation first
		USER_CAN_TX();
 8000d48:	f000 fbd2 	bl	80014f0 <USER_CAN_TX>
//		delayMS(10); // Wait for I2C bus to be free
		// Then do LCD operations
		lcd_clear();
 8000d4c:	f001 fa01 	bl	8002152 <lcd_clear>
//		delayMS(5);
		lcd_set_cursor(1, 1);
 8000d50:	2101      	movs	r1, #1
 8000d52:	2001      	movs	r0, #1
 8000d54:	f001 f9a1 	bl	800209a <lcd_set_cursor>
//		delayMS(5);
		print_string(0x4E, "Sent: ");
 8000d58:	491a      	ldr	r1, [pc, #104]	; (8000dc4 <main+0x1a4>)
 8000d5a:	204e      	movs	r0, #78	; 0x4e
 8000d5c:	f001 f985 	bl	800206a <print_string>
//		delayMS(5);
		print_string(0x4E, (char*) send);
 8000d60:	4b19      	ldr	r3, [pc, #100]	; (8000dc8 <main+0x1a8>)
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	4619      	mov	r1, r3
 8000d66:	204e      	movs	r0, #78	; 0x4e
 8000d68:	f001 f97f 	bl	800206a <print_string>
//		delayMS(5);

		lcd_set_cursor(2, 1);
 8000d6c:	2101      	movs	r1, #1
 8000d6e:	2002      	movs	r0, #2
 8000d70:	f001 f993 	bl	800209a <lcd_set_cursor>
//		delayMS(5);
		print_string(0x4E, "Received: ");
 8000d74:	4915      	ldr	r1, [pc, #84]	; (8000dcc <main+0x1ac>)
 8000d76:	204e      	movs	r0, #78	; 0x4e
 8000d78:	f001 f977 	bl	800206a <print_string>
//		delayMS(5);
		print_string(0x4E, (char*) receivedData);
 8000d7c:	4914      	ldr	r1, [pc, #80]	; (8000dd0 <main+0x1b0>)
 8000d7e:	204e      	movs	r0, #78	; 0x4e
 8000d80:	f001 f973 	bl	800206a <print_string>

		// LED operations
		GPIO_OUTPUT_t(GPIOC_t, 13, LOW);
 8000d84:	2200      	movs	r2, #0
 8000d86:	210d      	movs	r1, #13
 8000d88:	4812      	ldr	r0, [pc, #72]	; (8000dd4 <main+0x1b4>)
 8000d8a:	f000 fb83 	bl	8001494 <GPIO_OUTPUT_t>
		delayMS(100);
 8000d8e:	2064      	movs	r0, #100	; 0x64
 8000d90:	f001 f822 	bl	8001dd8 <delayMS>
		GPIO_OUTPUT_t(GPIOC_t, 13, HIGH);
 8000d94:	2201      	movs	r2, #1
 8000d96:	210d      	movs	r1, #13
 8000d98:	480e      	ldr	r0, [pc, #56]	; (8000dd4 <main+0x1b4>)
 8000d9a:	f000 fb7b 	bl	8001494 <GPIO_OUTPUT_t>
		delayMS(100);
 8000d9e:	2064      	movs	r0, #100	; 0x64
 8000da0:	f001 f81a 	bl	8001dd8 <delayMS>
		USER_CAN_TX();
 8000da4:	e7d0      	b.n	8000d48 <main+0x128>
 8000da6:	bf00      	nop
 8000da8:	40030400 	.word	0x40030400
 8000dac:	44020c00 	.word	0x44020c00
 8000db0:	20000000 	.word	0x20000000
 8000db4:	40005800 	.word	0x40005800
 8000db8:	08004e58 	.word	0x08004e58
 8000dbc:	08004e60 	.word	0x08004e60
 8000dc0:	200001f4 	.word	0x200001f4
 8000dc4:	08004e6c 	.word	0x08004e6c
 8000dc8:	20000288 	.word	0x20000288
 8000dcc:	08004e74 	.word	0x08004e74
 8000dd0:	20000280 	.word	0x20000280
 8000dd4:	42020800 	.word	0x42020800

08000dd8 <USER_FDCAN_INIT>:

/**
 * @brief  Configure FDCAN1 with user settings
 * @note   Sets up bit timing, mode, frame format and other parameters
 */
void USER_FDCAN_INIT() {
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	af00      	add	r7, sp, #0
	hfdCan1.mode = FDCAN_MODE_NORMAL;        // Normal operating mode
 8000ddc:	4b12      	ldr	r3, [pc, #72]	; (8000e28 <USER_FDCAN_INIT+0x50>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	711a      	strb	r2, [r3, #4]
	hfdCan1.AutoRetransmission = ENABLE;        // Enable auto retransmission
 8000de2:	4b11      	ldr	r3, [pc, #68]	; (8000e28 <USER_FDCAN_INIT+0x50>)
 8000de4:	2201      	movs	r2, #1
 8000de6:	725a      	strb	r2, [r3, #9]
	hfdCan1.FrameFormat = FDCAN_FRAME_CLASSIC;  // Use classic CAN format
 8000de8:	4b0f      	ldr	r3, [pc, #60]	; (8000e28 <USER_FDCAN_INIT+0x50>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	60da      	str	r2, [r3, #12]
	hfdCan1.TxFifoQueueMode = FDCAN_TXBUFFER_FIFO; // Use FIFO for transmission
 8000dee:	4b0e      	ldr	r3, [pc, #56]	; (8000e28 <USER_FDCAN_INIT+0x50>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	729a      	strb	r2, [r3, #10]
	hfdCan1.ntseg1 = 0x7;                      // Time segment 1 (8 time quanta)
 8000df4:	4b0c      	ldr	r3, [pc, #48]	; (8000e28 <USER_FDCAN_INIT+0x50>)
 8000df6:	2207      	movs	r2, #7
 8000df8:	719a      	strb	r2, [r3, #6]
	hfdCan1.ntseg2 = 0x2;                      // Time segment 2 (3 time quanta)
 8000dfa:	4b0b      	ldr	r3, [pc, #44]	; (8000e28 <USER_FDCAN_INIT+0x50>)
 8000dfc:	2202      	movs	r2, #2
 8000dfe:	715a      	strb	r2, [r3, #5]
	hfdCan1.psc = 25;                           // Prescaler for bit timing
 8000e00:	4b09      	ldr	r3, [pc, #36]	; (8000e28 <USER_FDCAN_INIT+0x50>)
 8000e02:	2219      	movs	r2, #25
 8000e04:	71da      	strb	r2, [r3, #7]
	hfdCan1.tjw = 1;                            // Resynchronization jump width
 8000e06:	4b08      	ldr	r3, [pc, #32]	; (8000e28 <USER_FDCAN_INIT+0x50>)
 8000e08:	2201      	movs	r2, #1
 8000e0a:	721a      	strb	r2, [r3, #8]
	hfdCan1.Instace = FDCAN1_t;                 // Use FDCAN1 peripheral
 8000e0c:	4b06      	ldr	r3, [pc, #24]	; (8000e28 <USER_FDCAN_INIT+0x50>)
 8000e0e:	4a07      	ldr	r2, [pc, #28]	; (8000e2c <USER_FDCAN_INIT+0x54>)
 8000e10:	601a      	str	r2, [r3, #0]
	hfdCan1.StdFiltersNbr = 1;
 8000e12:	4b05      	ldr	r3, [pc, #20]	; (8000e28 <USER_FDCAN_INIT+0x50>)
 8000e14:	2201      	movs	r2, #1
 8000e16:	741a      	strb	r2, [r3, #16]
	hfdCan1.ExtFiltersNbr = 0;
 8000e18:	4b03      	ldr	r3, [pc, #12]	; (8000e28 <USER_FDCAN_INIT+0x50>)
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	745a      	strb	r2, [r3, #17]
	FDCAN_INIT(&hfdCan1);                       // Apply configuration
 8000e1e:	4802      	ldr	r0, [pc, #8]	; (8000e28 <USER_FDCAN_INIT+0x50>)
 8000e20:	f000 f806 	bl	8000e30 <FDCAN_INIT>
}
 8000e24:	bf00      	nop
 8000e26:	bd80      	pop	{r7, pc}
 8000e28:	200001f4 	.word	0x200001f4
 8000e2c:	4000a400 	.word	0x4000a400

08000e30 <FDCAN_INIT>:
/**
 * @brief  Initialize FDCAN peripheral
 * @param  hfdCAN1_Handle_t: Pointer to FDCAN handler structure
 * @note   Configures the FDCAN peripheral based on handler parameters
 */
void FDCAN_INIT(FDCAN_Handle_Typedef_t *hfdCAN1_Handle_t) {
 8000e30:	b480      	push	{r7}
 8000e32:	b083      	sub	sp, #12
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
	/* Enable clock for FDCAN peripheral */
	if (hfdCAN1_Handle_t->Instace == FDCAN1_t) {
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	4a77      	ldr	r2, [pc, #476]	; (800101c <FDCAN_INIT+0x1ec>)
 8000e3e:	4293      	cmp	r3, r2
 8000e40:	d107      	bne.n	8000e52 <FDCAN_INIT+0x22>
		FDCAN1_CLK_EN();
 8000e42:	4b77      	ldr	r3, [pc, #476]	; (8001020 <FDCAN_INIT+0x1f0>)
 8000e44:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8000e48:	4a75      	ldr	r2, [pc, #468]	; (8001020 <FDCAN_INIT+0x1f0>)
 8000e4a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e4e:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
	}

	/* Enter initialization mode to modify configuration registers */
	FDCAN_ENTER_INIT_MODE(hfdCAN1_Handle_t->Instace);
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	699a      	ldr	r2, [r3, #24]
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	f042 0201 	orr.w	r2, r2, #1
 8000e60:	619a      	str	r2, [r3, #24]
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	699a      	ldr	r2, [r3, #24]
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	f042 0202 	orr.w	r2, r2, #2
 8000e70:	619a      	str	r2, [r3, #24]
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	699b      	ldr	r3, [r3, #24]
 8000e78:	f003 0301 	and.w	r3, r3, #1
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d0f8      	beq.n	8000e72 <FDCAN_INIT+0x42>

	/* Configure test mode if specified */
	if (hfdCAN1_Handle_t->mode == FDCAN_MODE_EXTERNAL_LOOPBACK) {
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	791b      	ldrb	r3, [r3, #4]
 8000e84:	2b04      	cmp	r3, #4
 8000e86:	d110      	bne.n	8000eaa <FDCAN_INIT+0x7a>
		/* External loopback mode: Disconnected from CAN bus, TX connected to RX internally */
		FDCAN_ENABLE_EXTERNAL_LOOPBACK(hfdCAN1_Handle_t->Instace);
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	699a      	ldr	r2, [r3, #24]
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000e96:	619a      	str	r2, [r3, #24]
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	691a      	ldr	r2, [r3, #16]
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	f042 0210 	orr.w	r2, r2, #16
 8000ea6:	611a      	str	r2, [r3, #16]
 8000ea8:	e01b      	b.n	8000ee2 <FDCAN_INIT+0xb2>
	} else if (hfdCAN1_Handle_t->mode == FDCAN_MODE_INTERNAL_LOOPBACK) {
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	791b      	ldrb	r3, [r3, #4]
 8000eae:	2b03      	cmp	r3, #3
 8000eb0:	d117      	bne.n	8000ee2 <FDCAN_INIT+0xb2>
		/* Internal loopback mode: Connected to CAN bus, messages looped back internally */
		FDCAN_ENABLE_INTERNAL_LOOPBACK(hfdCAN1_Handle_t->Instace);
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	699a      	ldr	r2, [r3, #24]
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000ec0:	619a      	str	r2, [r3, #24]
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	691a      	ldr	r2, [r3, #16]
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	f042 0210 	orr.w	r2, r2, #16
 8000ed0:	611a      	str	r2, [r3, #16]
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	691a      	ldr	r2, [r3, #16]
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	f042 0220 	orr.w	r2, r2, #32
 8000ee0:	611a      	str	r2, [r3, #16]
		/* Normal mode: Connected to CAN bus */
		/* No specific configuration needed for normal mode */
	}

	// Number of standard/extended filter elements in the list
	WRITE_REG_BIT(hfdCAN1_Handle_t->Instace->RXGFC, 0, 16);
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	WRITE_REG_BIT(hfdCAN1_Handle_t->Instace->RXGFC, 0, 24);
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	SET_VAL_BIT(hfdCAN1_Handle_t->Instace->RXGFC,
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	7c1b      	ldrb	r3, [r3, #16]
 8000f02:	041b      	lsls	r3, r3, #16
 8000f04:	4619      	mov	r1, r3
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	430a      	orrs	r2, r1
 8000f0c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
			hfdCAN1_Handle_t->StdFiltersNbr, 16);
	SET_VAL_BIT(hfdCAN1_Handle_t->Instace->RXGFC,
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	7c5b      	ldrb	r3, [r3, #17]
 8000f1c:	061b      	lsls	r3, r3, #24
 8000f1e:	4619      	mov	r1, r3
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	430a      	orrs	r2, r1
 8000f26:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
			hfdCAN1_Handle_t->ExtFiltersNbr, 24);

	/* Configure bit timing for classical CAN frame format */
	if (hfdCAN1_Handle_t->mode == FDCAN_FRAME_CLASSIC) {
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	791b      	ldrb	r3, [r3, #4]
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d147      	bne.n	8000fc2 <FDCAN_INIT+0x192>
		/* Reset the nominal bit timing register before configuring */
		WRITE_ALL_REG(hfdCAN1_Handle_t->Instace->NBTP, 0);
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	2200      	movs	r2, #0
 8000f38:	61da      	str	r2, [r3, #28]

		/* Configure time segment 2 (phase2) [bits 0-7] */
		SET_VAL_BIT(hfdCAN1_Handle_t->Instace->NBTP,
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	69da      	ldr	r2, [r3, #28]
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	795b      	ldrb	r3, [r3, #5]
 8000f44:	3b01      	subs	r3, #1
 8000f46:	4619      	mov	r1, r3
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	430a      	orrs	r2, r1
 8000f4e:	61da      	str	r2, [r3, #28]
				hfdCAN1_Handle_t->ntseg2 - 1, 0);

		/* Configure time segment 1 (prop_seg + phase1) [bits 8-15] */
		SET_VAL_BIT(hfdCAN1_Handle_t->Instace->NBTP,
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	69da      	ldr	r2, [r3, #28]
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	799b      	ldrb	r3, [r3, #6]
 8000f5a:	3b01      	subs	r3, #1
 8000f5c:	021b      	lsls	r3, r3, #8
 8000f5e:	4619      	mov	r1, r3
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	430a      	orrs	r2, r1
 8000f66:	61da      	str	r2, [r3, #28]
				hfdCAN1_Handle_t->ntseg1 - 1, 8);

		/* Configure prescaler (controls time quantum length) [bits 16-24] */
		SET_VAL_BIT(hfdCAN1_Handle_t->Instace->NBTP, hfdCAN1_Handle_t->psc - 1,
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	69da      	ldr	r2, [r3, #28]
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	79db      	ldrb	r3, [r3, #7]
 8000f72:	3b01      	subs	r3, #1
 8000f74:	041b      	lsls	r3, r3, #16
 8000f76:	4619      	mov	r1, r3
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	430a      	orrs	r2, r1
 8000f7e:	61da      	str	r2, [r3, #28]
				16);

		/* Configure sync jump width [bits 25-28] */
		if (hfdCAN1_Handle_t->tjw == 1) {
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	7a1b      	ldrb	r3, [r3, #8]
 8000f84:	2b01      	cmp	r3, #1
 8000f86:	d108      	bne.n	8000f9a <FDCAN_INIT+0x16a>
			/* Default TJW, no need to set */
			CLEAR_BIT_FIELD(hfdCAN1_Handle_t->Instace->NBTP, 25);
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	69da      	ldr	r2, [r3, #28]
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 8000f96:	61da      	str	r2, [r3, #28]
 8000f98:	e00b      	b.n	8000fb2 <FDCAN_INIT+0x182>
		} else {
			/* Custom TJW value */
			SET_VAL_BIT(hfdCAN1_Handle_t->Instace->NBTP,
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	69da      	ldr	r2, [r3, #28]
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	7a1b      	ldrb	r3, [r3, #8]
 8000fa4:	3b01      	subs	r3, #1
 8000fa6:	065b      	lsls	r3, r3, #25
 8000fa8:	4619      	mov	r1, r3
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	430a      	orrs	r2, r1
 8000fb0:	61da      	str	r2, [r3, #28]
					hfdCAN1_Handle_t->tjw - 1, 25);
		}

		/* Configure for classic CAN mode operation */
		FDCAN_ENABLE_CLASSICAL_CAN_MODE(hfdCAN1_Handle_t->Instace);
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	699a      	ldr	r2, [r3, #24]
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000fc0:	619a      	str	r2, [r3, #24]
	}

	/* Configure TX buffer mode (FIFO or Queue) */
	if (hfdCAN1_Handle_t->TxFifoQueueMode == FDCAN_TXBUFFER_FIFO) {
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	7a9b      	ldrb	r3, [r3, #10]
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d10a      	bne.n	8000fe0 <FDCAN_INIT+0x1b0>
		/* TX FIFO mode: messages transmitted in order they were put in */
		FDCAN_ENABLE_TX_FIFO(hfdCAN1_Handle_t->Instace);
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8000fda:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
 8000fde:	e009      	b.n	8000ff4 <FDCAN_INIT+0x1c4>
	} else {
		/* TX Queue mode: messages transmitted based on identifier priority */
		FDCAN_ENABLE_TX_QUEUE(hfdCAN1_Handle_t->Instace);
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8000ff0:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	}

	/* Configure RX FIFO operation mode */
	if (hfdCAN1_Handle_t->RxFifoOperationMode == FDCAN_FIFO0_OVERWRITE_MODE) {
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	7adb      	ldrb	r3, [r3, #11]
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d109      	bne.n	8001010 <FDCAN_INIT+0x1e0>
		/* Overwrite mode: New messages overwrite oldest when FIFO is full */
		FDCAN_ENABLE_FIFO0_OVERWRITE(hfdCAN1_Handle_t->Instace);
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800100c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	}
	/* Else: blocking mode is the default (no overwrite) */
}
 8001010:	bf00      	nop
 8001012:	370c      	adds	r7, #12
 8001014:	46bd      	mov	sp, r7
 8001016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101a:	4770      	bx	lr
 800101c:	4000a400 	.word	0x4000a400
 8001020:	44020c00 	.word	0x44020c00

08001024 <USER_FDCAN_Config_Filter>:

void USER_FDCAN_Config_Filter() {
 8001024:	b580      	push	{r7, lr}
 8001026:	b082      	sub	sp, #8
 8001028:	af02      	add	r7, sp, #8
	hFilter.IdType = FDCAN_STANDARD_ID;
 800102a:	4b11      	ldr	r3, [pc, #68]	; (8001070 <USER_FDCAN_Config_Filter+0x4c>)
 800102c:	2200      	movs	r2, #0
 800102e:	601a      	str	r2, [r3, #0]
	hFilter.FilterConfig = FDCAN_FILTER_RXFIFO0;
 8001030:	4b0f      	ldr	r3, [pc, #60]	; (8001070 <USER_FDCAN_Config_Filter+0x4c>)
 8001032:	2201      	movs	r2, #1
 8001034:	60da      	str	r2, [r3, #12]
	hFilter.FilterIndex = 0;
 8001036:	4b0e      	ldr	r3, [pc, #56]	; (8001070 <USER_FDCAN_Config_Filter+0x4c>)
 8001038:	2200      	movs	r2, #0
 800103a:	605a      	str	r2, [r3, #4]
	hFilter.FilterType = FDCAN_FILTER_MASK_t;
 800103c:	4b0c      	ldr	r3, [pc, #48]	; (8001070 <USER_FDCAN_Config_Filter+0x4c>)
 800103e:	2202      	movs	r2, #2
 8001040:	609a      	str	r2, [r3, #8]
	hFilter.FilterID1 = 0x125;
 8001042:	4b0b      	ldr	r3, [pc, #44]	; (8001070 <USER_FDCAN_Config_Filter+0x4c>)
 8001044:	f240 1225 	movw	r2, #293	; 0x125
 8001048:	611a      	str	r2, [r3, #16]
	hFilter.FilterID2 = 0x7FF;
 800104a:	4b09      	ldr	r3, [pc, #36]	; (8001070 <USER_FDCAN_Config_Filter+0x4c>)
 800104c:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8001050:	615a      	str	r2, [r3, #20]

	FDCAN_FILTER_INIT(&hFilter);
 8001052:	4807      	ldr	r0, [pc, #28]	; (8001070 <USER_FDCAN_Config_Filter+0x4c>)
 8001054:	f000 f810 	bl	8001078 <FDCAN_FILTER_INIT>

	FDCAN_CONFIG_GLOBAL_FILTER(&hfdCan1, FDCAN_FILTER_REMOTE_t,
 8001058:	2302      	movs	r3, #2
 800105a:	9300      	str	r3, [sp, #0]
 800105c:	2302      	movs	r3, #2
 800105e:	2200      	movs	r2, #0
 8001060:	2100      	movs	r1, #0
 8001062:	4804      	ldr	r0, [pc, #16]	; (8001074 <USER_FDCAN_Config_Filter+0x50>)
 8001064:	f000 f82c 	bl	80010c0 <FDCAN_CONFIG_GLOBAL_FILTER>
	FDCAN_FILTER_REMOTE_t, FDCAN_REJECT_t, FDCAN_REJECT_t);
}
 8001068:	bf00      	nop
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}
 800106e:	bf00      	nop
 8001070:	20000208 	.word	0x20000208
 8001074:	200001f4 	.word	0x200001f4

08001078 <FDCAN_FILTER_INIT>:

#define SRAMCAN_FLS_SIZE (1*4)

void FDCAN_FILTER_INIT(FDCAN_FilterTypeDef_t *hFilter) {
 8001078:	b480      	push	{r7}
 800107a:	b085      	sub	sp, #20
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
	uint32_t *FilterAddress = (uint32_t*) (SRAMCAN_BASE_ADDR
			+ (hFilter->FilterIndex * SRAMCAN_FLS_SIZE));
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	685b      	ldr	r3, [r3, #4]
 8001084:	f103 5380 	add.w	r3, r3, #268435456	; 0x10000000
 8001088:	f503 532c 	add.w	r3, r3, #11008	; 0x2b00
 800108c:	009b      	lsls	r3, r3, #2
	uint32_t *FilterAddress = (uint32_t*) (SRAMCAN_BASE_ADDR
 800108e:	60fb      	str	r3, [r7, #12]
// Build Word for Standard message ID filter element
	uint32_t firstElement = (hFilter->FilterType << 30
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	689b      	ldr	r3, [r3, #8]
 8001094:	079a      	lsls	r2, r3, #30
			| hFilter->FilterConfig << 27 | hFilter->FilterID1 << 16
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	68db      	ldr	r3, [r3, #12]
 800109a:	06db      	lsls	r3, r3, #27
 800109c:	431a      	orrs	r2, r3
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	691b      	ldr	r3, [r3, #16]
 80010a2:	041b      	lsls	r3, r3, #16
 80010a4:	431a      	orrs	r2, r3
			| hFilter->FilterID2 << 0);
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	695b      	ldr	r3, [r3, #20]
	uint32_t firstElement = (hFilter->FilterType << 30
 80010aa:	4313      	orrs	r3, r2
 80010ac:	60bb      	str	r3, [r7, #8]
	*FilterAddress = firstElement;
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	68ba      	ldr	r2, [r7, #8]
 80010b2:	601a      	str	r2, [r3, #0]
}
 80010b4:	bf00      	nop
 80010b6:	3714      	adds	r7, #20
 80010b8:	46bd      	mov	sp, r7
 80010ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010be:	4770      	bx	lr

080010c0 <FDCAN_CONFIG_GLOBAL_FILTER>:

void FDCAN_CONFIG_GLOBAL_FILTER(FDCAN_Handle_Typedef_t *hfdCan1,
		uint8_t rejectRemoteFrameExtended, uint8_t rejectRemoteFrameStandard,
		uint8_t AcceptNonMatchingFrameExtended,
		uint8_t AcceptNonMatchingFrameStandard) {
 80010c0:	b480      	push	{r7}
 80010c2:	b083      	sub	sp, #12
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
 80010c8:	4608      	mov	r0, r1
 80010ca:	4611      	mov	r1, r2
 80010cc:	461a      	mov	r2, r3
 80010ce:	4603      	mov	r3, r0
 80010d0:	70fb      	strb	r3, [r7, #3]
 80010d2:	460b      	mov	r3, r1
 80010d4:	70bb      	strb	r3, [r7, #2]
 80010d6:	4613      	mov	r3, r2
 80010d8:	707b      	strb	r3, [r7, #1]
	CLEAR_BIT_FIELD(hfdCan1->Instace->RXGFC, 0);
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	f022 0201 	bic.w	r2, r2, #1
 80010ea:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	SET_VAL_BIT(hfdCan1->Instace->RXGFC, rejectRemoteFrameExtended, 0);
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	f8d3 1080 	ldr.w	r1, [r3, #128]	; 0x80
 80010f6:	78fa      	ldrb	r2, [r7, #3]
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	430a      	orrs	r2, r1
 80010fe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

	CLEAR_BIT_FIELD(hfdCan1->Instace->RXGFC, 1);
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	f022 0202 	bic.w	r2, r2, #2
 8001112:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	SET_VAL_BIT(hfdCan1->Instace->RXGFC, rejectRemoteFrameStandard, 1);
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 800111e:	78bb      	ldrb	r3, [r7, #2]
 8001120:	005b      	lsls	r3, r3, #1
 8001122:	4619      	mov	r1, r3
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	430a      	orrs	r2, r1
 800112a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

	CLEAR_VAL_BIT(hfdCan1->Instace->RXGFC, 0x3, 2);
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	f022 020c 	bic.w	r2, r2, #12
 800113e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	SET_VAL_BIT(hfdCan1->Instace->RXGFC, AcceptNonMatchingFrameExtended, 2);
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 800114a:	787b      	ldrb	r3, [r7, #1]
 800114c:	009b      	lsls	r3, r3, #2
 800114e:	4619      	mov	r1, r3
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	430a      	orrs	r2, r1
 8001156:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

	CLEAR_VAL_BIT(hfdCan1->Instace->RXGFC, 0x3, 2);
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	f022 020c 	bic.w	r2, r2, #12
 800116a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	SET_VAL_BIT(hfdCan1->Instace->RXGFC, AcceptNonMatchingFrameStandard, 3);
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8001176:	7c3b      	ldrb	r3, [r7, #16]
 8001178:	00db      	lsls	r3, r3, #3
 800117a:	4619      	mov	r1, r3
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	430a      	orrs	r2, r1
 8001182:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
}
 8001186:	bf00      	nop
 8001188:	370c      	adds	r7, #12
 800118a:	46bd      	mov	sp, r7
 800118c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001190:	4770      	bx	lr
	...

08001194 <USER_GPIOA_INIT>:

/**
 * @brief  Initialize GPIOA pins for FDCAN
 * @note   Configures PA11 as FDCAN1_RX and PA12 as FDCAN1_TX
 */
void USER_GPIOA_INIT() {
 8001194:	b580      	push	{r7, lr}
 8001196:	af00      	add	r7, sp, #0
	/* Configure PA11 for FDCAN1_RX */
	hGPIOA.Instace = GPIOA_t;
 8001198:	4b0f      	ldr	r3, [pc, #60]	; (80011d8 <USER_GPIOA_INIT+0x44>)
 800119a:	4a10      	ldr	r2, [pc, #64]	; (80011dc <USER_GPIOA_INIT+0x48>)
 800119c:	601a      	str	r2, [r3, #0]
	hGPIOA.pin = GPIO_PIN_11;           // PA11 is FDCAN1_RX
 800119e:	4b0e      	ldr	r3, [pc, #56]	; (80011d8 <USER_GPIOA_INIT+0x44>)
 80011a0:	220b      	movs	r2, #11
 80011a2:	711a      	strb	r2, [r3, #4]
	hGPIOA.af = GPIO_AF9;               // Alternate Function 9 for FDCAN
 80011a4:	4b0c      	ldr	r3, [pc, #48]	; (80011d8 <USER_GPIOA_INIT+0x44>)
 80011a6:	2209      	movs	r2, #9
 80011a8:	725a      	strb	r2, [r3, #9]
	hGPIOA.mode = GPIO_ALT_MODE;        // Alternate function mode
 80011aa:	4b0b      	ldr	r3, [pc, #44]	; (80011d8 <USER_GPIOA_INIT+0x44>)
 80011ac:	2202      	movs	r2, #2
 80011ae:	715a      	strb	r2, [r3, #5]
	hGPIOA.ospeed = GPIO_OUTPUT_VHS;    // Very high speed
 80011b0:	4b09      	ldr	r3, [pc, #36]	; (80011d8 <USER_GPIOA_INIT+0x44>)
 80011b2:	2203      	movs	r2, #3
 80011b4:	71da      	strb	r2, [r3, #7]
	hGPIOA.otype = GPIO_OUTPUT_PP;      // Push-pull output
 80011b6:	4b08      	ldr	r3, [pc, #32]	; (80011d8 <USER_GPIOA_INIT+0x44>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	719a      	strb	r2, [r3, #6]
	hGPIOA.pupd = GPIO_NO_PUPD;         // No pull-up or pull-down
 80011bc:	4b06      	ldr	r3, [pc, #24]	; (80011d8 <USER_GPIOA_INIT+0x44>)
 80011be:	2200      	movs	r2, #0
 80011c0:	721a      	strb	r2, [r3, #8]
	GPIO_INIT_t(&hGPIOA);               // Apply configuration
 80011c2:	4805      	ldr	r0, [pc, #20]	; (80011d8 <USER_GPIOA_INIT+0x44>)
 80011c4:	f000 f874 	bl	80012b0 <GPIO_INIT_t>

	/* Configure PA12 for FDCAN1_TX */
	hGPIOA.pin = GPIO_PIN_12;           // PA12 is FDCAN1_TX
 80011c8:	4b03      	ldr	r3, [pc, #12]	; (80011d8 <USER_GPIOA_INIT+0x44>)
 80011ca:	220c      	movs	r2, #12
 80011cc:	711a      	strb	r2, [r3, #4]
	GPIO_INIT_t(&hGPIOA);               // Apply same configuration to PA12
 80011ce:	4802      	ldr	r0, [pc, #8]	; (80011d8 <USER_GPIOA_INIT+0x44>)
 80011d0:	f000 f86e 	bl	80012b0 <GPIO_INIT_t>
}
 80011d4:	bf00      	nop
 80011d6:	bd80      	pop	{r7, pc}
 80011d8:	2000025c 	.word	0x2000025c
 80011dc:	42020000 	.word	0x42020000

080011e0 <USER_GPIOB_INIT>:

/**
 * @brief  Initialize GPIOB pin for LED
 * @note   Configures PB4, PB5, PB6 as output for LED control
 */
void USER_GPIOB_INIT(void) {
 80011e0:	b580      	push	{r7, lr}
 80011e2:	af00      	add	r7, sp, #0
	/* Configure PC13 for LED output */
	hGPIOB.Instace = GPIOB_t;
 80011e4:	4b20      	ldr	r3, [pc, #128]	; (8001268 <USER_GPIOB_INIT+0x88>)
 80011e6:	4a21      	ldr	r2, [pc, #132]	; (800126c <USER_GPIOB_INIT+0x8c>)
 80011e8:	601a      	str	r2, [r3, #0]
	hGPIOB.pin = GPIO_PIN_0;           // PB0
 80011ea:	4b1f      	ldr	r3, [pc, #124]	; (8001268 <USER_GPIOB_INIT+0x88>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	711a      	strb	r2, [r3, #4]
	hGPIOB.af = GPIO_AF_NONE;           // No alternate function
 80011f0:	4b1d      	ldr	r3, [pc, #116]	; (8001268 <USER_GPIOB_INIT+0x88>)
 80011f2:	22ff      	movs	r2, #255	; 0xff
 80011f4:	725a      	strb	r2, [r3, #9]
	hGPIOB.mode = GPIO_OUTPUT_MODE;     // Output mode
 80011f6:	4b1c      	ldr	r3, [pc, #112]	; (8001268 <USER_GPIOB_INIT+0x88>)
 80011f8:	2201      	movs	r2, #1
 80011fa:	715a      	strb	r2, [r3, #5]
	hGPIOB.ospeed = GPIO_OUTPUT_VHS;    // Very high speed
 80011fc:	4b1a      	ldr	r3, [pc, #104]	; (8001268 <USER_GPIOB_INIT+0x88>)
 80011fe:	2203      	movs	r2, #3
 8001200:	71da      	strb	r2, [r3, #7]
	hGPIOB.otype = GPIO_OUTPUT_PP;      // Push-pull output
 8001202:	4b19      	ldr	r3, [pc, #100]	; (8001268 <USER_GPIOB_INIT+0x88>)
 8001204:	2200      	movs	r2, #0
 8001206:	719a      	strb	r2, [r3, #6]
	hGPIOB.pupd = GPIO_NO_PUPD;         // No pull-up or pull-down
 8001208:	4b17      	ldr	r3, [pc, #92]	; (8001268 <USER_GPIOB_INIT+0x88>)
 800120a:	2200      	movs	r2, #0
 800120c:	721a      	strb	r2, [r3, #8]
	GPIO_INIT_t(&hGPIOB);               // Apply configuration
 800120e:	4816      	ldr	r0, [pc, #88]	; (8001268 <USER_GPIOB_INIT+0x88>)
 8001210:	f000 f84e 	bl	80012b0 <GPIO_INIT_t>

	/* Configure PB5 for LED control */
	hGPIOB.pin = GPIO_PIN_1;           // PB1
 8001214:	4b14      	ldr	r3, [pc, #80]	; (8001268 <USER_GPIOB_INIT+0x88>)
 8001216:	2201      	movs	r2, #1
 8001218:	711a      	strb	r2, [r3, #4]
	GPIO_INIT_t(&hGPIOB);               // Apply same configuration to PB5
 800121a:	4813      	ldr	r0, [pc, #76]	; (8001268 <USER_GPIOB_INIT+0x88>)
 800121c:	f000 f848 	bl	80012b0 <GPIO_INIT_t>

	/* Configure PB6 for LED control */
	hGPIOB.pin = GPIO_PIN_2;           // PB2
 8001220:	4b11      	ldr	r3, [pc, #68]	; (8001268 <USER_GPIOB_INIT+0x88>)
 8001222:	2202      	movs	r2, #2
 8001224:	711a      	strb	r2, [r3, #4]
	GPIO_INIT_t(&hGPIOB);               // Apply same configuration to PB6
 8001226:	4810      	ldr	r0, [pc, #64]	; (8001268 <USER_GPIOB_INIT+0x88>)
 8001228:	f000 f842 	bl	80012b0 <GPIO_INIT_t>

	hGPIOB.af = GPIO_AF8;
 800122c:	4b0e      	ldr	r3, [pc, #56]	; (8001268 <USER_GPIOB_INIT+0x88>)
 800122e:	2208      	movs	r2, #8
 8001230:	725a      	strb	r2, [r3, #9]
	hGPIOB.pin = GPIO_PIN_5; // PB5 - I2C2_SCL
 8001232:	4b0d      	ldr	r3, [pc, #52]	; (8001268 <USER_GPIOB_INIT+0x88>)
 8001234:	2205      	movs	r2, #5
 8001236:	711a      	strb	r2, [r3, #4]
	hGPIOB.mode = GPIO_ALT_MODE;
 8001238:	4b0b      	ldr	r3, [pc, #44]	; (8001268 <USER_GPIOB_INIT+0x88>)
 800123a:	2202      	movs	r2, #2
 800123c:	715a      	strb	r2, [r3, #5]
	hGPIOB.ospeed = GPIO_OUTPUT_VHS;
 800123e:	4b0a      	ldr	r3, [pc, #40]	; (8001268 <USER_GPIOB_INIT+0x88>)
 8001240:	2203      	movs	r2, #3
 8001242:	71da      	strb	r2, [r3, #7]
	hGPIOB.otype = GPIO_OUTPUT_OD;
 8001244:	4b08      	ldr	r3, [pc, #32]	; (8001268 <USER_GPIOB_INIT+0x88>)
 8001246:	2201      	movs	r2, #1
 8001248:	719a      	strb	r2, [r3, #6]
	hGPIOB.pupd = GPIO_PU;
 800124a:	4b07      	ldr	r3, [pc, #28]	; (8001268 <USER_GPIOB_INIT+0x88>)
 800124c:	2201      	movs	r2, #1
 800124e:	721a      	strb	r2, [r3, #8]

	GPIO_INIT_t(&hGPIOB);
 8001250:	4805      	ldr	r0, [pc, #20]	; (8001268 <USER_GPIOB_INIT+0x88>)
 8001252:	f000 f82d 	bl	80012b0 <GPIO_INIT_t>

	hGPIOB.pin = GPIO_PIN_4; // PB4 - I2C2_SDA
 8001256:	4b04      	ldr	r3, [pc, #16]	; (8001268 <USER_GPIOB_INIT+0x88>)
 8001258:	2204      	movs	r2, #4
 800125a:	711a      	strb	r2, [r3, #4]
	GPIO_INIT_t(&hGPIOB);
 800125c:	4802      	ldr	r0, [pc, #8]	; (8001268 <USER_GPIOB_INIT+0x88>)
 800125e:	f000 f827 	bl	80012b0 <GPIO_INIT_t>
}
 8001262:	bf00      	nop
 8001264:	bd80      	pop	{r7, pc}
 8001266:	bf00      	nop
 8001268:	20000268 	.word	0x20000268
 800126c:	42020400 	.word	0x42020400

08001270 <USER_GPIOC_INIT>:

/**
 * @brief  Initialize GPIOC pin for LED
 * @note   Configures PC13 as output for LED control
 */
void USER_GPIOC_INIT() {
 8001270:	b580      	push	{r7, lr}
 8001272:	af00      	add	r7, sp, #0
	/* Configure PC13 for LED output */
	hGPIOC.Instace = GPIOC_t;
 8001274:	4b0c      	ldr	r3, [pc, #48]	; (80012a8 <USER_GPIOC_INIT+0x38>)
 8001276:	4a0d      	ldr	r2, [pc, #52]	; (80012ac <USER_GPIOC_INIT+0x3c>)
 8001278:	601a      	str	r2, [r3, #0]
	hGPIOC.pin = GPIO_PIN_13;           // PC13 connected to onboard LED
 800127a:	4b0b      	ldr	r3, [pc, #44]	; (80012a8 <USER_GPIOC_INIT+0x38>)
 800127c:	220d      	movs	r2, #13
 800127e:	711a      	strb	r2, [r3, #4]
	hGPIOC.af = GPIO_AF_NONE;           // No alternate function
 8001280:	4b09      	ldr	r3, [pc, #36]	; (80012a8 <USER_GPIOC_INIT+0x38>)
 8001282:	22ff      	movs	r2, #255	; 0xff
 8001284:	725a      	strb	r2, [r3, #9]
	hGPIOC.mode = GPIO_OUTPUT_MODE;     // Output mode
 8001286:	4b08      	ldr	r3, [pc, #32]	; (80012a8 <USER_GPIOC_INIT+0x38>)
 8001288:	2201      	movs	r2, #1
 800128a:	715a      	strb	r2, [r3, #5]
	hGPIOC.ospeed = GPIO_OUTPUT_VHS;    // Very high speed
 800128c:	4b06      	ldr	r3, [pc, #24]	; (80012a8 <USER_GPIOC_INIT+0x38>)
 800128e:	2203      	movs	r2, #3
 8001290:	71da      	strb	r2, [r3, #7]
	hGPIOC.otype = GPIO_OUTPUT_PP;      // Push-pull output
 8001292:	4b05      	ldr	r3, [pc, #20]	; (80012a8 <USER_GPIOC_INIT+0x38>)
 8001294:	2200      	movs	r2, #0
 8001296:	719a      	strb	r2, [r3, #6]
	hGPIOC.pupd = GPIO_NO_PUPD;         // No pull-up or pull-down
 8001298:	4b03      	ldr	r3, [pc, #12]	; (80012a8 <USER_GPIOC_INIT+0x38>)
 800129a:	2200      	movs	r2, #0
 800129c:	721a      	strb	r2, [r3, #8]
	GPIO_INIT_t(&hGPIOC);               // Apply configuration
 800129e:	4802      	ldr	r0, [pc, #8]	; (80012a8 <USER_GPIOC_INIT+0x38>)
 80012a0:	f000 f806 	bl	80012b0 <GPIO_INIT_t>
}
 80012a4:	bf00      	nop
 80012a6:	bd80      	pop	{r7, pc}
 80012a8:	20000274 	.word	0x20000274
 80012ac:	42020800 	.word	0x42020800

080012b0 <GPIO_INIT_t>:
/**
 * @brief  Initialize GPIO pin
 * @param  hGPIOx: Pointer to GPIO handler structure
 * @note   Configures GPIO pin based on handler parameters
 */
void GPIO_INIT_t(GPIO_Handle_Typedef_t *hGPIOx) {
 80012b0:	b480      	push	{r7}
 80012b2:	b085      	sub	sp, #20
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
	/* Enable clock for the appropriate GPIO port */
	if (hGPIOx->Instace == GPIOA_t) {
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	4a71      	ldr	r2, [pc, #452]	; (8001484 <GPIO_INIT_t+0x1d4>)
 80012be:	4293      	cmp	r3, r2
 80012c0:	d108      	bne.n	80012d4 <GPIO_INIT_t+0x24>
		GPIOA_CLK_EN();                 // Enable GPIOA peripheral clock
 80012c2:	4b71      	ldr	r3, [pc, #452]	; (8001488 <GPIO_INIT_t+0x1d8>)
 80012c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80012c8:	4a6f      	ldr	r2, [pc, #444]	; (8001488 <GPIO_INIT_t+0x1d8>)
 80012ca:	f043 0301 	orr.w	r3, r3, #1
 80012ce:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80012d2:	e01a      	b.n	800130a <GPIO_INIT_t+0x5a>
	} else if (hGPIOx->Instace == GPIOB_t) {
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	4a6c      	ldr	r2, [pc, #432]	; (800148c <GPIO_INIT_t+0x1dc>)
 80012da:	4293      	cmp	r3, r2
 80012dc:	d108      	bne.n	80012f0 <GPIO_INIT_t+0x40>
		GPIOB_CLK_EN();                 // Enable GPIOB peripheral clock
 80012de:	4b6a      	ldr	r3, [pc, #424]	; (8001488 <GPIO_INIT_t+0x1d8>)
 80012e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80012e4:	4a68      	ldr	r2, [pc, #416]	; (8001488 <GPIO_INIT_t+0x1d8>)
 80012e6:	f043 0302 	orr.w	r3, r3, #2
 80012ea:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80012ee:	e00c      	b.n	800130a <GPIO_INIT_t+0x5a>
	} else if (hGPIOx->Instace == GPIOC_t) {
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	4a66      	ldr	r2, [pc, #408]	; (8001490 <GPIO_INIT_t+0x1e0>)
 80012f6:	4293      	cmp	r3, r2
 80012f8:	d107      	bne.n	800130a <GPIO_INIT_t+0x5a>
		GPIOC_CLK_EN();                 // Enable GPIOC peripheral clock
 80012fa:	4b63      	ldr	r3, [pc, #396]	; (8001488 <GPIO_INIT_t+0x1d8>)
 80012fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001300:	4a61      	ldr	r2, [pc, #388]	; (8001488 <GPIO_INIT_t+0x1d8>)
 8001302:	f043 0304 	orr.w	r3, r3, #4
 8001306:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
	}

	/* Calculate pin position for 2-bit fields (each pin uses 2 bits in registers) */
	uint8_t pin_pos = PIN_MODE_POS(hGPIOx->pin);  // PIN_MODE_POS(pin) = pin * 2
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	791b      	ldrb	r3, [r3, #4]
 800130e:	005b      	lsls	r3, r3, #1
 8001310:	73fb      	strb	r3, [r7, #15]

	/* Configure pin mode (Input, Output, Alternate, Analog) */
	CLEAR_VAL_BIT(hGPIOx->Instace->MODER, BIT_MASK_2, pin_pos);
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	681a      	ldr	r2, [r3, #0]
 8001318:	7bfb      	ldrb	r3, [r7, #15]
 800131a:	2103      	movs	r1, #3
 800131c:	fa01 f303 	lsl.w	r3, r1, r3
 8001320:	43db      	mvns	r3, r3
 8001322:	4619      	mov	r1, r3
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	400a      	ands	r2, r1
 800132a:	601a      	str	r2, [r3, #0]
	SET_VAL_BIT(hGPIOx->Instace->MODER, hGPIOx->mode, pin_pos);
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	681a      	ldr	r2, [r3, #0]
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	795b      	ldrb	r3, [r3, #5]
 8001336:	4619      	mov	r1, r3
 8001338:	7bfb      	ldrb	r3, [r7, #15]
 800133a:	fa01 f303 	lsl.w	r3, r1, r3
 800133e:	4619      	mov	r1, r3
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	430a      	orrs	r2, r1
 8001346:	601a      	str	r2, [r3, #0]

	/* Configure pull-up/pull-down resistors */
	CLEAR_VAL_BIT(hGPIOx->Instace->PUPDR, BIT_MASK_2, pin_pos);
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	68da      	ldr	r2, [r3, #12]
 800134e:	7bfb      	ldrb	r3, [r7, #15]
 8001350:	2103      	movs	r1, #3
 8001352:	fa01 f303 	lsl.w	r3, r1, r3
 8001356:	43db      	mvns	r3, r3
 8001358:	4619      	mov	r1, r3
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	400a      	ands	r2, r1
 8001360:	60da      	str	r2, [r3, #12]
	SET_VAL_BIT(hGPIOx->Instace->PUPDR, hGPIOx->pupd, pin_pos);
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	68da      	ldr	r2, [r3, #12]
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	7a1b      	ldrb	r3, [r3, #8]
 800136c:	4619      	mov	r1, r3
 800136e:	7bfb      	ldrb	r3, [r7, #15]
 8001370:	fa01 f303 	lsl.w	r3, r1, r3
 8001374:	4619      	mov	r1, r3
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	430a      	orrs	r2, r1
 800137c:	60da      	str	r2, [r3, #12]

	/* Only configure output parameters for Output or Alternate Function modes */
	if (hGPIOx->mode == GPIO_OUTPUT_MODE || hGPIOx->mode == GPIO_ALT_MODE) {
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	795b      	ldrb	r3, [r3, #5]
 8001382:	2b01      	cmp	r3, #1
 8001384:	d003      	beq.n	800138e <GPIO_INIT_t+0xde>
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	795b      	ldrb	r3, [r3, #5]
 800138a:	2b02      	cmp	r3, #2
 800138c:	d173      	bne.n	8001476 <GPIO_INIT_t+0x1c6>
		/* Configure output type (Push-Pull or Open-Drain) */
		if (hGPIOx->otype == GPIO_OUTPUT_PP) {
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	799b      	ldrb	r3, [r3, #6]
 8001392:	2b00      	cmp	r3, #0
 8001394:	d10d      	bne.n	80013b2 <GPIO_INIT_t+0x102>
			CLEAR_BIT_FIELD(hGPIOx->Instace->OTYPER, hGPIOx->pin); // Push-pull (0)
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	6859      	ldr	r1, [r3, #4]
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	791b      	ldrb	r3, [r3, #4]
 80013a0:	461a      	mov	r2, r3
 80013a2:	2301      	movs	r3, #1
 80013a4:	4093      	lsls	r3, r2
 80013a6:	43da      	mvns	r2, r3
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	400a      	ands	r2, r1
 80013ae:	605a      	str	r2, [r3, #4]
 80013b0:	e010      	b.n	80013d4 <GPIO_INIT_t+0x124>
		} else if (hGPIOx->otype == GPIO_OUTPUT_OD) {
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	799b      	ldrb	r3, [r3, #6]
 80013b6:	2b01      	cmp	r3, #1
 80013b8:	d10c      	bne.n	80013d4 <GPIO_INIT_t+0x124>
			SET_BIT_FIELD(hGPIOx->Instace->OTYPER, hGPIOx->pin); // Open-drain (1)
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	6859      	ldr	r1, [r3, #4]
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	791b      	ldrb	r3, [r3, #4]
 80013c4:	461a      	mov	r2, r3
 80013c6:	2301      	movs	r3, #1
 80013c8:	fa03 f202 	lsl.w	r2, r3, r2
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	430a      	orrs	r2, r1
 80013d2:	605a      	str	r2, [r3, #4]
		}

		/* Configure output speed (Low, Medium, High or Very High) */
		CLEAR_VAL_BIT(hGPIOx->Instace->OSPEEDR, BIT_MASK_2, pin_pos);
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	689a      	ldr	r2, [r3, #8]
 80013da:	7bfb      	ldrb	r3, [r7, #15]
 80013dc:	2103      	movs	r1, #3
 80013de:	fa01 f303 	lsl.w	r3, r1, r3
 80013e2:	43db      	mvns	r3, r3
 80013e4:	4619      	mov	r1, r3
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	400a      	ands	r2, r1
 80013ec:	609a      	str	r2, [r3, #8]
		SET_VAL_BIT(hGPIOx->Instace->OSPEEDR, hGPIOx->ospeed, pin_pos);
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	689a      	ldr	r2, [r3, #8]
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	79db      	ldrb	r3, [r3, #7]
 80013f8:	4619      	mov	r1, r3
 80013fa:	7bfb      	ldrb	r3, [r7, #15]
 80013fc:	fa01 f303 	lsl.w	r3, r1, r3
 8001400:	4619      	mov	r1, r3
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	430a      	orrs	r2, r1
 8001408:	609a      	str	r2, [r3, #8]

		/* Configure Alternate Function (only if mode is Alternate Function) */
		if (hGPIOx->mode == GPIO_ALT_MODE) {
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	795b      	ldrb	r3, [r3, #5]
 800140e:	2b02      	cmp	r3, #2
 8001410:	d131      	bne.n	8001476 <GPIO_INIT_t+0x1c6>
			/* Determine which AFR register to use (AFRL for pins 0-7, AFRH for pins 8-15) */
			uint8_t afrIndex = PIN_AFR_REG(hGPIOx->pin);
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	791b      	ldrb	r3, [r3, #4]
 8001416:	08db      	lsrs	r3, r3, #3
 8001418:	73bb      	strb	r3, [r7, #14]

			/* Calculate bit position within the AFR register (each pin uses 4 bits) */
			uint8_t afrPosition = PIN_AFR_POS(hGPIOx->pin);
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	791b      	ldrb	r3, [r3, #4]
 800141e:	f003 0307 	and.w	r3, r3, #7
 8001422:	b2db      	uxtb	r3, r3
 8001424:	009b      	lsls	r3, r3, #2
 8001426:	737b      	strb	r3, [r7, #13]

			/* Clear and set alternate function value */
			CLEAR_VAL_BIT(hGPIOx->Instace->AFR[afrIndex], BIT_MASK_4,
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	7bba      	ldrb	r2, [r7, #14]
 800142e:	3208      	adds	r2, #8
 8001430:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001434:	7b7b      	ldrb	r3, [r7, #13]
 8001436:	220f      	movs	r2, #15
 8001438:	fa02 f303 	lsl.w	r3, r2, r3
 800143c:	43db      	mvns	r3, r3
 800143e:	4618      	mov	r0, r3
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	7bba      	ldrb	r2, [r7, #14]
 8001446:	4001      	ands	r1, r0
 8001448:	3208      	adds	r2, #8
 800144a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
					afrPosition);
			SET_VAL_BIT(hGPIOx->Instace->AFR[afrIndex], hGPIOx->af,
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	7bba      	ldrb	r2, [r7, #14]
 8001454:	3208      	adds	r2, #8
 8001456:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	7a5b      	ldrb	r3, [r3, #9]
 800145e:	461a      	mov	r2, r3
 8001460:	7b7b      	ldrb	r3, [r7, #13]
 8001462:	fa02 f303 	lsl.w	r3, r2, r3
 8001466:	4618      	mov	r0, r3
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	7bba      	ldrb	r2, [r7, #14]
 800146e:	4301      	orrs	r1, r0
 8001470:	3208      	adds	r2, #8
 8001472:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
					afrPosition);
		}
	}
}
 8001476:	bf00      	nop
 8001478:	3714      	adds	r7, #20
 800147a:	46bd      	mov	sp, r7
 800147c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001480:	4770      	bx	lr
 8001482:	bf00      	nop
 8001484:	42020000 	.word	0x42020000
 8001488:	44020c00 	.word	0x44020c00
 800148c:	42020400 	.word	0x42020400
 8001490:	42020800 	.word	0x42020800

08001494 <GPIO_OUTPUT_t>:
 * @param  GPIOx: GPIO port
 * @param  pin: Pin number (0-15)
 * @param  val: Output value (HIGH/LOW)
 * @note   Uses BSRR register for atomic bit set/reset
 */
void GPIO_OUTPUT_t(GPIO_TypeDef_t *GPIOx, uint8_t pin, uint8_t val) {
 8001494:	b480      	push	{r7}
 8001496:	b083      	sub	sp, #12
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
 800149c:	460b      	mov	r3, r1
 800149e:	70fb      	strb	r3, [r7, #3]
 80014a0:	4613      	mov	r3, r2
 80014a2:	70bb      	strb	r3, [r7, #2]
	if (val == HIGH) {
 80014a4:	78bb      	ldrb	r3, [r7, #2]
 80014a6:	2b01      	cmp	r3, #1
 80014a8:	d105      	bne.n	80014b6 <GPIO_OUTPUT_t+0x22>
		GPIOx->BSRR = GPIO_PIN_SET(pin);    // Set pin high (atomic operation)
 80014aa:	78fb      	ldrb	r3, [r7, #3]
 80014ac:	2201      	movs	r2, #1
 80014ae:	409a      	lsls	r2, r3
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	619a      	str	r2, [r3, #24]
	} else {
		GPIOx->BSRR = GPIO_PIN_RESET(pin);  // Set pin low (atomic operation)
	}
}
 80014b4:	e006      	b.n	80014c4 <GPIO_OUTPUT_t+0x30>
		GPIOx->BSRR = GPIO_PIN_RESET(pin);  // Set pin low (atomic operation)
 80014b6:	78fb      	ldrb	r3, [r7, #3]
 80014b8:	2201      	movs	r2, #1
 80014ba:	fa02 f303 	lsl.w	r3, r2, r3
 80014be:	041a      	lsls	r2, r3, #16
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	619a      	str	r2, [r3, #24]
}
 80014c4:	bf00      	nop
 80014c6:	370c      	adds	r7, #12
 80014c8:	46bd      	mov	sp, r7
 80014ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ce:	4770      	bx	lr

080014d0 <USER_CAN_RX>:
	} else {
		return LOW;     // Pin is low
	}
}

void USER_CAN_RX() {
 80014d0:	b580      	push	{r7, lr}
 80014d2:	af00      	add	r7, sp, #0
	/* Receive CAN message */
	CAN1_Rx(&hfdCan1, &hRXHeader, receivedData); // Receive CAN message
 80014d4:	4a03      	ldr	r2, [pc, #12]	; (80014e4 <USER_CAN_RX+0x14>)
 80014d6:	4904      	ldr	r1, [pc, #16]	; (80014e8 <USER_CAN_RX+0x18>)
 80014d8:	4804      	ldr	r0, [pc, #16]	; (80014ec <USER_CAN_RX+0x1c>)
 80014da:	f000 fa9f 	bl	8001a1c <CAN1_Rx>
}
 80014de:	bf00      	nop
 80014e0:	bd80      	pop	{r7, pc}
 80014e2:	bf00      	nop
 80014e4:	20000280 	.word	0x20000280
 80014e8:	20000220 	.word	0x20000220
 80014ec:	200001f4 	.word	0x200001f4

080014f0 <USER_CAN_TX>:

void USER_CAN_TX() {
 80014f0:	b580      	push	{r7, lr}
 80014f2:	af00      	add	r7, sp, #0
	//		/* Transmit CAN message */
	send = (uint8_t*) "Hi";
 80014f4:	4b13      	ldr	r3, [pc, #76]	; (8001544 <USER_CAN_TX+0x54>)
 80014f6:	4a14      	ldr	r2, [pc, #80]	; (8001548 <USER_CAN_TX+0x58>)
 80014f8:	601a      	str	r2, [r3, #0]
	hTXHeader.BitRateSwitch = 0;
 80014fa:	4b14      	ldr	r3, [pc, #80]	; (800154c <USER_CAN_TX+0x5c>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	615a      	str	r2, [r3, #20]
	hTXHeader.DataLength = FDCAN_DLC_BYTES_2;
 8001500:	4b12      	ldr	r3, [pc, #72]	; (800154c <USER_CAN_TX+0x5c>)
 8001502:	2202      	movs	r2, #2
 8001504:	60da      	str	r2, [r3, #12]
	hTXHeader.ErrorStateIndicator = 0;
 8001506:	4b11      	ldr	r3, [pc, #68]	; (800154c <USER_CAN_TX+0x5c>)
 8001508:	2200      	movs	r2, #0
 800150a:	611a      	str	r2, [r3, #16]
	hTXHeader.FDFormat = 0;
 800150c:	4b0f      	ldr	r3, [pc, #60]	; (800154c <USER_CAN_TX+0x5c>)
 800150e:	2200      	movs	r2, #0
 8001510:	619a      	str	r2, [r3, #24]
	hTXHeader.IdType = 0;
 8001512:	4b0e      	ldr	r3, [pc, #56]	; (800154c <USER_CAN_TX+0x5c>)
 8001514:	2200      	movs	r2, #0
 8001516:	605a      	str	r2, [r3, #4]
	hTXHeader.Identifier = 0x123;
 8001518:	4b0c      	ldr	r3, [pc, #48]	; (800154c <USER_CAN_TX+0x5c>)
 800151a:	f240 1223 	movw	r2, #291	; 0x123
 800151e:	601a      	str	r2, [r3, #0]
	hTXHeader.MessageMarker = 0;
 8001520:	4b0a      	ldr	r3, [pc, #40]	; (800154c <USER_CAN_TX+0x5c>)
 8001522:	2200      	movs	r2, #0
 8001524:	621a      	str	r2, [r3, #32]
	hTXHeader.TxEventFifoControl = 0;
 8001526:	4b09      	ldr	r3, [pc, #36]	; (800154c <USER_CAN_TX+0x5c>)
 8001528:	2200      	movs	r2, #0
 800152a:	61da      	str	r2, [r3, #28]
	hTXHeader.TxFrameType = 0;
 800152c:	4b07      	ldr	r3, [pc, #28]	; (800154c <USER_CAN_TX+0x5c>)
 800152e:	2200      	movs	r2, #0
 8001530:	609a      	str	r2, [r3, #8]
	CAN1_Tx(&hfdCan1, &hTXHeader, (uint8_t*) send);
 8001532:	4b04      	ldr	r3, [pc, #16]	; (8001544 <USER_CAN_TX+0x54>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	461a      	mov	r2, r3
 8001538:	4904      	ldr	r1, [pc, #16]	; (800154c <USER_CAN_TX+0x5c>)
 800153a:	4805      	ldr	r0, [pc, #20]	; (8001550 <USER_CAN_TX+0x60>)
 800153c:	f000 f958 	bl	80017f0 <CAN1_Tx>
}
 8001540:	bf00      	nop
 8001542:	bd80      	pop	{r7, pc}
 8001544:	20000288 	.word	0x20000288
 8001548:	08004e80 	.word	0x08004e80
 800154c:	20000238 	.word	0x20000238
 8001550:	200001f4 	.word	0x200001f4

08001554 <I2C2_EV_IRQHandler>:

volatile uint8_t tc = 1;

void I2C2_EV_IRQHandler() {
 8001554:	b480      	push	{r7}
 8001556:	af00      	add	r7, sp, #0
	// If Transmit interrupt status is set by hardware when the I2C_TXDR register is empty
	if (READ_BIT_FIELD(I2C2_t->ISR, 1, 0x1)) {
 8001558:	4b15      	ldr	r3, [pc, #84]	; (80015b0 <I2C2_EV_IRQHandler+0x5c>)
 800155a:	699b      	ldr	r3, [r3, #24]
 800155c:	f003 0302 	and.w	r3, r3, #2
 8001560:	2b00      	cmp	r3, #0
 8001562:	d004      	beq.n	800156e <I2C2_EV_IRQHandler+0x1a>
		// Write to the data register
		// Write to the data register will clear this Transmit interrupt status bit
		WRITE_REG_BIT(I2C2_t->TXDR, data_to_send, 0);
 8001564:	4b13      	ldr	r3, [pc, #76]	; (80015b4 <I2C2_EV_IRQHandler+0x60>)
 8001566:	781b      	ldrb	r3, [r3, #0]
 8001568:	b2da      	uxtb	r2, r3
 800156a:	4b11      	ldr	r3, [pc, #68]	; (80015b0 <I2C2_EV_IRQHandler+0x5c>)
 800156c:	629a      	str	r2, [r3, #40]	; 0x28
	}

	// If transmit has completed
	if (READ_BIT_FIELD(I2C2_t->ISR, 6, 0x1)) {
 800156e:	4b10      	ldr	r3, [pc, #64]	; (80015b0 <I2C2_EV_IRQHandler+0x5c>)
 8001570:	699b      	ldr	r3, [r3, #24]
 8001572:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001576:	2b00      	cmp	r3, #0
 8001578:	d015      	beq.n	80015a6 <I2C2_EV_IRQHandler+0x52>
		// Generate stop condition
		//  The bit TC: Transfer complete is cleared by software when START bit or STOP bit is set.
		SET_BIT_FIELD(I2C2_t->CR2, 14);
 800157a:	4b0d      	ldr	r3, [pc, #52]	; (80015b0 <I2C2_EV_IRQHandler+0x5c>)
 800157c:	685b      	ldr	r3, [r3, #4]
 800157e:	4a0c      	ldr	r2, [pc, #48]	; (80015b0 <I2C2_EV_IRQHandler+0x5c>)
 8001580:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001584:	6053      	str	r3, [r2, #4]

		// Wait for detect STOP bit
		while (!READ_BIT_FIELD(I2C2_t->ISR, 5, 0x1))
 8001586:	bf00      	nop
 8001588:	4b09      	ldr	r3, [pc, #36]	; (80015b0 <I2C2_EV_IRQHandler+0x5c>)
 800158a:	699b      	ldr	r3, [r3, #24]
 800158c:	f003 0320 	and.w	r3, r3, #32
 8001590:	2b00      	cmp	r3, #0
 8001592:	d0f9      	beq.n	8001588 <I2C2_EV_IRQHandler+0x34>
			;

		// Clear Flag STOP
		SET_BIT_FIELD(I2C2_t->ICR, 5);
 8001594:	4b06      	ldr	r3, [pc, #24]	; (80015b0 <I2C2_EV_IRQHandler+0x5c>)
 8001596:	69db      	ldr	r3, [r3, #28]
 8001598:	4a05      	ldr	r2, [pc, #20]	; (80015b0 <I2C2_EV_IRQHandler+0x5c>)
 800159a:	f043 0320 	orr.w	r3, r3, #32
 800159e:	61d3      	str	r3, [r2, #28]
		tc = 1;
 80015a0:	4b05      	ldr	r3, [pc, #20]	; (80015b8 <I2C2_EV_IRQHandler+0x64>)
 80015a2:	2201      	movs	r2, #1
 80015a4:	701a      	strb	r2, [r3, #0]
	}

}
 80015a6:	bf00      	nop
 80015a8:	46bd      	mov	sp, r7
 80015aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ae:	4770      	bx	lr
 80015b0:	40005800 	.word	0x40005800
 80015b4:	200001f0 	.word	0x200001f0
 80015b8:	20000008 	.word	0x20000008

080015bc <FDCAN1_IT0_IRQHandler>:

void FDCAN1_IT0_IRQHandler() {
 80015bc:	b580      	push	{r7, lr}
 80015be:	af00      	add	r7, sp, #0
	// If new message has come
	if (READ_BIT_FIELD(hfdCan1.Instace->IR, 0, 0x1)) {
 80015c0:	4b07      	ldr	r3, [pc, #28]	; (80015e0 <FDCAN1_IT0_IRQHandler+0x24>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80015c6:	f003 0301 	and.w	r3, r3, #1
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d005      	beq.n	80015da <FDCAN1_IT0_IRQHandler+0x1e>
		// A flag is cleared by writing 1 to the corresponding bit position.
		WRITE_REG_BIT(hfdCan1.Instace->IR, 1, 0);
 80015ce:	4b04      	ldr	r3, [pc, #16]	; (80015e0 <FDCAN1_IT0_IRQHandler+0x24>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	2201      	movs	r2, #1
 80015d4:	651a      	str	r2, [r3, #80]	; 0x50
		// Handling RX
		USER_CAN_RX();
 80015d6:	f7ff ff7b 	bl	80014d0 <USER_CAN_RX>
	}
}
 80015da:	bf00      	nop
 80015dc:	bd80      	pop	{r7, pc}
 80015de:	bf00      	nop
 80015e0:	200001f4 	.word	0x200001f4

080015e4 <SYSTEM_CLOCK_CONFIG>:

/**
 * @brief  Configure system clock for optimal performance
 * @note   Sets up PLL with HSI as source, configures flash latency and bus prescalers
 */
void SYSTEM_CLOCK_CONFIG() {
 80015e4:	b480      	push	{r7}
 80015e6:	af00      	add	r7, sp, #0
	/* Configure power mode for high-speed operation */
	CLEAR_VAL_BIT(*COMP_CFGR1_PWRMODE_p, 0x3, 12);
 80015e8:	4b74      	ldr	r3, [pc, #464]	; (80017bc <SYSTEM_CLOCK_CONFIG+0x1d8>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	681a      	ldr	r2, [r3, #0]
 80015ee:	4b73      	ldr	r3, [pc, #460]	; (80017bc <SYSTEM_CLOCK_CONFIG+0x1d8>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80015f6:	601a      	str	r2, [r3, #0]

	/* Set voltage scaling to highest performance level (VOS0) */
	SET_VAL_BIT(PWR_t->VOSCR, 3, 4);
 80015f8:	4b71      	ldr	r3, [pc, #452]	; (80017c0 <SYSTEM_CLOCK_CONFIG+0x1dc>)
 80015fa:	691b      	ldr	r3, [r3, #16]
 80015fc:	4a70      	ldr	r2, [pc, #448]	; (80017c0 <SYSTEM_CLOCK_CONFIG+0x1dc>)
 80015fe:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8001602:	6113      	str	r3, [r2, #16]

	/* Reset Flash configuration before changing clock */
	WRITE_ALL_REG(FLASH_t->ACR, 0);
 8001604:	4b6f      	ldr	r3, [pc, #444]	; (80017c4 <SYSTEM_CLOCK_CONFIG+0x1e0>)
 8001606:	2200      	movs	r2, #0
 8001608:	601a      	str	r2, [r3, #0]

	/* Configure Flash latency and signal delay for high-frequency operation */
	SET_VAL_BIT(FLASH_t->ACR, 5, 0);   // Set latency to 5 wait states
 800160a:	4b6e      	ldr	r3, [pc, #440]	; (80017c4 <SYSTEM_CLOCK_CONFIG+0x1e0>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	4a6d      	ldr	r2, [pc, #436]	; (80017c4 <SYSTEM_CLOCK_CONFIG+0x1e0>)
 8001610:	f043 0305 	orr.w	r3, r3, #5
 8001614:	6013      	str	r3, [r2, #0]
	SET_VAL_BIT(FLASH_t->ACR, 2, 4);   // Set delay to 2 cycles
 8001616:	4b6b      	ldr	r3, [pc, #428]	; (80017c4 <SYSTEM_CLOCK_CONFIG+0x1e0>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	4a6a      	ldr	r2, [pc, #424]	; (80017c4 <SYSTEM_CLOCK_CONFIG+0x1e0>)
 800161c:	f043 0320 	orr.w	r3, r3, #32
 8001620:	6013      	str	r3, [r2, #0]

	/* Reset PLL1 configuration register */
	WRITE_ALL_REG(RCC_t->PLL1CFGR, 0);
 8001622:	4b69      	ldr	r3, [pc, #420]	; (80017c8 <SYSTEM_CLOCK_CONFIG+0x1e4>)
 8001624:	2200      	movs	r2, #0
 8001626:	629a      	str	r2, [r3, #40]	; 0x28

	/* Select HSI as PLL clock source */
	SET_BIT_FIELD(RCC_t->PLL1CFGR, 0);
 8001628:	4b67      	ldr	r3, [pc, #412]	; (80017c8 <SYSTEM_CLOCK_CONFIG+0x1e4>)
 800162a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800162c:	4a66      	ldr	r2, [pc, #408]	; (80017c8 <SYSTEM_CLOCK_CONFIG+0x1e4>)
 800162e:	f043 0301 	orr.w	r3, r3, #1
 8001632:	6293      	str	r3, [r2, #40]	; 0x28

	/* Set PLL input division factor (PLLM = 4) */
	SET_VAL_BIT(RCC_t->PLL1CFGR, 4, 8);
 8001634:	4b64      	ldr	r3, [pc, #400]	; (80017c8 <SYSTEM_CLOCK_CONFIG+0x1e4>)
 8001636:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001638:	4a63      	ldr	r2, [pc, #396]	; (80017c8 <SYSTEM_CLOCK_CONFIG+0x1e4>)
 800163a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800163e:	6293      	str	r3, [r2, #40]	; 0x28

	/* Configure PLL fractional divider */
	WRITE_REG_BIT(RCC_t->PLL1FRACR, 0, 3);     // Clear first
 8001640:	4b61      	ldr	r3, [pc, #388]	; (80017c8 <SYSTEM_CLOCK_CONFIG+0x1e4>)
 8001642:	2200      	movs	r2, #0
 8001644:	639a      	str	r2, [r3, #56]	; 0x38
	WRITE_REG_BIT(RCC_t->PLL1FRACR, 2048, 3);  // Set value
 8001646:	4b60      	ldr	r3, [pc, #384]	; (80017c8 <SYSTEM_CLOCK_CONFIG+0x1e4>)
 8001648:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800164c:	639a      	str	r2, [r3, #56]	; 0x38

	/* Set PLL1 input frequency range (range 3: 4-8 MHz) */
	SET_VAL_BIT(RCC_t->PLL1CFGR, 3, 2);
 800164e:	4b5e      	ldr	r3, [pc, #376]	; (80017c8 <SYSTEM_CLOCK_CONFIG+0x1e4>)
 8001650:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001652:	4a5d      	ldr	r2, [pc, #372]	; (80017c8 <SYSTEM_CLOCK_CONFIG+0x1e4>)
 8001654:	f043 030c 	orr.w	r3, r3, #12
 8001658:	6293      	str	r3, [r2, #40]	; 0x28

	/* Enable fractional divider */
	CLEAR_BIT_FIELD(RCC_t->PLL1CFGR, 4);   // Clear first
 800165a:	4b5b      	ldr	r3, [pc, #364]	; (80017c8 <SYSTEM_CLOCK_CONFIG+0x1e4>)
 800165c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800165e:	4a5a      	ldr	r2, [pc, #360]	; (80017c8 <SYSTEM_CLOCK_CONFIG+0x1e4>)
 8001660:	f023 0310 	bic.w	r3, r3, #16
 8001664:	6293      	str	r3, [r2, #40]	; 0x28
	SET_BIT_FIELD(RCC_t->PLL1CFGR, 4);     // Set the enable bit
 8001666:	4b58      	ldr	r3, [pc, #352]	; (80017c8 <SYSTEM_CLOCK_CONFIG+0x1e4>)
 8001668:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800166a:	4a57      	ldr	r2, [pc, #348]	; (80017c8 <SYSTEM_CLOCK_CONFIG+0x1e4>)
 800166c:	f043 0310 	orr.w	r3, r3, #16
 8001670:	6293      	str	r3, [r2, #40]	; 0x28

	/* Set PLL1 VCO selection (wide range for input frequency > 2MHz) */
	CLEAR_BIT_FIELD(RCC_t->PLL1CFGR, 5);
 8001672:	4b55      	ldr	r3, [pc, #340]	; (80017c8 <SYSTEM_CLOCK_CONFIG+0x1e4>)
 8001674:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001676:	4a54      	ldr	r2, [pc, #336]	; (80017c8 <SYSTEM_CLOCK_CONFIG+0x1e4>)
 8001678:	f023 0320 	bic.w	r3, r3, #32
 800167c:	6293      	str	r3, [r2, #40]	; 0x28

	/* Enable PLL output clocks: PLL1P and PLL1Q (for FDCAN) */
	SET_BIT_FIELD(RCC_t->PLL1CFGR, 16);    // Enable PLL1P output
 800167e:	4b52      	ldr	r3, [pc, #328]	; (80017c8 <SYSTEM_CLOCK_CONFIG+0x1e4>)
 8001680:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001682:	4a51      	ldr	r2, [pc, #324]	; (80017c8 <SYSTEM_CLOCK_CONFIG+0x1e4>)
 8001684:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001688:	6293      	str	r3, [r2, #40]	; 0x28
	SET_BIT_FIELD(RCC_t->PLL1CFGR, 17);    // Enable PLL1Q output
 800168a:	4b4f      	ldr	r3, [pc, #316]	; (80017c8 <SYSTEM_CLOCK_CONFIG+0x1e4>)
 800168c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800168e:	4a4e      	ldr	r2, [pc, #312]	; (80017c8 <SYSTEM_CLOCK_CONFIG+0x1e4>)
 8001690:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001694:	6293      	str	r3, [r2, #40]	; 0x28
	CLEAR_BIT_FIELD(RCC_t->PLL1CFGR, 18);  // Disable PLL1R output
 8001696:	4b4c      	ldr	r3, [pc, #304]	; (80017c8 <SYSTEM_CLOCK_CONFIG+0x1e4>)
 8001698:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800169a:	4a4b      	ldr	r2, [pc, #300]	; (80017c8 <SYSTEM_CLOCK_CONFIG+0x1e4>)
 800169c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80016a0:	6293      	str	r3, [r2, #40]	; 0x28

	/* Configure FDCAN clock source (PLL1Q) */
	SET_BIT_FIELD(RCC_t->CCIPR5, 8);
 80016a2:	4b49      	ldr	r3, [pc, #292]	; (80017c8 <SYSTEM_CLOCK_CONFIG+0x1e4>)
 80016a4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80016a8:	4a47      	ldr	r2, [pc, #284]	; (80017c8 <SYSTEM_CLOCK_CONFIG+0x1e4>)
 80016aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016ae:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8

	/* Initialize PLL1 dividers */
	WRITE_ALL_REG(RCC_t->PLL1DIVR, 0);
 80016b2:	4b45      	ldr	r3, [pc, #276]	; (80017c8 <SYSTEM_CLOCK_CONFIG+0x1e4>)
 80016b4:	2200      	movs	r2, #0
 80016b6:	635a      	str	r2, [r3, #52]	; 0x34

	/* Configure PLL multiplication and division factors */
	SET_VAL_BIT(RCC_t->PLL1DIVR, 30, 0);   // PLL1N = 31 (multiplication factor)
 80016b8:	4b43      	ldr	r3, [pc, #268]	; (80017c8 <SYSTEM_CLOCK_CONFIG+0x1e4>)
 80016ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80016bc:	4a42      	ldr	r2, [pc, #264]	; (80017c8 <SYSTEM_CLOCK_CONFIG+0x1e4>)
 80016be:	f043 031e 	orr.w	r3, r3, #30
 80016c2:	6353      	str	r3, [r2, #52]	; 0x34
	SET_VAL_BIT(RCC_t->PLL1DIVR, 1, 9);    // PLL1P = 2 (division factor)
 80016c4:	4b40      	ldr	r3, [pc, #256]	; (80017c8 <SYSTEM_CLOCK_CONFIG+0x1e4>)
 80016c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80016c8:	4a3f      	ldr	r2, [pc, #252]	; (80017c8 <SYSTEM_CLOCK_CONFIG+0x1e4>)
 80016ca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80016ce:	6353      	str	r3, [r2, #52]	; 0x34
	SET_VAL_BIT(RCC_t->PLL1DIVR, 1, 16);   // PLL1Q = 2 (division factor)
 80016d0:	4b3d      	ldr	r3, [pc, #244]	; (80017c8 <SYSTEM_CLOCK_CONFIG+0x1e4>)
 80016d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80016d4:	4a3c      	ldr	r2, [pc, #240]	; (80017c8 <SYSTEM_CLOCK_CONFIG+0x1e4>)
 80016d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016da:	6353      	str	r3, [r2, #52]	; 0x34
	SET_VAL_BIT(RCC_t->PLL1DIVR, 1, 24);   // PLL1R = 2 (division factor)
 80016dc:	4b3a      	ldr	r3, [pc, #232]	; (80017c8 <SYSTEM_CLOCK_CONFIG+0x1e4>)
 80016de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80016e0:	4a39      	ldr	r2, [pc, #228]	; (80017c8 <SYSTEM_CLOCK_CONFIG+0x1e4>)
 80016e2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80016e6:	6353      	str	r3, [r2, #52]	; 0x34

	/* Enable High-Speed Internal oscillator (HSI) */
	SET_BIT_FIELD(RCC_t->CR, 0);
 80016e8:	4b37      	ldr	r3, [pc, #220]	; (80017c8 <SYSTEM_CLOCK_CONFIG+0x1e4>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	4a36      	ldr	r2, [pc, #216]	; (80017c8 <SYSTEM_CLOCK_CONFIG+0x1e4>)
 80016ee:	f043 0301 	orr.w	r3, r3, #1
 80016f2:	6013      	str	r3, [r2, #0]

	/* Configure HSI divider to 1 */
	CLEAR_VAL_BIT(RCC_t->CR, 0x3, 3);
 80016f4:	4b34      	ldr	r3, [pc, #208]	; (80017c8 <SYSTEM_CLOCK_CONFIG+0x1e4>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	4a33      	ldr	r2, [pc, #204]	; (80017c8 <SYSTEM_CLOCK_CONFIG+0x1e4>)
 80016fa:	f023 0318 	bic.w	r3, r3, #24
 80016fe:	6013      	str	r3, [r2, #0]

	/* Wait for HSI to stabilize */
	while (!(READ_BIT_FIELD(RCC_t->CR, 1, 1)))
 8001700:	bf00      	nop
 8001702:	4b31      	ldr	r3, [pc, #196]	; (80017c8 <SYSTEM_CLOCK_CONFIG+0x1e4>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f003 0302 	and.w	r3, r3, #2
 800170a:	2b00      	cmp	r3, #0
 800170c:	d0f9      	beq.n	8001702 <SYSTEM_CLOCK_CONFIG+0x11e>
		;   // Wait until HSI ready flag is set

	/* Enable PLL1 */
	SET_BIT_FIELD(RCC_t->CR, 24);
 800170e:	4b2e      	ldr	r3, [pc, #184]	; (80017c8 <SYSTEM_CLOCK_CONFIG+0x1e4>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	4a2d      	ldr	r2, [pc, #180]	; (80017c8 <SYSTEM_CLOCK_CONFIG+0x1e4>)
 8001714:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001718:	6013      	str	r3, [r2, #0]

	/* Wait for PLL1 to lock */
	while (!(READ_BIT_FIELD(RCC_t->CR, 25, 1)))
 800171a:	bf00      	nop
 800171c:	4b2a      	ldr	r3, [pc, #168]	; (80017c8 <SYSTEM_CLOCK_CONFIG+0x1e4>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001724:	2b00      	cmp	r3, #0
 8001726:	d0f9      	beq.n	800171c <SYSTEM_CLOCK_CONFIG+0x138>
		;   // Wait until PLL1 ready flag is set

	/* Select PLL1 as system clock source */
	SET_VAL_BIT(RCC_t->CFGR1, 3, 0);
 8001728:	4b27      	ldr	r3, [pc, #156]	; (80017c8 <SYSTEM_CLOCK_CONFIG+0x1e4>)
 800172a:	69db      	ldr	r3, [r3, #28]
 800172c:	4a26      	ldr	r2, [pc, #152]	; (80017c8 <SYSTEM_CLOCK_CONFIG+0x1e4>)
 800172e:	f043 0303 	orr.w	r3, r3, #3
 8001732:	61d3      	str	r3, [r2, #28]

	/* Wait until PLL1 is selected as system clock */
	while (READ_BIT_FIELD(RCC_t->CFGR1, 3, 0x3) != 0x3)
 8001734:	bf00      	nop
 8001736:	4b24      	ldr	r3, [pc, #144]	; (80017c8 <SYSTEM_CLOCK_CONFIG+0x1e4>)
 8001738:	69db      	ldr	r3, [r3, #28]
 800173a:	08db      	lsrs	r3, r3, #3
 800173c:	f003 0303 	and.w	r3, r3, #3
 8001740:	2b03      	cmp	r3, #3
 8001742:	d1f8      	bne.n	8001736 <SYSTEM_CLOCK_CONFIG+0x152>
		;   // Wait until PLL1 is used as system clock source

	/* Configure bus prescalers for optimal performance */
	CLEAR_BIT_FIELD(RCC_t->CFGR2, 0);    // AHB prescaler = 1 (SYSCLK = HCLK)
 8001744:	4b20      	ldr	r3, [pc, #128]	; (80017c8 <SYSTEM_CLOCK_CONFIG+0x1e4>)
 8001746:	6a1b      	ldr	r3, [r3, #32]
 8001748:	4a1f      	ldr	r2, [pc, #124]	; (80017c8 <SYSTEM_CLOCK_CONFIG+0x1e4>)
 800174a:	f023 0301 	bic.w	r3, r3, #1
 800174e:	6213      	str	r3, [r2, #32]
	CLEAR_BIT_FIELD(RCC_t->CFGR2, 4);    // APB1 prescaler = 1 (HCLK = PCLK1)
 8001750:	4b1d      	ldr	r3, [pc, #116]	; (80017c8 <SYSTEM_CLOCK_CONFIG+0x1e4>)
 8001752:	6a1b      	ldr	r3, [r3, #32]
 8001754:	4a1c      	ldr	r2, [pc, #112]	; (80017c8 <SYSTEM_CLOCK_CONFIG+0x1e4>)
 8001756:	f023 0310 	bic.w	r3, r3, #16
 800175a:	6213      	str	r3, [r2, #32]
	CLEAR_BIT_FIELD(RCC_t->CFGR2, 8);    // APB2 prescaler = 1 (HCLK = PCLK2)
 800175c:	4b1a      	ldr	r3, [pc, #104]	; (80017c8 <SYSTEM_CLOCK_CONFIG+0x1e4>)
 800175e:	6a1b      	ldr	r3, [r3, #32]
 8001760:	4a19      	ldr	r2, [pc, #100]	; (80017c8 <SYSTEM_CLOCK_CONFIG+0x1e4>)
 8001762:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001766:	6213      	str	r3, [r2, #32]
	CLEAR_BIT_FIELD(RCC_t->CFGR2, 12);   // APB3 prescaler = 1 (HCLK = PCLK3)
 8001768:	4b17      	ldr	r3, [pc, #92]	; (80017c8 <SYSTEM_CLOCK_CONFIG+0x1e4>)
 800176a:	6a1b      	ldr	r3, [r3, #32]
 800176c:	4a16      	ldr	r2, [pc, #88]	; (80017c8 <SYSTEM_CLOCK_CONFIG+0x1e4>)
 800176e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001772:	6213      	str	r3, [r2, #32]

	/* Enable AHB and APB clocks */
	CLEAR_BIT_FIELD(RCC_t->CFGR2, 16);   // Enable AHB1 clock
 8001774:	4b14      	ldr	r3, [pc, #80]	; (80017c8 <SYSTEM_CLOCK_CONFIG+0x1e4>)
 8001776:	6a1b      	ldr	r3, [r3, #32]
 8001778:	4a13      	ldr	r2, [pc, #76]	; (80017c8 <SYSTEM_CLOCK_CONFIG+0x1e4>)
 800177a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800177e:	6213      	str	r3, [r2, #32]
	CLEAR_BIT_FIELD(RCC_t->CFGR2, 17);   // Enable AHB2 clock
 8001780:	4b11      	ldr	r3, [pc, #68]	; (80017c8 <SYSTEM_CLOCK_CONFIG+0x1e4>)
 8001782:	6a1b      	ldr	r3, [r3, #32]
 8001784:	4a10      	ldr	r2, [pc, #64]	; (80017c8 <SYSTEM_CLOCK_CONFIG+0x1e4>)
 8001786:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800178a:	6213      	str	r3, [r2, #32]
	CLEAR_BIT_FIELD(RCC_t->CFGR2, 20);   // Enable APB1 clock
 800178c:	4b0e      	ldr	r3, [pc, #56]	; (80017c8 <SYSTEM_CLOCK_CONFIG+0x1e4>)
 800178e:	6a1b      	ldr	r3, [r3, #32]
 8001790:	4a0d      	ldr	r2, [pc, #52]	; (80017c8 <SYSTEM_CLOCK_CONFIG+0x1e4>)
 8001792:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8001796:	6213      	str	r3, [r2, #32]
	CLEAR_BIT_FIELD(RCC_t->CFGR2, 21);   // Enable APB2 clock
 8001798:	4b0b      	ldr	r3, [pc, #44]	; (80017c8 <SYSTEM_CLOCK_CONFIG+0x1e4>)
 800179a:	6a1b      	ldr	r3, [r3, #32]
 800179c:	4a0a      	ldr	r2, [pc, #40]	; (80017c8 <SYSTEM_CLOCK_CONFIG+0x1e4>)
 800179e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80017a2:	6213      	str	r3, [r2, #32]
	CLEAR_BIT_FIELD(RCC_t->CFGR2, 22);   // Enable APB3 clock
 80017a4:	4b08      	ldr	r3, [pc, #32]	; (80017c8 <SYSTEM_CLOCK_CONFIG+0x1e4>)
 80017a6:	6a1b      	ldr	r3, [r3, #32]
 80017a8:	4a07      	ldr	r2, [pc, #28]	; (80017c8 <SYSTEM_CLOCK_CONFIG+0x1e4>)
 80017aa:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80017ae:	6213      	str	r3, [r2, #32]
}
 80017b0:	bf00      	nop
 80017b2:	46bd      	mov	sp, r7
 80017b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b8:	4770      	bx	lr
 80017ba:	bf00      	nop
 80017bc:	20000004 	.word	0x20000004
 80017c0:	44020800 	.word	0x44020800
 80017c4:	40022000 	.word	0x40022000
 80017c8:	44020c00 	.word	0x44020c00

080017cc <FDCAN_GET_FREE_TXFIFO_LEVEL>:

uint8_t FDCAN_GET_FREE_TXFIFO_LEVEL(FDCAN_Handle_Typedef_t *hFDCAN) {
 80017cc:	b480      	push	{r7}
 80017ce:	b083      	sub	sp, #12
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
	return READ_BIT_FIELD(hFDCAN->Instace->TXFQS, 0, 0x7);
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80017dc:	b2db      	uxtb	r3, r3
 80017de:	f003 0307 	and.w	r3, r3, #7
 80017e2:	b2db      	uxtb	r3, r3
}
 80017e4:	4618      	mov	r0, r3
 80017e6:	370c      	adds	r7, #12
 80017e8:	46bd      	mov	sp, r7
 80017ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ee:	4770      	bx	lr

080017f0 <CAN1_Tx>:
/**
 * @brief  Transmit a CAN message with GPIOB indicator
 * @note   Sends a message with ID 0x123 containing "HELLO" text and controls GPIOB4-6 based on put_index
 */
void CAN1_Tx(FDCAN_Handle_Typedef_t *hFDCAN, FDCAN_TxHeaderTypeDef_t *hTXHeader,
		uint8_t *pTxData) {
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b092      	sub	sp, #72	; 0x48
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	60f8      	str	r0, [r7, #12]
 80017f8:	60b9      	str	r1, [r7, #8]
 80017fa:	607a      	str	r2, [r7, #4]
	/* 1. Check if TX FIFO has space available */
	uint8_t fifo_free_level = FDCAN_GET_FREE_TXFIFO_LEVEL(hFDCAN);
 80017fc:	68f8      	ldr	r0, [r7, #12]
 80017fe:	f7ff ffe5 	bl	80017cc <FDCAN_GET_FREE_TXFIFO_LEVEL>
 8001802:	4603      	mov	r3, r0
 8001804:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	printf("TX FIFO free level: %d\n", fifo_free_level);
 8001808:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800180c:	4619      	mov	r1, r3
 800180e:	4868      	ldr	r0, [pc, #416]	; (80019b0 <CAN1_Tx+0x1c0>)
 8001810:	f001 fabe 	bl	8002d90 <iprintf>

	if (fifo_free_level == 0) {
 8001814:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001818:	2b00      	cmp	r3, #0
 800181a:	d103      	bne.n	8001824 <CAN1_Tx+0x34>
		printf("TX FIFO is full\n");
 800181c:	4865      	ldr	r0, [pc, #404]	; (80019b4 <CAN1_Tx+0x1c4>)
 800181e:	f001 fb25 	bl	8002e6c <puts>
		return;  // Cannot transmit if FIFO is full
 8001822:	e0c2      	b.n	80019aa <CAN1_Tx+0x1ba>
	}

	/* 2. Get the buffer index where we can put our message */
	uint8_t put_index = READ_BIT_FIELD(hFDCAN->Instace->TXFQS, 16, 0x1F);
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800182c:	0c1b      	lsrs	r3, r3, #16
 800182e:	b2db      	uxtb	r3, r3
 8001830:	f003 031f 	and.w	r3, r3, #31
 8001834:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
	printf("TX buffer index: %d\n", put_index);
 8001838:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800183c:	4619      	mov	r1, r3
 800183e:	485e      	ldr	r0, [pc, #376]	; (80019b8 <CAN1_Tx+0x1c8>)
 8001840:	f001 faa6 	bl	8002d90 <iprintf>
	 * Bit 31: ESI (Error State Indicator)
	 * Bit 30: XTD (Extended Identifier - 0 for standard ID)
	 * Bit 29: RTR (Remote Transmission Request)
	 * Bits 28-18: Standard Identifier (11 bits)
	 */
	uint8_t ESI = hTXHeader->ErrorStateIndicator;
 8001844:	68bb      	ldr	r3, [r7, #8]
 8001846:	691b      	ldr	r3, [r3, #16]
 8001848:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	uint8_t idConfig = hTXHeader->IdType;
 800184c:	68bb      	ldr	r3, [r7, #8]
 800184e:	685b      	ldr	r3, [r3, #4]
 8001850:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	uint8_t RTR = hTXHeader->TxFrameType;
 8001854:	68bb      	ldr	r3, [r7, #8]
 8001856:	689b      	ldr	r3, [r3, #8]
 8001858:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	uint32_t identifier = (hTXHeader->Identifier << 18); // Standard ID placed at bit position 18
 800185c:	68bb      	ldr	r3, [r7, #8]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	049b      	lsls	r3, r3, #18
 8001862:	637b      	str	r3, [r7, #52]	; 0x34

	/* Combine all fields into first word */
	tx_element_w1 = (ESI | idConfig | RTR | identifier);
 8001864:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8001868:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800186c:	4313      	orrs	r3, r2
 800186e:	b2da      	uxtb	r2, r3
 8001870:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001874:	4313      	orrs	r3, r2
 8001876:	b2db      	uxtb	r3, r3
 8001878:	461a      	mov	r2, r3
 800187a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800187c:	4313      	orrs	r3, r2
 800187e:	633b      	str	r3, [r7, #48]	; 0x30
	printf("TX header word 1: 0x%08lx\n", tx_element_w1);
 8001880:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001882:	484e      	ldr	r0, [pc, #312]	; (80019bc <CAN1_Tx+0x1cc>)
 8001884:	f001 fa84 	bl	8002d90 <iprintf>
	 * Bit 23: Event FIFO Control (store TX events)
	 * Bit 21: FD Format (CAN FD vs Classic)
	 * Bit 20: Bit Rate Switching (for CAN FD)
	 * Bits 19-16: Data Length Code (0-8 bytes for Classic CAN)
	 */
	uint32_t messageMaker = (hTXHeader->MessageMarker << 24);
 8001888:	68bb      	ldr	r3, [r7, #8]
 800188a:	6a1b      	ldr	r3, [r3, #32]
 800188c:	061b      	lsls	r3, r3, #24
 800188e:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t eventFifoControl = (hTXHeader->TxEventFifoControl << 23);
 8001890:	68bb      	ldr	r3, [r7, #8]
 8001892:	69db      	ldr	r3, [r3, #28]
 8001894:	05db      	lsls	r3, r3, #23
 8001896:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t fdFormat = (hTXHeader->FDFormat << 21);
 8001898:	68bb      	ldr	r3, [r7, #8]
 800189a:	699b      	ldr	r3, [r3, #24]
 800189c:	055b      	lsls	r3, r3, #21
 800189e:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t BRS = (hTXHeader->BitRateSwitch << 20);
 80018a0:	68bb      	ldr	r3, [r7, #8]
 80018a2:	695b      	ldr	r3, [r3, #20]
 80018a4:	051b      	lsls	r3, r3, #20
 80018a6:	623b      	str	r3, [r7, #32]
	uint32_t DLC = (hTXHeader->DataLength << 16);
 80018a8:	68bb      	ldr	r3, [r7, #8]
 80018aa:	68db      	ldr	r3, [r3, #12]
 80018ac:	041b      	lsls	r3, r3, #16
 80018ae:	61fb      	str	r3, [r7, #28]

	/* Combine all fields into second word */
	tx_element_w2 = (messageMaker | eventFifoControl | fdFormat | BRS | DLC);
 80018b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80018b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018b4:	431a      	orrs	r2, r3
 80018b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018b8:	431a      	orrs	r2, r3
 80018ba:	6a3b      	ldr	r3, [r7, #32]
 80018bc:	4313      	orrs	r3, r2
 80018be:	69fa      	ldr	r2, [r7, #28]
 80018c0:	4313      	orrs	r3, r2
 80018c2:	61bb      	str	r3, [r7, #24]
	printf("TX header word 2: 0x%08lx\n", tx_element_w2);
 80018c4:	69b9      	ldr	r1, [r7, #24]
 80018c6:	483e      	ldr	r0, [pc, #248]	; (80019c0 <CAN1_Tx+0x1d0>)
 80018c8:	f001 fa62 	bl	8002d90 <iprintf>

	/* 4. Calculate the memory address for this TX element */
	uint32_t TxFIFOQSA = SRAMCAN_BASE_ADDR + SRAMCAN_TFQSA;
 80018cc:	4b3d      	ldr	r3, [pc, #244]	; (80019c4 <CAN1_Tx+0x1d4>)
 80018ce:	617b      	str	r3, [r7, #20]
	uint32_t *tx_address = (uint32_t*) (TxFIFOQSA
			+ (put_index * SRAMCAN_TFQ_SIZE));
 80018d0:	f897 203e 	ldrb.w	r2, [r7, #62]	; 0x3e
 80018d4:	4613      	mov	r3, r2
 80018d6:	00db      	lsls	r3, r3, #3
 80018d8:	4413      	add	r3, r2
 80018da:	00db      	lsls	r3, r3, #3
 80018dc:	461a      	mov	r2, r3
 80018de:	697b      	ldr	r3, [r7, #20]
 80018e0:	4413      	add	r3, r2
	uint32_t *tx_address = (uint32_t*) (TxFIFOQSA
 80018e2:	647b      	str	r3, [r7, #68]	; 0x44
	printf("TX buffer address: 0x%08lx\n", (uint32_t) tx_address);
 80018e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80018e6:	4619      	mov	r1, r3
 80018e8:	4837      	ldr	r0, [pc, #220]	; (80019c8 <CAN1_Tx+0x1d8>)
 80018ea:	f001 fa51 	bl	8002d90 <iprintf>

	/* 5. Write the header words to the message RAM */
	*tx_address = tx_element_w1;  // Write T0 register
 80018ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80018f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80018f2:	601a      	str	r2, [r3, #0]
	tx_address++;                 // Move to next word
 80018f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80018f6:	3304      	adds	r3, #4
 80018f8:	647b      	str	r3, [r7, #68]	; 0x44
	*tx_address = tx_element_w2;  // Write T1 register
 80018fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80018fc:	69ba      	ldr	r2, [r7, #24]
 80018fe:	601a      	str	r2, [r3, #0]
	tx_address++;                 // Move to data section
 8001900:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001902:	3304      	adds	r3, #4
 8001904:	647b      	str	r3, [r7, #68]	; 0x44

	/* 6. Prepare and write data bytes */
	uint32_t ByteCounter;

	/* Write Tx payload to the message RAM */
	for (ByteCounter = 0; ByteCounter < DLCtoBytes[hTXHeader->DataLength];
 8001906:	2300      	movs	r3, #0
 8001908:	643b      	str	r3, [r7, #64]	; 0x40
 800190a:	e020      	b.n	800194e <CAN1_Tx+0x15e>
			ByteCounter += 4U) {
		*tx_address = (((uint32_t) pTxData[ByteCounter + 3U] << 24U)
 800190c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800190e:	3303      	adds	r3, #3
 8001910:	687a      	ldr	r2, [r7, #4]
 8001912:	4413      	add	r3, r2
 8001914:	781b      	ldrb	r3, [r3, #0]
 8001916:	061a      	lsls	r2, r3, #24
				| ((uint32_t) pTxData[ByteCounter + 2U] << 16U)
 8001918:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800191a:	3302      	adds	r3, #2
 800191c:	6879      	ldr	r1, [r7, #4]
 800191e:	440b      	add	r3, r1
 8001920:	781b      	ldrb	r3, [r3, #0]
 8001922:	041b      	lsls	r3, r3, #16
 8001924:	431a      	orrs	r2, r3
				| ((uint32_t) pTxData[ByteCounter + 1U] << 8U)
 8001926:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001928:	3301      	adds	r3, #1
 800192a:	6879      	ldr	r1, [r7, #4]
 800192c:	440b      	add	r3, r1
 800192e:	781b      	ldrb	r3, [r3, #0]
 8001930:	021b      	lsls	r3, r3, #8
 8001932:	4313      	orrs	r3, r2
				| (uint32_t) pTxData[ByteCounter]);
 8001934:	6879      	ldr	r1, [r7, #4]
 8001936:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001938:	440a      	add	r2, r1
 800193a:	7812      	ldrb	r2, [r2, #0]
 800193c:	431a      	orrs	r2, r3
		*tx_address = (((uint32_t) pTxData[ByteCounter + 3U] << 24U)
 800193e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001940:	601a      	str	r2, [r3, #0]
		tx_address++;
 8001942:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001944:	3304      	adds	r3, #4
 8001946:	647b      	str	r3, [r7, #68]	; 0x44
			ByteCounter += 4U) {
 8001948:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800194a:	3304      	adds	r3, #4
 800194c:	643b      	str	r3, [r7, #64]	; 0x40
	for (ByteCounter = 0; ByteCounter < DLCtoBytes[hTXHeader->DataLength];
 800194e:	68bb      	ldr	r3, [r7, #8]
 8001950:	68db      	ldr	r3, [r3, #12]
 8001952:	4a1e      	ldr	r2, [pc, #120]	; (80019cc <CAN1_Tx+0x1dc>)
 8001954:	5cd3      	ldrb	r3, [r2, r3]
 8001956:	461a      	mov	r2, r3
 8001958:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800195a:	4293      	cmp	r3, r2
 800195c:	d3d6      	bcc.n	800190c <CAN1_Tx+0x11c>
	}
	/* 7. Request transmission by setting the corresponding bit in TXBAR register */
	printf("Requesting transmission for buffer %d\n", put_index);
 800195e:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8001962:	4619      	mov	r1, r3
 8001964:	481a      	ldr	r0, [pc, #104]	; (80019d0 <CAN1_Tx+0x1e0>)
 8001966:	f001 fa13 	bl	8002d90 <iprintf>
	SET_BIT_FIELD(hFDCAN->Instace->TXBAR, put_index);
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f8d3 10cc 	ldr.w	r1, [r3, #204]	; 0xcc
 8001972:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8001976:	2201      	movs	r2, #1
 8001978:	409a      	lsls	r2, r3
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	430a      	orrs	r2, r1
 8001980:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc

	/* 8. Verify if the request was accepted (added to pending list) */

	if (READ_BIT_FIELD(hFDCAN->Instace->TXBRP, put_index, 1)) {
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 800198c:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8001990:	fa22 f303 	lsr.w	r3, r2, r3
 8001994:	f003 0301 	and.w	r3, r3, #1
 8001998:	2b00      	cmp	r3, #0
 800199a:	d003      	beq.n	80019a4 <CAN1_Tx+0x1b4>
		printf("TX request accepted and pending\n");
 800199c:	480d      	ldr	r0, [pc, #52]	; (80019d4 <CAN1_Tx+0x1e4>)
 800199e:	f001 fa65 	bl	8002e6c <puts>
 80019a2:	e002      	b.n	80019aa <CAN1_Tx+0x1ba>
		/* After successful transmission, the message will be processed
		 * and the TX FIFO put_index will be incremented automatically */
	} else {
		printf("TX request not accepted\n");
 80019a4:	480c      	ldr	r0, [pc, #48]	; (80019d8 <CAN1_Tx+0x1e8>)
 80019a6:	f001 fa61 	bl	8002e6c <puts>
	}
}
 80019aa:	3748      	adds	r7, #72	; 0x48
 80019ac:	46bd      	mov	sp, r7
 80019ae:	bd80      	pop	{r7, pc}
 80019b0:	08004e84 	.word	0x08004e84
 80019b4:	08004e9c 	.word	0x08004e9c
 80019b8:	08004eac 	.word	0x08004eac
 80019bc:	08004ec4 	.word	0x08004ec4
 80019c0:	08004ee0 	.word	0x08004ee0
 80019c4:	4000ae78 	.word	0x4000ae78
 80019c8:	08004efc 	.word	0x08004efc
 80019cc:	08005114 	.word	0x08005114
 80019d0:	08004f18 	.word	0x08004f18
 80019d4:	08004f40 	.word	0x08004f40
 80019d8:	08004f60 	.word	0x08004f60

080019dc <FDCAN_GET_FREE_RXFIFO_LEVEL>:
/**
 * @}
 */

uint8_t FDCAN_GET_FREE_RXFIFO_LEVEL(FDCAN_Handle_Typedef_t *hFDCAN,
		uint32_t RxFifo) {
 80019dc:	b480      	push	{r7}
 80019de:	b083      	sub	sp, #12
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
 80019e4:	6039      	str	r1, [r7, #0]
	if (RxFifo == FDCAN_RX_FIFO0_t) {
 80019e6:	683b      	ldr	r3, [r7, #0]
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d108      	bne.n	80019fe <FDCAN_GET_FREE_RXFIFO_LEVEL+0x22>
		return READ_BIT_FIELD(hFDCAN->Instace->RXF0S, 0, 0x7F);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019f4:	b2db      	uxtb	r3, r3
 80019f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80019fa:	b2db      	uxtb	r3, r3
 80019fc:	e007      	b.n	8001a0e <FDCAN_GET_FREE_RXFIFO_LEVEL+0x32>
	} else {
		return READ_BIT_FIELD(hFDCAN->Instace->RXF1S, 0, 0x7F);
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001a06:	b2db      	uxtb	r3, r3
 8001a08:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001a0c:	b2db      	uxtb	r3, r3
	}
}
 8001a0e:	4618      	mov	r0, r3
 8001a10:	370c      	adds	r7, #12
 8001a12:	46bd      	mov	sp, r7
 8001a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a18:	4770      	bx	lr
	...

08001a1c <CAN1_Rx>:
/**
 * @brief  Configure and check for received CAN messages with GPIOB indicator
 * @note   Reads any available messages from RX FIFO 0 and controls GPIOB4-6 based on get_index
 */
void CAN1_Rx(FDCAN_Handle_Typedef_t *hFDCAN, FDCAN_RX_HEADER *hRXHeader,
		uint8_t *receivedData) {
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b092      	sub	sp, #72	; 0x48
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	60f8      	str	r0, [r7, #12]
 8001a24:	60b9      	str	r1, [r7, #8]
 8001a26:	607a      	str	r2, [r7, #4]
	/* 1. Check if there are any messages in RX FIFO 0 */
	uint8_t fifo_level = FDCAN_GET_FREE_RXFIFO_LEVEL(hFDCAN,
 8001a28:	2100      	movs	r1, #0
 8001a2a:	68f8      	ldr	r0, [r7, #12]
 8001a2c:	f7ff ffd6 	bl	80019dc <FDCAN_GET_FREE_RXFIFO_LEVEL>
 8001a30:	4603      	mov	r3, r0
 8001a32:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	FDCAN_RX_FIFO0_t); // F0FL field

	if (fifo_level == 0) {
 8001a36:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d103      	bne.n	8001a46 <CAN1_Rx+0x2a>
		printf("RX FIFO is empty\n");
 8001a3e:	48aa      	ldr	r0, [pc, #680]	; (8001ce8 <CAN1_Rx+0x2cc>)
 8001a40:	f001 fa14 	bl	8002e6c <puts>
		return;  // No messages to process
 8001a44:	e1ad      	b.n	8001da2 <CAN1_Rx+0x386>
	}

	printf("RX FIFO level: %d\n", fifo_level);
 8001a46:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001a4a:	4619      	mov	r1, r3
 8001a4c:	48a7      	ldr	r0, [pc, #668]	; (8001cec <CAN1_Rx+0x2d0>)
 8001a4e:	f001 f99f 	bl	8002d90 <iprintf>

	/* 2. Handle overwrite mode condition if enabled */
	uint8_t get_index = 0;
 8001a52:	2300      	movs	r3, #0
 8001a54:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

	/* Check if FIFO is full and in overwrite mode */
	if ((READ_BIT_FIELD(hFDCAN->Instace->RXF0S, 24, 0x1) == 1) && // F0F bit (FIFO full)
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a60:	0e1b      	lsrs	r3, r3, #24
 8001a62:	f003 0301 	and.w	r3, r3, #1
 8001a66:	2b01      	cmp	r3, #1
 8001a68:	d10e      	bne.n	8001a88 <CAN1_Rx+0x6c>
			(READ_BIT_FIELD(hFDCAN->Instace->RXGFC, 4, 0x1) == 1)) { // F0OM bit (Overwrite mode)
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001a72:	091b      	lsrs	r3, r3, #4
 8001a74:	f003 0301 	and.w	r3, r3, #1
	if ((READ_BIT_FIELD(hFDCAN->Instace->RXF0S, 24, 0x1) == 1) && // F0F bit (FIFO full)
 8001a78:	2b01      	cmp	r3, #1
 8001a7a:	d105      	bne.n	8001a88 <CAN1_Rx+0x6c>
		printf("FIFO full in overwrite mode - incrementing get_index\n");
 8001a7c:	489c      	ldr	r0, [pc, #624]	; (8001cf0 <CAN1_Rx+0x2d4>)
 8001a7e:	f001 f9f5 	bl	8002e6c <puts>
		get_index = 1;  // Skip oldest message to avoid race condition
 8001a82:	2301      	movs	r3, #1
 8001a84:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	}

	/* 3. Get current get index from the status register */
	get_index += READ_BIT_FIELD(hFDCAN->Instace->RXF0S, 8, 0x3);  // F0GI field
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a90:	0a1b      	lsrs	r3, r3, #8
 8001a92:	f003 0303 	and.w	r3, r3, #3
 8001a96:	b2da      	uxtb	r2, r3
 8001a98:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001a9c:	4413      	add	r3, r2
 8001a9e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	printf("Get index: %d\n", get_index);
 8001aa2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001aa6:	4619      	mov	r1, r3
 8001aa8:	4892      	ldr	r0, [pc, #584]	; (8001cf4 <CAN1_Rx+0x2d8>)
 8001aaa:	f001 f971 	bl	8002d90 <iprintf>

	/* Control GPIOB pins based on get_index value */
	if (get_index == 0) {
 8001aae:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d10f      	bne.n	8001ad6 <CAN1_Rx+0xba>
		/* For get_index = 0: Set B4 HIGH, B5 and B6 LOW */
		GPIO_OUTPUT_t(GPIOB_t, 0, HIGH);
 8001ab6:	2201      	movs	r2, #1
 8001ab8:	2100      	movs	r1, #0
 8001aba:	488f      	ldr	r0, [pc, #572]	; (8001cf8 <CAN1_Rx+0x2dc>)
 8001abc:	f7ff fcea 	bl	8001494 <GPIO_OUTPUT_t>
		GPIO_OUTPUT_t(GPIOB_t, 1, LOW);
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	2101      	movs	r1, #1
 8001ac4:	488c      	ldr	r0, [pc, #560]	; (8001cf8 <CAN1_Rx+0x2dc>)
 8001ac6:	f7ff fce5 	bl	8001494 <GPIO_OUTPUT_t>
		GPIO_OUTPUT_t(GPIOB_t, 2, LOW);
 8001aca:	2200      	movs	r2, #0
 8001acc:	2102      	movs	r1, #2
 8001ace:	488a      	ldr	r0, [pc, #552]	; (8001cf8 <CAN1_Rx+0x2dc>)
 8001ad0:	f7ff fce0 	bl	8001494 <GPIO_OUTPUT_t>
 8001ad4:	e036      	b.n	8001b44 <CAN1_Rx+0x128>
	} else if (get_index == 1) {
 8001ad6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001ada:	2b01      	cmp	r3, #1
 8001adc:	d10f      	bne.n	8001afe <CAN1_Rx+0xe2>
		/* For get_index = 1: Set B5 HIGH, B4 and B6 LOW */
		GPIO_OUTPUT_t(GPIOB_t, 0, LOW);
 8001ade:	2200      	movs	r2, #0
 8001ae0:	2100      	movs	r1, #0
 8001ae2:	4885      	ldr	r0, [pc, #532]	; (8001cf8 <CAN1_Rx+0x2dc>)
 8001ae4:	f7ff fcd6 	bl	8001494 <GPIO_OUTPUT_t>
		GPIO_OUTPUT_t(GPIOB_t, 1, HIGH);
 8001ae8:	2201      	movs	r2, #1
 8001aea:	2101      	movs	r1, #1
 8001aec:	4882      	ldr	r0, [pc, #520]	; (8001cf8 <CAN1_Rx+0x2dc>)
 8001aee:	f7ff fcd1 	bl	8001494 <GPIO_OUTPUT_t>
		GPIO_OUTPUT_t(GPIOB_t, 2, LOW);
 8001af2:	2200      	movs	r2, #0
 8001af4:	2102      	movs	r1, #2
 8001af6:	4880      	ldr	r0, [pc, #512]	; (8001cf8 <CAN1_Rx+0x2dc>)
 8001af8:	f7ff fccc 	bl	8001494 <GPIO_OUTPUT_t>
 8001afc:	e022      	b.n	8001b44 <CAN1_Rx+0x128>
	} else if (get_index == 2) {
 8001afe:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001b02:	2b02      	cmp	r3, #2
 8001b04:	d10f      	bne.n	8001b26 <CAN1_Rx+0x10a>
		/* For get_index = 2: Set B6 HIGH, B4 and B5 LOW */
		GPIO_OUTPUT_t(GPIOB_t, 0, LOW);
 8001b06:	2200      	movs	r2, #0
 8001b08:	2100      	movs	r1, #0
 8001b0a:	487b      	ldr	r0, [pc, #492]	; (8001cf8 <CAN1_Rx+0x2dc>)
 8001b0c:	f7ff fcc2 	bl	8001494 <GPIO_OUTPUT_t>
		GPIO_OUTPUT_t(GPIOB_t, 1, LOW);
 8001b10:	2200      	movs	r2, #0
 8001b12:	2101      	movs	r1, #1
 8001b14:	4878      	ldr	r0, [pc, #480]	; (8001cf8 <CAN1_Rx+0x2dc>)
 8001b16:	f7ff fcbd 	bl	8001494 <GPIO_OUTPUT_t>
		GPIO_OUTPUT_t(GPIOB_t, 2, HIGH);
 8001b1a:	2201      	movs	r2, #1
 8001b1c:	2102      	movs	r1, #2
 8001b1e:	4876      	ldr	r0, [pc, #472]	; (8001cf8 <CAN1_Rx+0x2dc>)
 8001b20:	f7ff fcb8 	bl	8001494 <GPIO_OUTPUT_t>
 8001b24:	e00e      	b.n	8001b44 <CAN1_Rx+0x128>
	} else {
		/* For any other get_index: Set all pins LOW */
		GPIO_OUTPUT_t(GPIOB_t, 0, LOW);
 8001b26:	2200      	movs	r2, #0
 8001b28:	2100      	movs	r1, #0
 8001b2a:	4873      	ldr	r0, [pc, #460]	; (8001cf8 <CAN1_Rx+0x2dc>)
 8001b2c:	f7ff fcb2 	bl	8001494 <GPIO_OUTPUT_t>
		GPIO_OUTPUT_t(GPIOB_t, 1, LOW);
 8001b30:	2200      	movs	r2, #0
 8001b32:	2101      	movs	r1, #1
 8001b34:	4870      	ldr	r0, [pc, #448]	; (8001cf8 <CAN1_Rx+0x2dc>)
 8001b36:	f7ff fcad 	bl	8001494 <GPIO_OUTPUT_t>
		GPIO_OUTPUT_t(GPIOB_t, 2, LOW);
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	2102      	movs	r1, #2
 8001b3e:	486e      	ldr	r0, [pc, #440]	; (8001cf8 <CAN1_Rx+0x2dc>)
 8001b40:	f7ff fca8 	bl	8001494 <GPIO_OUTPUT_t>
	}

	/* 4. Calculate address of the RX element in message RAM */
	uint32_t RxFIFOQSA = SRAMCAN_BASE_ADDR + SRAMCAN_RFQSA;
 8001b44:	4b6d      	ldr	r3, [pc, #436]	; (8001cfc <CAN1_Rx+0x2e0>)
 8001b46:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t *rx_address = (uint32_t*) (RxFIFOQSA
			+ (get_index * SRAMCAN_RFQ_SIZE));
 8001b48:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 8001b4c:	4613      	mov	r3, r2
 8001b4e:	00db      	lsls	r3, r3, #3
 8001b50:	4413      	add	r3, r2
 8001b52:	00db      	lsls	r3, r3, #3
 8001b54:	461a      	mov	r2, r3
 8001b56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b58:	4413      	add	r3, r2
	uint32_t *rx_address = (uint32_t*) (RxFIFOQSA
 8001b5a:	62bb      	str	r3, [r7, #40]	; 0x28

	printf("RX address: 0x%08X\n", (unsigned int) rx_address);
 8001b5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b5e:	4619      	mov	r1, r3
 8001b60:	4867      	ldr	r0, [pc, #412]	; (8001d00 <CAN1_Rx+0x2e4>)
 8001b62:	f001 f915 	bl	8002d90 <iprintf>

	/* 5. Extract message information from the RX element */
	/* Read first word (R0) - Contains ID and frame information */
	uint32_t word1 = *rx_address;
 8001b66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ESI = ((word1 >> 31) & 0x1);       // Error state indicator
 8001b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b6e:	0fdb      	lsrs	r3, r3, #31
 8001b70:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	hRXHeader->ErrorStateIndicator = ESI;
 8001b74:	68bb      	ldr	r3, [r7, #8]
 8001b76:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001b7a:	701a      	strb	r2, [r3, #0]
	uint8_t bit_identifier = ((word1 >> 30) & 0x1); // 0=standard, 1=extended
 8001b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b7e:	0f9b      	lsrs	r3, r3, #30
 8001b80:	b2db      	uxtb	r3, r3
 8001b82:	f003 0301 	and.w	r3, r3, #1
 8001b86:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	hRXHeader->IdType = bit_identifier;
 8001b8a:	68bb      	ldr	r3, [r7, #8]
 8001b8c:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8001b90:	721a      	strb	r2, [r3, #8]
	uint8_t RTR = ((word1 >> 29) & 0x1);      // Remote transmission request
 8001b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b94:	0f5b      	lsrs	r3, r3, #29
 8001b96:	b2db      	uxtb	r3, r3
 8001b98:	f003 0301 	and.w	r3, r3, #1
 8001b9c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	hRXHeader->RxFrameType = RTR;
 8001ba0:	68bb      	ldr	r3, [r7, #8]
 8001ba2:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8001ba6:	725a      	strb	r2, [r3, #9]
	uint32_t identifier;

	printf("Word1: 0x%08X\n", (unsigned int) word1);
 8001ba8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001baa:	4856      	ldr	r0, [pc, #344]	; (8001d04 <CAN1_Rx+0x2e8>)
 8001bac:	f001 f8f0 	bl	8002d90 <iprintf>
	printf("ESI: %d, ID Type: %s, RTR: %d\n", hRXHeader->ErrorStateIndicator,
 8001bb0:	68bb      	ldr	r3, [r7, #8]
 8001bb2:	781b      	ldrb	r3, [r3, #0]
 8001bb4:	4619      	mov	r1, r3
 8001bb6:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d101      	bne.n	8001bc2 <CAN1_Rx+0x1a6>
 8001bbe:	4a52      	ldr	r2, [pc, #328]	; (8001d08 <CAN1_Rx+0x2ec>)
 8001bc0:	e000      	b.n	8001bc4 <CAN1_Rx+0x1a8>
 8001bc2:	4a52      	ldr	r2, [pc, #328]	; (8001d0c <CAN1_Rx+0x2f0>)
			(bit_identifier == 0) ? "Standard" : "Extended",
			hRXHeader->RxFrameType);
 8001bc4:	68bb      	ldr	r3, [r7, #8]
 8001bc6:	7a5b      	ldrb	r3, [r3, #9]
	printf("ESI: %d, ID Type: %s, RTR: %d\n", hRXHeader->ErrorStateIndicator,
 8001bc8:	4851      	ldr	r0, [pc, #324]	; (8001d10 <CAN1_Rx+0x2f4>)
 8001bca:	f001 f8e1 	bl	8002d90 <iprintf>

	/* Extract message ID based on format */
	if (bit_identifier == 0) {  // Standard ID (11 bits)
 8001bce:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d109      	bne.n	8001bea <CAN1_Rx+0x1ce>
		identifier = (word1 >> 18) & 0x7FF;
 8001bd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bd8:	0c9b      	lsrs	r3, r3, #18
 8001bda:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001bde:	643b      	str	r3, [r7, #64]	; 0x40
		printf("Standard ID: 0x%03lX\n", identifier);
 8001be0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8001be2:	484c      	ldr	r0, [pc, #304]	; (8001d14 <CAN1_Rx+0x2f8>)
 8001be4:	f001 f8d4 	bl	8002d90 <iprintf>
 8001be8:	e007      	b.n	8001bfa <CAN1_Rx+0x1de>
	} else {  // Extended ID (29 bits)
		identifier = word1 & 0x1FFFFFFF;
 8001bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bec:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 8001bf0:	643b      	str	r3, [r7, #64]	; 0x40
		printf("Extended ID: 0x%08lX\n", identifier);
 8001bf2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8001bf4:	4848      	ldr	r0, [pc, #288]	; (8001d18 <CAN1_Rx+0x2fc>)
 8001bf6:	f001 f8cb 	bl	8002d90 <iprintf>
	}
	hRXHeader->Identifier = identifier;
 8001bfa:	68bb      	ldr	r3, [r7, #8]
 8001bfc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001bfe:	605a      	str	r2, [r3, #4]

	/* Read second word (R1) - Contains DLC and additional flags */
	rx_address++;
 8001c00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c02:	3304      	adds	r3, #4
 8001c04:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t word2 = *rx_address;
 8001c06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	61fb      	str	r3, [r7, #28]

	uint8_t ANMF = ((word2 >> 31) & 0x1);     // Accepted non-matching frame
 8001c0c:	69fb      	ldr	r3, [r7, #28]
 8001c0e:	0fdb      	lsrs	r3, r3, #31
 8001c10:	76fb      	strb	r3, [r7, #27]
	hRXHeader->IsFilterMatchingFrame = ANMF;
 8001c12:	68bb      	ldr	r3, [r7, #8]
 8001c14:	7efa      	ldrb	r2, [r7, #27]
 8001c16:	729a      	strb	r2, [r3, #10]
	uint8_t FRAME_FORMAT = ((word2 >> 21) & 0x1); // CAN FD format
 8001c18:	69fb      	ldr	r3, [r7, #28]
 8001c1a:	0d5b      	lsrs	r3, r3, #21
 8001c1c:	b2db      	uxtb	r3, r3
 8001c1e:	f003 0301 	and.w	r3, r3, #1
 8001c22:	76bb      	strb	r3, [r7, #26]
	hRXHeader->FDFormat = FRAME_FORMAT;
 8001c24:	68bb      	ldr	r3, [r7, #8]
 8001c26:	7eba      	ldrb	r2, [r7, #26]
 8001c28:	751a      	strb	r2, [r3, #20]
	uint8_t BRS = ((word2 >> 20) & 0x1);        // Bit rate switching
 8001c2a:	69fb      	ldr	r3, [r7, #28]
 8001c2c:	0d1b      	lsrs	r3, r3, #20
 8001c2e:	b2db      	uxtb	r3, r3
 8001c30:	f003 0301 	and.w	r3, r3, #1
 8001c34:	767b      	strb	r3, [r7, #25]
	hRXHeader->BitRateSwitch = BRS;
 8001c36:	68bb      	ldr	r3, [r7, #8]
 8001c38:	7e7a      	ldrb	r2, [r7, #25]
 8001c3a:	709a      	strb	r2, [r3, #2]
	uint8_t DLC = ((word2 >> 16) & 0xFF);       // Data length code
 8001c3c:	69fb      	ldr	r3, [r7, #28]
 8001c3e:	0c1b      	lsrs	r3, r3, #16
 8001c40:	763b      	strb	r3, [r7, #24]
	hRXHeader->DataLength = DLC;
 8001c42:	68bb      	ldr	r3, [r7, #8]
 8001c44:	7e3a      	ldrb	r2, [r7, #24]
 8001c46:	705a      	strb	r2, [r3, #1]

	printf("Word2: 0x%08X\n", (unsigned int) word2);
 8001c48:	69f9      	ldr	r1, [r7, #28]
 8001c4a:	4834      	ldr	r0, [pc, #208]	; (8001d1c <CAN1_Rx+0x300>)
 8001c4c:	f001 f8a0 	bl	8002d90 <iprintf>
	printf("ANMF: %d, Frame Format: %d, BRS: %d\n", ANMF, FRAME_FORMAT, BRS);
 8001c50:	7ef9      	ldrb	r1, [r7, #27]
 8001c52:	7eba      	ldrb	r2, [r7, #26]
 8001c54:	7e7b      	ldrb	r3, [r7, #25]
 8001c56:	4832      	ldr	r0, [pc, #200]	; (8001d20 <CAN1_Rx+0x304>)
 8001c58:	f001 f89a 	bl	8002d90 <iprintf>
	printf("DLC: %d\n", DLC);
 8001c5c:	7e3b      	ldrb	r3, [r7, #24]
 8001c5e:	4619      	mov	r1, r3
 8001c60:	4830      	ldr	r0, [pc, #192]	; (8001d24 <CAN1_Rx+0x308>)
 8001c62:	f001 f895 	bl	8002d90 <iprintf>

	/* Move to data section */
	rx_address++;
 8001c66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c68:	3304      	adds	r3, #4
 8001c6a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Extract and display data bytes */
	uint8_t *data_ptr = (uint8_t*) rx_address;  // Use a separate pointer
 8001c6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c6e:	617b      	str	r3, [r7, #20]

	/* Copy data to the receivedData array */
	for (int i = 0; i < DLC && i < 8; i++) {  // Limit to array size
 8001c70:	2300      	movs	r3, #0
 8001c72:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001c74:	e00a      	b.n	8001c8c <CAN1_Rx+0x270>
		receivedData[i] = data_ptr[i];
 8001c76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001c78:	697a      	ldr	r2, [r7, #20]
 8001c7a:	441a      	add	r2, r3
 8001c7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001c7e:	6879      	ldr	r1, [r7, #4]
 8001c80:	440b      	add	r3, r1
 8001c82:	7812      	ldrb	r2, [r2, #0]
 8001c84:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < DLC && i < 8; i++) {  // Limit to array size
 8001c86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001c88:	3301      	adds	r3, #1
 8001c8a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001c8c:	7e3b      	ldrb	r3, [r7, #24]
 8001c8e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001c90:	429a      	cmp	r2, r3
 8001c92:	da02      	bge.n	8001c9a <CAN1_Rx+0x27e>
 8001c94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001c96:	2b07      	cmp	r3, #7
 8001c98:	dded      	ble.n	8001c76 <CAN1_Rx+0x25a>
	}

	/* Null-terminate if treating as string */
	if (DLC < 8) {
 8001c9a:	7e3b      	ldrb	r3, [r7, #24]
 8001c9c:	2b07      	cmp	r3, #7
 8001c9e:	d804      	bhi.n	8001caa <CAN1_Rx+0x28e>
		receivedData[DLC] = '\0';
 8001ca0:	7e3b      	ldrb	r3, [r7, #24]
 8001ca2:	687a      	ldr	r2, [r7, #4]
 8001ca4:	4413      	add	r3, r2
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	701a      	strb	r2, [r3, #0]
	}

	/* Display in hexadecimal format */
	printf("Data (hex): ");
 8001caa:	481f      	ldr	r0, [pc, #124]	; (8001d28 <CAN1_Rx+0x30c>)
 8001cac:	f001 f870 	bl	8002d90 <iprintf>
	for (int i = 0; i < DLC; i++) {
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	63bb      	str	r3, [r7, #56]	; 0x38
 8001cb4:	e00a      	b.n	8001ccc <CAN1_Rx+0x2b0>
		printf("%02X ", data_ptr[i]);  // Use data_ptr for printf
 8001cb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001cb8:	697a      	ldr	r2, [r7, #20]
 8001cba:	4413      	add	r3, r2
 8001cbc:	781b      	ldrb	r3, [r3, #0]
 8001cbe:	4619      	mov	r1, r3
 8001cc0:	481a      	ldr	r0, [pc, #104]	; (8001d2c <CAN1_Rx+0x310>)
 8001cc2:	f001 f865 	bl	8002d90 <iprintf>
	for (int i = 0; i < DLC; i++) {
 8001cc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001cc8:	3301      	adds	r3, #1
 8001cca:	63bb      	str	r3, [r7, #56]	; 0x38
 8001ccc:	7e3b      	ldrb	r3, [r7, #24]
 8001cce:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001cd0:	429a      	cmp	r2, r3
 8001cd2:	dbf0      	blt.n	8001cb6 <CAN1_Rx+0x29a>
	}
	printf("\n");
 8001cd4:	200a      	movs	r0, #10
 8001cd6:	f001 f86d 	bl	8002db4 <putchar>

	/* Display as ASCII characters if printable */
	printf("Data (char): ");
 8001cda:	4815      	ldr	r0, [pc, #84]	; (8001d30 <CAN1_Rx+0x314>)
 8001cdc:	f001 f858 	bl	8002d90 <iprintf>
	for (int i = 0; i < DLC; i++) {
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	637b      	str	r3, [r7, #52]	; 0x34
 8001ce4:	e040      	b.n	8001d68 <CAN1_Rx+0x34c>
 8001ce6:	bf00      	nop
 8001ce8:	08004f78 	.word	0x08004f78
 8001cec:	08004f8c 	.word	0x08004f8c
 8001cf0:	08004fa0 	.word	0x08004fa0
 8001cf4:	08004fd8 	.word	0x08004fd8
 8001cf8:	42020400 	.word	0x42020400
 8001cfc:	4000acb0 	.word	0x4000acb0
 8001d00:	08004fe8 	.word	0x08004fe8
 8001d04:	08004ffc 	.word	0x08004ffc
 8001d08:	0800500c 	.word	0x0800500c
 8001d0c:	08005018 	.word	0x08005018
 8001d10:	08005024 	.word	0x08005024
 8001d14:	08005044 	.word	0x08005044
 8001d18:	0800505c 	.word	0x0800505c
 8001d1c:	08005074 	.word	0x08005074
 8001d20:	08005084 	.word	0x08005084
 8001d24:	080050ac 	.word	0x080050ac
 8001d28:	080050b8 	.word	0x080050b8
 8001d2c:	080050c8 	.word	0x080050c8
 8001d30:	080050d0 	.word	0x080050d0
		if (data_ptr[i] >= 32 && data_ptr[i] <= 126) {
 8001d34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d36:	697a      	ldr	r2, [r7, #20]
 8001d38:	4413      	add	r3, r2
 8001d3a:	781b      	ldrb	r3, [r3, #0]
 8001d3c:	2b1f      	cmp	r3, #31
 8001d3e:	d90d      	bls.n	8001d5c <CAN1_Rx+0x340>
 8001d40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d42:	697a      	ldr	r2, [r7, #20]
 8001d44:	4413      	add	r3, r2
 8001d46:	781b      	ldrb	r3, [r3, #0]
 8001d48:	2b7e      	cmp	r3, #126	; 0x7e
 8001d4a:	d807      	bhi.n	8001d5c <CAN1_Rx+0x340>
			printf("%c", data_ptr[i]);
 8001d4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d4e:	697a      	ldr	r2, [r7, #20]
 8001d50:	4413      	add	r3, r2
 8001d52:	781b      	ldrb	r3, [r3, #0]
 8001d54:	4618      	mov	r0, r3
 8001d56:	f001 f82d 	bl	8002db4 <putchar>
 8001d5a:	e002      	b.n	8001d62 <CAN1_Rx+0x346>
		} else {
			printf(".");
 8001d5c:	202e      	movs	r0, #46	; 0x2e
 8001d5e:	f001 f829 	bl	8002db4 <putchar>
	for (int i = 0; i < DLC; i++) {
 8001d62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d64:	3301      	adds	r3, #1
 8001d66:	637b      	str	r3, [r7, #52]	; 0x34
 8001d68:	7e3b      	ldrb	r3, [r7, #24]
 8001d6a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001d6c:	429a      	cmp	r2, r3
 8001d6e:	dbe1      	blt.n	8001d34 <CAN1_Rx+0x318>
		}
	}
	printf("\n");
 8001d70:	200a      	movs	r0, #10
 8001d72:	f001 f81f 	bl	8002db4 <putchar>

	/* 6. Acknowledge reading the message to free the FIFO slot */
	/* Writing to RXF0A register acknowledges that the message has been read
	 * and the hardware will increment the get index */
	hFDCAN->Instace->RXF0A = get_index;
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 8001d7e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

	/* Verify that get index has been updated */
	get_index = READ_BIT_FIELD(hFDCAN->Instace->RXF0S, 8, 0x3);  // F0GI field
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d8a:	0a1b      	lsrs	r3, r3, #8
 8001d8c:	b2db      	uxtb	r3, r3
 8001d8e:	f003 0303 	and.w	r3, r3, #3
 8001d92:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	printf("Message received and acknowledged. Get index: %d\n", get_index);
 8001d96:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001d9a:	4619      	mov	r1, r3
 8001d9c:	4802      	ldr	r0, [pc, #8]	; (8001da8 <CAN1_Rx+0x38c>)
 8001d9e:	f000 fff7 	bl	8002d90 <iprintf>
}
 8001da2:	3748      	adds	r7, #72	; 0x48
 8001da4:	46bd      	mov	sp, r7
 8001da6:	bd80      	pop	{r7, pc}
 8001da8:	080050e0 	.word	0x080050e0

08001dac <delayUS>:

void delayUS(uint32_t us) {
 8001dac:	b480      	push	{r7}
 8001dae:	b083      	sub	sp, #12
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
	TIM2_t->CNT = 0;
 8001db4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001db8:	2200      	movs	r2, #0
 8001dba:	625a      	str	r2, [r3, #36]	; 0x24
	while (TIM2_t->CNT < us)
 8001dbc:	bf00      	nop
 8001dbe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001dc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dc4:	687a      	ldr	r2, [r7, #4]
 8001dc6:	429a      	cmp	r2, r3
 8001dc8:	d8f9      	bhi.n	8001dbe <delayUS+0x12>
		;
}
 8001dca:	bf00      	nop
 8001dcc:	bf00      	nop
 8001dce:	370c      	adds	r7, #12
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd6:	4770      	bx	lr

08001dd8 <delayMS>:
void delayMS(uint32_t ms) {
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b084      	sub	sp, #16
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < ms; i++) {
 8001de0:	2300      	movs	r3, #0
 8001de2:	60fb      	str	r3, [r7, #12]
 8001de4:	e006      	b.n	8001df4 <delayMS+0x1c>
		delayUS(1000);
 8001de6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001dea:	f7ff ffdf 	bl	8001dac <delayUS>
	for (int i = 0; i < ms; i++) {
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	3301      	adds	r3, #1
 8001df2:	60fb      	str	r3, [r7, #12]
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	687a      	ldr	r2, [r7, #4]
 8001df8:	429a      	cmp	r2, r3
 8001dfa:	d8f4      	bhi.n	8001de6 <delayMS+0xe>
	}
}
 8001dfc:	bf00      	nop
 8001dfe:	bf00      	nop
 8001e00:	3710      	adds	r7, #16
 8001e02:	46bd      	mov	sp, r7
 8001e04:	bd80      	pop	{r7, pc}
	...

08001e08 <I2C_INIT>:

void I2C_INIT() {
 8001e08:	b480      	push	{r7}
 8001e0a:	af00      	add	r7, sp, #0

	// Enable I2C Clock
	I2C2_CLK_EN();
 8001e0c:	4b25      	ldr	r3, [pc, #148]	; (8001ea4 <I2C_INIT+0x9c>)
 8001e0e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001e12:	4a24      	ldr	r2, [pc, #144]	; (8001ea4 <I2C_INIT+0x9c>)
 8001e14:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001e18:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c

	// CLEAR PE bit in I2C_CR1;
	CLEAR_BIT_FIELD(I2C2_t->CR1, 0);
 8001e1c:	4b22      	ldr	r3, [pc, #136]	; (8001ea8 <I2C_INIT+0xa0>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	4a21      	ldr	r2, [pc, #132]	; (8001ea8 <I2C_INIT+0xa0>)
 8001e22:	f023 0301 	bic.w	r3, r3, #1
 8001e26:	6013      	str	r3, [r2, #0]

	// Config ANFOFF and DNF[3:0] in I2C2_CR1
	// Off Analog noise
	CLEAR_BIT_FIELD(I2C2_t->CR1, 12);
 8001e28:	4b1f      	ldr	r3, [pc, #124]	; (8001ea8 <I2C_INIT+0xa0>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	4a1e      	ldr	r2, [pc, #120]	; (8001ea8 <I2C_INIT+0xa0>)
 8001e2e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001e32:	6013      	str	r3, [r2, #0]
	SET_BIT_FIELD(I2C2_t->CR1, 12);
 8001e34:	4b1c      	ldr	r3, [pc, #112]	; (8001ea8 <I2C_INIT+0xa0>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	4a1b      	ldr	r2, [pc, #108]	; (8001ea8 <I2C_INIT+0xa0>)
 8001e3a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001e3e:	6013      	str	r3, [r2, #0]

	// Off Digital noise
	CLEAR_VAL_BIT(I2C2_t->CR1, 0xF, 8);
 8001e40:	4b19      	ldr	r3, [pc, #100]	; (8001ea8 <I2C_INIT+0xa0>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	4a18      	ldr	r2, [pc, #96]	; (8001ea8 <I2C_INIT+0xa0>)
 8001e46:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001e4a:	6013      	str	r3, [r2, #0]

	// Reset all bit
	WRITE_ALL_REG(I2C2_t->TIMINGR, 0);
 8001e4c:	4b16      	ldr	r3, [pc, #88]	; (8001ea8 <I2C_INIT+0xa0>)
 8001e4e:	2200      	movs	r2, #0
 8001e50:	611a      	str	r2, [r3, #16]

	// Prescale for I2C
	SET_VAL_BIT(I2C2_t->TIMINGR, 0x2, 28);
 8001e52:	4b15      	ldr	r3, [pc, #84]	; (8001ea8 <I2C_INIT+0xa0>)
 8001e54:	691b      	ldr	r3, [r3, #16]
 8001e56:	4a14      	ldr	r2, [pc, #80]	; (8001ea8 <I2C_INIT+0xa0>)
 8001e58:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001e5c:	6113      	str	r3, [r2, #16]

	// SCL HIGH
	SET_VAL_BIT(I2C2_t->TIMINGR, 99, 8);
 8001e5e:	4b12      	ldr	r3, [pc, #72]	; (8001ea8 <I2C_INIT+0xa0>)
 8001e60:	691b      	ldr	r3, [r3, #16]
 8001e62:	4a11      	ldr	r2, [pc, #68]	; (8001ea8 <I2C_INIT+0xa0>)
 8001e64:	f443 43c6 	orr.w	r3, r3, #25344	; 0x6300
 8001e68:	6113      	str	r3, [r2, #16]

	// SCL LOW
	SET_VAL_BIT(I2C2_t->TIMINGR, 107, 0);
 8001e6a:	4b0f      	ldr	r3, [pc, #60]	; (8001ea8 <I2C_INIT+0xa0>)
 8001e6c:	691b      	ldr	r3, [r3, #16]
 8001e6e:	4a0e      	ldr	r2, [pc, #56]	; (8001ea8 <I2C_INIT+0xa0>)
 8001e70:	f043 036b 	orr.w	r3, r3, #107	; 0x6b
 8001e74:	6113      	str	r3, [r2, #16]

	// Data hold time
	SET_VAL_BIT(I2C2_t->TIMINGR, 25, 16);
 8001e76:	4b0c      	ldr	r3, [pc, #48]	; (8001ea8 <I2C_INIT+0xa0>)
 8001e78:	691b      	ldr	r3, [r3, #16]
 8001e7a:	4a0b      	ldr	r2, [pc, #44]	; (8001ea8 <I2C_INIT+0xa0>)
 8001e7c:	f443 13c8 	orr.w	r3, r3, #1638400	; 0x190000
 8001e80:	6113      	str	r3, [r2, #16]

	// Data setup time
	SET_VAL_BIT(I2C2_t->TIMINGR, 25, 20);
 8001e82:	4b09      	ldr	r3, [pc, #36]	; (8001ea8 <I2C_INIT+0xa0>)
 8001e84:	691b      	ldr	r3, [r3, #16]
 8001e86:	4a08      	ldr	r2, [pc, #32]	; (8001ea8 <I2C_INIT+0xa0>)
 8001e88:	f043 73c8 	orr.w	r3, r3, #26214400	; 0x1900000
 8001e8c:	6113      	str	r3, [r2, #16]

	// I2C Peripheral EN
	SET_BIT_FIELD(I2C2_t->CR1, 0);
 8001e8e:	4b06      	ldr	r3, [pc, #24]	; (8001ea8 <I2C_INIT+0xa0>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	4a05      	ldr	r2, [pc, #20]	; (8001ea8 <I2C_INIT+0xa0>)
 8001e94:	f043 0301 	orr.w	r3, r3, #1
 8001e98:	6013      	str	r3, [r2, #0]
}
 8001e9a:	bf00      	nop
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea2:	4770      	bx	lr
 8001ea4:	44020c00 	.word	0x44020c00
 8001ea8:	40005800 	.word	0x40005800

08001eac <I2C_WRITE>:

void I2C_WRITE(uint8_t addr, uint8_t data) {
 8001eac:	b480      	push	{r7}
 8001eae:	b085      	sub	sp, #20
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	460a      	mov	r2, r1
 8001eb6:	71fb      	strb	r3, [r7, #7]
 8001eb8:	4613      	mov	r3, r2
 8001eba:	71bb      	strb	r3, [r7, #6]
	// Controller mode
	if (tc == 1) {
 8001ebc:	4b22      	ldr	r3, [pc, #136]	; (8001f48 <I2C_WRITE+0x9c>)
 8001ebe:	781b      	ldrb	r3, [r3, #0]
 8001ec0:	b2db      	uxtb	r3, r3
 8001ec2:	2b01      	cmp	r3, #1
 8001ec4:	d13a      	bne.n	8001f3c <I2C_WRITE+0x90>
		// 7-bit addressing mode
		CLEAR_BIT_FIELD(I2C2_t->CR2, 11);
 8001ec6:	4b21      	ldr	r3, [pc, #132]	; (8001f4c <I2C_WRITE+0xa0>)
 8001ec8:	685b      	ldr	r3, [r3, #4]
 8001eca:	4a20      	ldr	r2, [pc, #128]	; (8001f4c <I2C_WRITE+0xa0>)
 8001ecc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001ed0:	6053      	str	r3, [r2, #4]

		// Target address to send
		uint8_t address = (addr >> 1);
 8001ed2:	79fb      	ldrb	r3, [r7, #7]
 8001ed4:	085b      	lsrs	r3, r3, #1
 8001ed6:	73fb      	strb	r3, [r7, #15]
		CLEAR_VAL_BIT(I2C2_t->CR2, 0x7F, 1);
 8001ed8:	4b1c      	ldr	r3, [pc, #112]	; (8001f4c <I2C_WRITE+0xa0>)
 8001eda:	685b      	ldr	r3, [r3, #4]
 8001edc:	4a1b      	ldr	r2, [pc, #108]	; (8001f4c <I2C_WRITE+0xa0>)
 8001ede:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe
 8001ee2:	6053      	str	r3, [r2, #4]
		SET_VAL_BIT(I2C2_t->CR2, address, 1);
 8001ee4:	4b19      	ldr	r3, [pc, #100]	; (8001f4c <I2C_WRITE+0xa0>)
 8001ee6:	685b      	ldr	r3, [r3, #4]
 8001ee8:	7bfa      	ldrb	r2, [r7, #15]
 8001eea:	0052      	lsls	r2, r2, #1
 8001eec:	4611      	mov	r1, r2
 8001eee:	4a17      	ldr	r2, [pc, #92]	; (8001f4c <I2C_WRITE+0xa0>)
 8001ef0:	430b      	orrs	r3, r1
 8001ef2:	6053      	str	r3, [r2, #4]

		// Transfer dirrection (Write)
		CLEAR_BIT_FIELD(I2C2_t->CR2, 10);
 8001ef4:	4b15      	ldr	r3, [pc, #84]	; (8001f4c <I2C_WRITE+0xa0>)
 8001ef6:	685b      	ldr	r3, [r3, #4]
 8001ef8:	4a14      	ldr	r2, [pc, #80]	; (8001f4c <I2C_WRITE+0xa0>)
 8001efa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001efe:	6053      	str	r3, [r2, #4]

		// Number of bytes to transfer (1 bytes)
		SET_VAL_BIT(I2C2_t->CR2, 0x1, 16);
 8001f00:	4b12      	ldr	r3, [pc, #72]	; (8001f4c <I2C_WRITE+0xa0>)
 8001f02:	685b      	ldr	r3, [r3, #4]
 8001f04:	4a11      	ldr	r2, [pc, #68]	; (8001f4c <I2C_WRITE+0xa0>)
 8001f06:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f0a:	6053      	str	r3, [r2, #4]

		// Clear auto end mode
		CLEAR_BIT_FIELD(I2C2_t->CR2, 25);
 8001f0c:	4b0f      	ldr	r3, [pc, #60]	; (8001f4c <I2C_WRITE+0xa0>)
 8001f0e:	685b      	ldr	r3, [r3, #4]
 8001f10:	4a0e      	ldr	r2, [pc, #56]	; (8001f4c <I2C_WRITE+0xa0>)
 8001f12:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8001f16:	6053      	str	r3, [r2, #4]

		data_to_send = data;
 8001f18:	4a0d      	ldr	r2, [pc, #52]	; (8001f50 <I2C_WRITE+0xa4>)
 8001f1a:	79bb      	ldrb	r3, [r7, #6]
 8001f1c:	7013      	strb	r3, [r2, #0]
		tc = 0;
 8001f1e:	4b0a      	ldr	r3, [pc, #40]	; (8001f48 <I2C_WRITE+0x9c>)
 8001f20:	2200      	movs	r2, #0
 8001f22:	701a      	strb	r2, [r3, #0]
		// Set start bit
		SET_BIT_FIELD(I2C2_t->CR2, 13);
 8001f24:	4b09      	ldr	r3, [pc, #36]	; (8001f4c <I2C_WRITE+0xa0>)
 8001f26:	685b      	ldr	r3, [r3, #4]
 8001f28:	4a08      	ldr	r2, [pc, #32]	; (8001f4c <I2C_WRITE+0xa0>)
 8001f2a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001f2e:	6053      	str	r3, [r2, #4]
		while (tc == 0)
 8001f30:	bf00      	nop
 8001f32:	4b05      	ldr	r3, [pc, #20]	; (8001f48 <I2C_WRITE+0x9c>)
 8001f34:	781b      	ldrb	r3, [r3, #0]
 8001f36:	b2db      	uxtb	r3, r3
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d0fa      	beq.n	8001f32 <I2C_WRITE+0x86>

	// Wait for trasmission complete
//	while (!(READ_BIT_FIELD(I2C2_t->ISR, 6, 0x1)))
//		;

}
 8001f3c:	bf00      	nop
 8001f3e:	3714      	adds	r7, #20
 8001f40:	46bd      	mov	sp, r7
 8001f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f46:	4770      	bx	lr
 8001f48:	20000008 	.word	0x20000008
 8001f4c:	40005800 	.word	0x40005800
 8001f50:	200001f0 	.word	0x200001f0

08001f54 <lcd_write_4_bit>:
// Bit 3: Backlight (BL)
// Bit 2: Enable (EN)
// Bit 1: Read/Write (RW)
// Bit 0: Register Select (RS)

void lcd_write_4_bit(uint8_t addr, uint8_t nibble, uint8_t rs, uint8_t rw) {
 8001f54:	b590      	push	{r4, r7, lr}
 8001f56:	b085      	sub	sp, #20
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	4604      	mov	r4, r0
 8001f5c:	4608      	mov	r0, r1
 8001f5e:	4611      	mov	r1, r2
 8001f60:	461a      	mov	r2, r3
 8001f62:	4623      	mov	r3, r4
 8001f64:	71fb      	strb	r3, [r7, #7]
 8001f66:	4603      	mov	r3, r0
 8001f68:	71bb      	strb	r3, [r7, #6]
 8001f6a:	460b      	mov	r3, r1
 8001f6c:	717b      	strb	r3, [r7, #5]
 8001f6e:	4613      	mov	r3, r2
 8001f70:	713b      	strb	r3, [r7, #4]
	uint8_t data = (nibble << 4) | LCD_BACKLIGHT | (rw ? LCD_RW : 0)
 8001f72:	79bb      	ldrb	r3, [r7, #6]
 8001f74:	011b      	lsls	r3, r3, #4
 8001f76:	b25b      	sxtb	r3, r3
 8001f78:	f043 0308 	orr.w	r3, r3, #8
 8001f7c:	b25b      	sxtb	r3, r3
 8001f7e:	793a      	ldrb	r2, [r7, #4]
 8001f80:	2a00      	cmp	r2, #0
 8001f82:	d001      	beq.n	8001f88 <lcd_write_4_bit+0x34>
 8001f84:	2202      	movs	r2, #2
 8001f86:	e000      	b.n	8001f8a <lcd_write_4_bit+0x36>
 8001f88:	2200      	movs	r2, #0
 8001f8a:	4313      	orrs	r3, r2
 8001f8c:	b25a      	sxtb	r2, r3
			| (rs ? LCD_RS : 0);
 8001f8e:	797b      	ldrb	r3, [r7, #5]
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	bf14      	ite	ne
 8001f94:	2301      	movne	r3, #1
 8001f96:	2300      	moveq	r3, #0
 8001f98:	b2db      	uxtb	r3, r3
 8001f9a:	b25b      	sxtb	r3, r3
 8001f9c:	4313      	orrs	r3, r2
 8001f9e:	b25b      	sxtb	r3, r3
	uint8_t data = (nibble << 4) | LCD_BACKLIGHT | (rw ? LCD_RW : 0)
 8001fa0:	73fb      	strb	r3, [r7, #15]

	// Pull high EN bit
	I2C_WRITE(addr, data | LCD_ENABLE);
 8001fa2:	7bfb      	ldrb	r3, [r7, #15]
 8001fa4:	f043 0304 	orr.w	r3, r3, #4
 8001fa8:	b2da      	uxtb	r2, r3
 8001faa:	79fb      	ldrb	r3, [r7, #7]
 8001fac:	4611      	mov	r1, r2
 8001fae:	4618      	mov	r0, r3
 8001fb0:	f7ff ff7c 	bl	8001eac <I2C_WRITE>
	delayUS(50);
 8001fb4:	2032      	movs	r0, #50	; 0x32
 8001fb6:	f7ff fef9 	bl	8001dac <delayUS>

	// Pull low EN bit
	I2C_WRITE(addr, data & ~LCD_ENABLE);
 8001fba:	7bfb      	ldrb	r3, [r7, #15]
 8001fbc:	f023 0304 	bic.w	r3, r3, #4
 8001fc0:	b2da      	uxtb	r2, r3
 8001fc2:	79fb      	ldrb	r3, [r7, #7]
 8001fc4:	4611      	mov	r1, r2
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	f7ff ff70 	bl	8001eac <I2C_WRITE>
	delayUS(50);
 8001fcc:	2032      	movs	r0, #50	; 0x32
 8001fce:	f7ff feed 	bl	8001dac <delayUS>
}
 8001fd2:	bf00      	nop
 8001fd4:	3714      	adds	r7, #20
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	bd90      	pop	{r4, r7, pc}

08001fda <lcd_send_cmd>:

void lcd_send_cmd(uint8_t addr, uint8_t cmd) {
 8001fda:	b580      	push	{r7, lr}
 8001fdc:	b082      	sub	sp, #8
 8001fde:	af00      	add	r7, sp, #0
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	460a      	mov	r2, r1
 8001fe4:	71fb      	strb	r3, [r7, #7]
 8001fe6:	4613      	mov	r3, r2
 8001fe8:	71bb      	strb	r3, [r7, #6]
	lcd_write_4_bit(addr, (cmd >> 4), 0, 0);
 8001fea:	79bb      	ldrb	r3, [r7, #6]
 8001fec:	091b      	lsrs	r3, r3, #4
 8001fee:	b2d9      	uxtb	r1, r3
 8001ff0:	79f8      	ldrb	r0, [r7, #7]
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	f7ff ffad 	bl	8001f54 <lcd_write_4_bit>
	lcd_write_4_bit(addr, (cmd & 0xF), 0, 0);
 8001ffa:	79bb      	ldrb	r3, [r7, #6]
 8001ffc:	f003 030f 	and.w	r3, r3, #15
 8002000:	b2d9      	uxtb	r1, r3
 8002002:	79f8      	ldrb	r0, [r7, #7]
 8002004:	2300      	movs	r3, #0
 8002006:	2200      	movs	r2, #0
 8002008:	f7ff ffa4 	bl	8001f54 <lcd_write_4_bit>

	// Add proper delays based on command
	if (cmd == DISPLAY_CLEAR || cmd == RETURN_HOME) {
 800200c:	79bb      	ldrb	r3, [r7, #6]
 800200e:	2b01      	cmp	r3, #1
 8002010:	d002      	beq.n	8002018 <lcd_send_cmd+0x3e>
 8002012:	79bb      	ldrb	r3, [r7, #6]
 8002014:	2b02      	cmp	r3, #2
 8002016:	d103      	bne.n	8002020 <lcd_send_cmd+0x46>
		delayMS(10);     // Clear and Home need more time
 8002018:	200a      	movs	r0, #10
 800201a:	f7ff fedd 	bl	8001dd8 <delayMS>
 800201e:	e003      	b.n	8002028 <lcd_send_cmd+0x4e>
	} else {
		delayUS(100);    // Standard command delay
 8002020:	2064      	movs	r0, #100	; 0x64
 8002022:	f7ff fec3 	bl	8001dac <delayUS>
	}
}
 8002026:	bf00      	nop
 8002028:	bf00      	nop
 800202a:	3708      	adds	r7, #8
 800202c:	46bd      	mov	sp, r7
 800202e:	bd80      	pop	{r7, pc}

08002030 <print_char>:
void print_char(uint8_t addr, uint8_t data) {
 8002030:	b580      	push	{r7, lr}
 8002032:	b082      	sub	sp, #8
 8002034:	af00      	add	r7, sp, #0
 8002036:	4603      	mov	r3, r0
 8002038:	460a      	mov	r2, r1
 800203a:	71fb      	strb	r3, [r7, #7]
 800203c:	4613      	mov	r3, r2
 800203e:	71bb      	strb	r3, [r7, #6]
	lcd_write_4_bit(addr, (data >> 4), 1, 0);
 8002040:	79bb      	ldrb	r3, [r7, #6]
 8002042:	091b      	lsrs	r3, r3, #4
 8002044:	b2d9      	uxtb	r1, r3
 8002046:	79f8      	ldrb	r0, [r7, #7]
 8002048:	2300      	movs	r3, #0
 800204a:	2201      	movs	r2, #1
 800204c:	f7ff ff82 	bl	8001f54 <lcd_write_4_bit>
	lcd_write_4_bit(addr, (data & 0xF), 1, 0);
 8002050:	79bb      	ldrb	r3, [r7, #6]
 8002052:	f003 030f 	and.w	r3, r3, #15
 8002056:	b2d9      	uxtb	r1, r3
 8002058:	79f8      	ldrb	r0, [r7, #7]
 800205a:	2300      	movs	r3, #0
 800205c:	2201      	movs	r2, #1
 800205e:	f7ff ff79 	bl	8001f54 <lcd_write_4_bit>
}
 8002062:	bf00      	nop
 8002064:	3708      	adds	r7, #8
 8002066:	46bd      	mov	sp, r7
 8002068:	bd80      	pop	{r7, pc}

0800206a <print_string>:

void print_string(uint8_t addr, char *data) {
 800206a:	b580      	push	{r7, lr}
 800206c:	b082      	sub	sp, #8
 800206e:	af00      	add	r7, sp, #0
 8002070:	4603      	mov	r3, r0
 8002072:	6039      	str	r1, [r7, #0]
 8002074:	71fb      	strb	r3, [r7, #7]
	do {
		print_char(0x4E, (uint8_t) *data);
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	781b      	ldrb	r3, [r3, #0]
 800207a:	4619      	mov	r1, r3
 800207c:	204e      	movs	r0, #78	; 0x4e
 800207e:	f7ff ffd7 	bl	8002030 <print_char>
		data++;
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	3301      	adds	r3, #1
 8002086:	603b      	str	r3, [r7, #0]
	} while (*data != '\0');
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	781b      	ldrb	r3, [r3, #0]
 800208c:	2b00      	cmp	r3, #0
 800208e:	d1f2      	bne.n	8002076 <print_string+0xc>
}
 8002090:	bf00      	nop
 8002092:	bf00      	nop
 8002094:	3708      	adds	r7, #8
 8002096:	46bd      	mov	sp, r7
 8002098:	bd80      	pop	{r7, pc}

0800209a <lcd_set_cursor>:

void lcd_set_cursor(uint8_t row, uint8_t column) {
 800209a:	b580      	push	{r7, lr}
 800209c:	b082      	sub	sp, #8
 800209e:	af00      	add	r7, sp, #0
 80020a0:	4603      	mov	r3, r0
 80020a2:	460a      	mov	r2, r1
 80020a4:	71fb      	strb	r3, [r7, #7]
 80020a6:	4613      	mov	r3, r2
 80020a8:	71bb      	strb	r3, [r7, #6]
	column--;
 80020aa:	79bb      	ldrb	r3, [r7, #6]
 80020ac:	3b01      	subs	r3, #1
 80020ae:	71bb      	strb	r3, [r7, #6]
	if (row == 1) {
 80020b0:	79fb      	ldrb	r3, [r7, #7]
 80020b2:	2b01      	cmp	r3, #1
 80020b4:	d109      	bne.n	80020ca <lcd_set_cursor+0x30>
		lcd_send_cmd(0x4E, (column |= FIRST_ROW));
 80020b6:	79bb      	ldrb	r3, [r7, #6]
 80020b8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80020bc:	71bb      	strb	r3, [r7, #6]
 80020be:	79bb      	ldrb	r3, [r7, #6]
 80020c0:	4619      	mov	r1, r3
 80020c2:	204e      	movs	r0, #78	; 0x4e
 80020c4:	f7ff ff89 	bl	8001fda <lcd_send_cmd>
	} else {
		lcd_send_cmd(0x4E, (column |= SECOND_ROW));
	}
}
 80020c8:	e008      	b.n	80020dc <lcd_set_cursor+0x42>
		lcd_send_cmd(0x4E, (column |= SECOND_ROW));
 80020ca:	79bb      	ldrb	r3, [r7, #6]
 80020cc:	f063 033f 	orn	r3, r3, #63	; 0x3f
 80020d0:	71bb      	strb	r3, [r7, #6]
 80020d2:	79bb      	ldrb	r3, [r7, #6]
 80020d4:	4619      	mov	r1, r3
 80020d6:	204e      	movs	r0, #78	; 0x4e
 80020d8:	f7ff ff7f 	bl	8001fda <lcd_send_cmd>
}
 80020dc:	bf00      	nop
 80020de:	3708      	adds	r7, #8
 80020e0:	46bd      	mov	sp, r7
 80020e2:	bd80      	pop	{r7, pc}

080020e4 <lcd_init>:

void lcd_init() {
 80020e4:	b580      	push	{r7, lr}
 80020e6:	af00      	add	r7, sp, #0
	// Bus recovery - ensure I2C bus is in clean state
	I2C_WRITE(0x4E, 0x00);  // Dummy transaction
 80020e8:	2100      	movs	r1, #0
 80020ea:	204e      	movs	r0, #78	; 0x4e
 80020ec:	f7ff fede 	bl	8001eac <I2C_WRITE>

	// Wait for > 15ms
	delayMS(50);
 80020f0:	2032      	movs	r0, #50	; 0x32
 80020f2:	f7ff fe71 	bl	8001dd8 <delayMS>

	// I2C WRITE
	lcd_write_4_bit(0x4E, 0x3, 0, 0);
 80020f6:	2300      	movs	r3, #0
 80020f8:	2200      	movs	r2, #0
 80020fa:	2103      	movs	r1, #3
 80020fc:	204e      	movs	r0, #78	; 0x4e
 80020fe:	f7ff ff29 	bl	8001f54 <lcd_write_4_bit>

	// Wait for > 4.1ms
	delayMS(5);
 8002102:	2005      	movs	r0, #5
 8002104:	f7ff fe68 	bl	8001dd8 <delayMS>

	// I2C WRITE
	lcd_write_4_bit(0x4E, 0x3, 0, 0);
 8002108:	2300      	movs	r3, #0
 800210a:	2200      	movs	r2, #0
 800210c:	2103      	movs	r1, #3
 800210e:	204e      	movs	r0, #78	; 0x4e
 8002110:	f7ff ff20 	bl	8001f54 <lcd_write_4_bit>

	// Wait for > 100us
	delayUS(150);
 8002114:	2096      	movs	r0, #150	; 0x96
 8002116:	f7ff fe49 	bl	8001dac <delayUS>

	// I2C WRITE
	lcd_write_4_bit(0x4E, 0x3, 0, 0);
 800211a:	2300      	movs	r3, #0
 800211c:	2200      	movs	r2, #0
 800211e:	2103      	movs	r1, #3
 8002120:	204e      	movs	r0, #78	; 0x4e
 8002122:	f7ff ff17 	bl	8001f54 <lcd_write_4_bit>

	// Function set  (Set interface to be 4 bits long.) Interface is 8 bits in length.
	lcd_write_4_bit(0x4E, 0x2, 0, 0);
 8002126:	2300      	movs	r3, #0
 8002128:	2200      	movs	r2, #0
 800212a:	2102      	movs	r1, #2
 800212c:	204e      	movs	r0, #78	; 0x4e
 800212e:	f7ff ff11 	bl	8001f54 <lcd_write_4_bit>

	// Function set  (Interface is 4 bits long.  Specify the number of display lines and character font. The number of display lines and character font cannot be changed after this point.
	lcd_send_cmd(0x4E, FUNCTION_SET);
 8002132:	2128      	movs	r1, #40	; 0x28
 8002134:	204e      	movs	r0, #78	; 0x4e
 8002136:	f7ff ff50 	bl	8001fda <lcd_send_cmd>

	// Display on Cursor off
	lcd_send_cmd(0x4E, DISPLAY_ON_CURSOR_OFF);
 800213a:	210c      	movs	r1, #12
 800213c:	204e      	movs	r0, #78	; 0x4e
 800213e:	f7ff ff4c 	bl	8001fda <lcd_send_cmd>

	// Display clear
	lcd_clear();
 8002142:	f000 f806 	bl	8002152 <lcd_clear>

	// ENTRY MODE
	lcd_send_cmd(0x4E, ENTRY_MODE);
 8002146:	2106      	movs	r1, #6
 8002148:	204e      	movs	r0, #78	; 0x4e
 800214a:	f7ff ff46 	bl	8001fda <lcd_send_cmd>

}
 800214e:	bf00      	nop
 8002150:	bd80      	pop	{r7, pc}

08002152 <lcd_clear>:

void lcd_clear() {
 8002152:	b580      	push	{r7, lr}
 8002154:	af00      	add	r7, sp, #0
	// Display clear
	lcd_send_cmd(0x4E, DISPLAY_CLEAR);
 8002156:	2101      	movs	r1, #1
 8002158:	204e      	movs	r0, #78	; 0x4e
 800215a:	f7ff ff3e 	bl	8001fda <lcd_send_cmd>
}
 800215e:	bf00      	nop
 8002160:	bd80      	pop	{r7, pc}

08002162 <_write>:
 * @param  file: File handle (unused)
 * @param  ptr: Pointer to data buffer
 * @param  len: Number of bytes to write
 * @retval Number of bytes written
 */
int _write(int file, char *ptr, int len) {
 8002162:	b580      	push	{r7, lr}
 8002164:	b086      	sub	sp, #24
 8002166:	af00      	add	r7, sp, #0
 8002168:	60f8      	str	r0, [r7, #12]
 800216a:	60b9      	str	r1, [r7, #8]
 800216c:	607a      	str	r2, [r7, #4]
	(void) file;  // Unused parameter
	int DataIdx;

	/* Send each character to ITM port 0 */
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 800216e:	2300      	movs	r3, #0
 8002170:	617b      	str	r3, [r7, #20]
 8002172:	e009      	b.n	8002188 <_write+0x26>
		ITM_SendChar(*ptr++);
 8002174:	68bb      	ldr	r3, [r7, #8]
 8002176:	1c5a      	adds	r2, r3, #1
 8002178:	60ba      	str	r2, [r7, #8]
 800217a:	781b      	ldrb	r3, [r3, #0]
 800217c:	4618      	mov	r0, r3
 800217e:	f7fe fd27 	bl	8000bd0 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8002182:	697b      	ldr	r3, [r7, #20]
 8002184:	3301      	adds	r3, #1
 8002186:	617b      	str	r3, [r7, #20]
 8002188:	697a      	ldr	r2, [r7, #20]
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	429a      	cmp	r2, r3
 800218e:	dbf1      	blt.n	8002174 <_write+0x12>
	}
	return len;
 8002190:	687b      	ldr	r3, [r7, #4]
}
 8002192:	4618      	mov	r0, r3
 8002194:	3718      	adds	r7, #24
 8002196:	46bd      	mov	sp, r7
 8002198:	bd80      	pop	{r7, pc}

0800219a <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800219a:	b480      	push	{r7}
 800219c:	af00      	add	r7, sp, #0
  return 1;
 800219e:	2301      	movs	r3, #1
}
 80021a0:	4618      	mov	r0, r3
 80021a2:	46bd      	mov	sp, r7
 80021a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a8:	4770      	bx	lr

080021aa <_kill>:

int _kill(int pid, int sig)
{
 80021aa:	b580      	push	{r7, lr}
 80021ac:	b082      	sub	sp, #8
 80021ae:	af00      	add	r7, sp, #0
 80021b0:	6078      	str	r0, [r7, #4]
 80021b2:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80021b4:	f000 ff8c 	bl	80030d0 <__errno>
 80021b8:	4603      	mov	r3, r0
 80021ba:	2216      	movs	r2, #22
 80021bc:	601a      	str	r2, [r3, #0]
  return -1;
 80021be:	f04f 33ff 	mov.w	r3, #4294967295
}
 80021c2:	4618      	mov	r0, r3
 80021c4:	3708      	adds	r7, #8
 80021c6:	46bd      	mov	sp, r7
 80021c8:	bd80      	pop	{r7, pc}

080021ca <_exit>:

void _exit (int status)
{
 80021ca:	b580      	push	{r7, lr}
 80021cc:	b082      	sub	sp, #8
 80021ce:	af00      	add	r7, sp, #0
 80021d0:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80021d2:	f04f 31ff 	mov.w	r1, #4294967295
 80021d6:	6878      	ldr	r0, [r7, #4]
 80021d8:	f7ff ffe7 	bl	80021aa <_kill>
  while (1) {}    /* Make sure we hang here */
 80021dc:	e7fe      	b.n	80021dc <_exit+0x12>

080021de <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80021de:	b580      	push	{r7, lr}
 80021e0:	b086      	sub	sp, #24
 80021e2:	af00      	add	r7, sp, #0
 80021e4:	60f8      	str	r0, [r7, #12]
 80021e6:	60b9      	str	r1, [r7, #8]
 80021e8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021ea:	2300      	movs	r3, #0
 80021ec:	617b      	str	r3, [r7, #20]
 80021ee:	e00a      	b.n	8002206 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80021f0:	f3af 8000 	nop.w
 80021f4:	4601      	mov	r1, r0
 80021f6:	68bb      	ldr	r3, [r7, #8]
 80021f8:	1c5a      	adds	r2, r3, #1
 80021fa:	60ba      	str	r2, [r7, #8]
 80021fc:	b2ca      	uxtb	r2, r1
 80021fe:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002200:	697b      	ldr	r3, [r7, #20]
 8002202:	3301      	adds	r3, #1
 8002204:	617b      	str	r3, [r7, #20]
 8002206:	697a      	ldr	r2, [r7, #20]
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	429a      	cmp	r2, r3
 800220c:	dbf0      	blt.n	80021f0 <_read+0x12>
  }

  return len;
 800220e:	687b      	ldr	r3, [r7, #4]
}
 8002210:	4618      	mov	r0, r3
 8002212:	3718      	adds	r7, #24
 8002214:	46bd      	mov	sp, r7
 8002216:	bd80      	pop	{r7, pc}

08002218 <_close>:
  }
  return len;
}

int _close(int file)
{
 8002218:	b480      	push	{r7}
 800221a:	b083      	sub	sp, #12
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002220:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002224:	4618      	mov	r0, r3
 8002226:	370c      	adds	r7, #12
 8002228:	46bd      	mov	sp, r7
 800222a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222e:	4770      	bx	lr

08002230 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002230:	b480      	push	{r7}
 8002232:	b083      	sub	sp, #12
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
 8002238:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002240:	605a      	str	r2, [r3, #4]
  return 0;
 8002242:	2300      	movs	r3, #0
}
 8002244:	4618      	mov	r0, r3
 8002246:	370c      	adds	r7, #12
 8002248:	46bd      	mov	sp, r7
 800224a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224e:	4770      	bx	lr

08002250 <_isatty>:

int _isatty(int file)
{
 8002250:	b480      	push	{r7}
 8002252:	b083      	sub	sp, #12
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002258:	2301      	movs	r3, #1
}
 800225a:	4618      	mov	r0, r3
 800225c:	370c      	adds	r7, #12
 800225e:	46bd      	mov	sp, r7
 8002260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002264:	4770      	bx	lr

08002266 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002266:	b480      	push	{r7}
 8002268:	b085      	sub	sp, #20
 800226a:	af00      	add	r7, sp, #0
 800226c:	60f8      	str	r0, [r7, #12]
 800226e:	60b9      	str	r1, [r7, #8]
 8002270:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002272:	2300      	movs	r3, #0
}
 8002274:	4618      	mov	r0, r3
 8002276:	3714      	adds	r7, #20
 8002278:	46bd      	mov	sp, r7
 800227a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227e:	4770      	bx	lr

08002280 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b086      	sub	sp, #24
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002288:	4a14      	ldr	r2, [pc, #80]	; (80022dc <_sbrk+0x5c>)
 800228a:	4b15      	ldr	r3, [pc, #84]	; (80022e0 <_sbrk+0x60>)
 800228c:	1ad3      	subs	r3, r2, r3
 800228e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002290:	697b      	ldr	r3, [r7, #20]
 8002292:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002294:	4b13      	ldr	r3, [pc, #76]	; (80022e4 <_sbrk+0x64>)
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	2b00      	cmp	r3, #0
 800229a:	d102      	bne.n	80022a2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800229c:	4b11      	ldr	r3, [pc, #68]	; (80022e4 <_sbrk+0x64>)
 800229e:	4a12      	ldr	r2, [pc, #72]	; (80022e8 <_sbrk+0x68>)
 80022a0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80022a2:	4b10      	ldr	r3, [pc, #64]	; (80022e4 <_sbrk+0x64>)
 80022a4:	681a      	ldr	r2, [r3, #0]
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	4413      	add	r3, r2
 80022aa:	693a      	ldr	r2, [r7, #16]
 80022ac:	429a      	cmp	r2, r3
 80022ae:	d207      	bcs.n	80022c0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80022b0:	f000 ff0e 	bl	80030d0 <__errno>
 80022b4:	4603      	mov	r3, r0
 80022b6:	220c      	movs	r2, #12
 80022b8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80022ba:	f04f 33ff 	mov.w	r3, #4294967295
 80022be:	e009      	b.n	80022d4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80022c0:	4b08      	ldr	r3, [pc, #32]	; (80022e4 <_sbrk+0x64>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80022c6:	4b07      	ldr	r3, [pc, #28]	; (80022e4 <_sbrk+0x64>)
 80022c8:	681a      	ldr	r2, [r3, #0]
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	4413      	add	r3, r2
 80022ce:	4a05      	ldr	r2, [pc, #20]	; (80022e4 <_sbrk+0x64>)
 80022d0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80022d2:	68fb      	ldr	r3, [r7, #12]
}
 80022d4:	4618      	mov	r0, r3
 80022d6:	3718      	adds	r7, #24
 80022d8:	46bd      	mov	sp, r7
 80022da:	bd80      	pop	{r7, pc}
 80022dc:	20008000 	.word	0x20008000
 80022e0:	00000400 	.word	0x00000400
 80022e4:	2000028c 	.word	0x2000028c
 80022e8:	200003e0 	.word	0x200003e0

080022ec <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80022ec:	480d      	ldr	r0, [pc, #52]	; (8002324 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80022ee:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80022f0:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80022f4:	480c      	ldr	r0, [pc, #48]	; (8002328 <LoopForever+0x6>)
  ldr r1, =_edata
 80022f6:	490d      	ldr	r1, [pc, #52]	; (800232c <LoopForever+0xa>)
  ldr r2, =_sidata
 80022f8:	4a0d      	ldr	r2, [pc, #52]	; (8002330 <LoopForever+0xe>)
  movs r3, #0
 80022fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80022fc:	e002      	b.n	8002304 <LoopCopyDataInit>

080022fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80022fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002300:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002302:	3304      	adds	r3, #4

08002304 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002304:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002306:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002308:	d3f9      	bcc.n	80022fe <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800230a:	4a0a      	ldr	r2, [pc, #40]	; (8002334 <LoopForever+0x12>)
  ldr r4, =_ebss
 800230c:	4c0a      	ldr	r4, [pc, #40]	; (8002338 <LoopForever+0x16>)
  movs r3, #0
 800230e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002310:	e001      	b.n	8002316 <LoopFillZerobss>

08002312 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002312:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002314:	3204      	adds	r2, #4

08002316 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002316:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002318:	d3fb      	bcc.n	8002312 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800231a:	f000 fedf 	bl	80030dc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800231e:	f7fe fc7f 	bl	8000c20 <main>

08002322 <LoopForever>:

LoopForever:
  b LoopForever
 8002322:	e7fe      	b.n	8002322 <LoopForever>
  ldr   r0, =_estack
 8002324:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8002328:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800232c:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8002330:	0800549c 	.word	0x0800549c
  ldr r2, =_sbss
 8002334:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8002338:	200003dc 	.word	0x200003dc

0800233c <ADC1_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800233c:	e7fe      	b.n	800233c <ADC1_IRQHandler>

0800233e <__cvt>:
 800233e:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002342:	ec55 4b10 	vmov	r4, r5, d0
 8002346:	2d00      	cmp	r5, #0
 8002348:	460e      	mov	r6, r1
 800234a:	4619      	mov	r1, r3
 800234c:	462b      	mov	r3, r5
 800234e:	bfb4      	ite	lt
 8002350:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8002354:	2300      	movge	r3, #0
 8002356:	4691      	mov	r9, r2
 8002358:	bfbf      	itttt	lt
 800235a:	4622      	movlt	r2, r4
 800235c:	461d      	movlt	r5, r3
 800235e:	232d      	movlt	r3, #45	; 0x2d
 8002360:	4614      	movlt	r4, r2
 8002362:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8002366:	700b      	strb	r3, [r1, #0]
 8002368:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800236a:	f023 0820 	bic.w	r8, r3, #32
 800236e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8002372:	d005      	beq.n	8002380 <__cvt+0x42>
 8002374:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8002378:	d100      	bne.n	800237c <__cvt+0x3e>
 800237a:	3601      	adds	r6, #1
 800237c:	2102      	movs	r1, #2
 800237e:	e000      	b.n	8002382 <__cvt+0x44>
 8002380:	2103      	movs	r1, #3
 8002382:	ab03      	add	r3, sp, #12
 8002384:	4632      	mov	r2, r6
 8002386:	9301      	str	r3, [sp, #4]
 8002388:	ab02      	add	r3, sp, #8
 800238a:	ec45 4b10 	vmov	d0, r4, r5
 800238e:	9300      	str	r3, [sp, #0]
 8002390:	4653      	mov	r3, sl
 8002392:	f000 ff69 	bl	8003268 <_dtoa_r>
 8002396:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800239a:	4607      	mov	r7, r0
 800239c:	d102      	bne.n	80023a4 <__cvt+0x66>
 800239e:	f019 0f01 	tst.w	r9, #1
 80023a2:	d022      	beq.n	80023ea <__cvt+0xac>
 80023a4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80023a8:	eb07 0906 	add.w	r9, r7, r6
 80023ac:	d110      	bne.n	80023d0 <__cvt+0x92>
 80023ae:	783b      	ldrb	r3, [r7, #0]
 80023b0:	2b30      	cmp	r3, #48	; 0x30
 80023b2:	d10a      	bne.n	80023ca <__cvt+0x8c>
 80023b4:	2200      	movs	r2, #0
 80023b6:	2300      	movs	r3, #0
 80023b8:	4620      	mov	r0, r4
 80023ba:	4629      	mov	r1, r5
 80023bc:	f7fe fb98 	bl	8000af0 <__aeabi_dcmpeq>
 80023c0:	b918      	cbnz	r0, 80023ca <__cvt+0x8c>
 80023c2:	f1c6 0601 	rsb	r6, r6, #1
 80023c6:	f8ca 6000 	str.w	r6, [sl]
 80023ca:	f8da 3000 	ldr.w	r3, [sl]
 80023ce:	4499      	add	r9, r3
 80023d0:	2200      	movs	r2, #0
 80023d2:	2300      	movs	r3, #0
 80023d4:	4620      	mov	r0, r4
 80023d6:	4629      	mov	r1, r5
 80023d8:	f7fe fb8a 	bl	8000af0 <__aeabi_dcmpeq>
 80023dc:	b108      	cbz	r0, 80023e2 <__cvt+0xa4>
 80023de:	f8cd 900c 	str.w	r9, [sp, #12]
 80023e2:	2230      	movs	r2, #48	; 0x30
 80023e4:	9b03      	ldr	r3, [sp, #12]
 80023e6:	454b      	cmp	r3, r9
 80023e8:	d307      	bcc.n	80023fa <__cvt+0xbc>
 80023ea:	9b03      	ldr	r3, [sp, #12]
 80023ec:	4638      	mov	r0, r7
 80023ee:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80023f0:	1bdb      	subs	r3, r3, r7
 80023f2:	6013      	str	r3, [r2, #0]
 80023f4:	b004      	add	sp, #16
 80023f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80023fa:	1c59      	adds	r1, r3, #1
 80023fc:	9103      	str	r1, [sp, #12]
 80023fe:	701a      	strb	r2, [r3, #0]
 8002400:	e7f0      	b.n	80023e4 <__cvt+0xa6>

08002402 <__exponent>:
 8002402:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002404:	2900      	cmp	r1, #0
 8002406:	4603      	mov	r3, r0
 8002408:	bfb8      	it	lt
 800240a:	4249      	neglt	r1, r1
 800240c:	f803 2b02 	strb.w	r2, [r3], #2
 8002410:	bfb4      	ite	lt
 8002412:	222d      	movlt	r2, #45	; 0x2d
 8002414:	222b      	movge	r2, #43	; 0x2b
 8002416:	2909      	cmp	r1, #9
 8002418:	7042      	strb	r2, [r0, #1]
 800241a:	dd29      	ble.n	8002470 <__exponent+0x6e>
 800241c:	f10d 0207 	add.w	r2, sp, #7
 8002420:	260a      	movs	r6, #10
 8002422:	4617      	mov	r7, r2
 8002424:	4694      	mov	ip, r2
 8002426:	3a01      	subs	r2, #1
 8002428:	fb91 f5f6 	sdiv	r5, r1, r6
 800242c:	fb06 1415 	mls	r4, r6, r5, r1
 8002430:	3430      	adds	r4, #48	; 0x30
 8002432:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8002436:	460c      	mov	r4, r1
 8002438:	4629      	mov	r1, r5
 800243a:	2c63      	cmp	r4, #99	; 0x63
 800243c:	dcf2      	bgt.n	8002424 <__exponent+0x22>
 800243e:	3130      	adds	r1, #48	; 0x30
 8002440:	f1ac 0402 	sub.w	r4, ip, #2
 8002444:	f802 1c01 	strb.w	r1, [r2, #-1]
 8002448:	1c41      	adds	r1, r0, #1
 800244a:	4622      	mov	r2, r4
 800244c:	42ba      	cmp	r2, r7
 800244e:	d30a      	bcc.n	8002466 <__exponent+0x64>
 8002450:	f10d 0209 	add.w	r2, sp, #9
 8002454:	eba2 020c 	sub.w	r2, r2, ip
 8002458:	42bc      	cmp	r4, r7
 800245a:	bf88      	it	hi
 800245c:	2200      	movhi	r2, #0
 800245e:	4413      	add	r3, r2
 8002460:	1a18      	subs	r0, r3, r0
 8002462:	b003      	add	sp, #12
 8002464:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002466:	f812 5b01 	ldrb.w	r5, [r2], #1
 800246a:	f801 5f01 	strb.w	r5, [r1, #1]!
 800246e:	e7ed      	b.n	800244c <__exponent+0x4a>
 8002470:	2330      	movs	r3, #48	; 0x30
 8002472:	3130      	adds	r1, #48	; 0x30
 8002474:	7083      	strb	r3, [r0, #2]
 8002476:	1d03      	adds	r3, r0, #4
 8002478:	70c1      	strb	r1, [r0, #3]
 800247a:	e7f1      	b.n	8002460 <__exponent+0x5e>

0800247c <_printf_float>:
 800247c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002480:	ed2d 8b02 	vpush	{d8}
 8002484:	b08d      	sub	sp, #52	; 0x34
 8002486:	460c      	mov	r4, r1
 8002488:	4616      	mov	r6, r2
 800248a:	461f      	mov	r7, r3
 800248c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8002490:	4605      	mov	r5, r0
 8002492:	f000 fdd3 	bl	800303c <_localeconv_r>
 8002496:	f8d0 a000 	ldr.w	sl, [r0]
 800249a:	4650      	mov	r0, sl
 800249c:	f7fd fefc 	bl	8000298 <strlen>
 80024a0:	2300      	movs	r3, #0
 80024a2:	f894 b018 	ldrb.w	fp, [r4, #24]
 80024a6:	ee08 0a10 	vmov	s16, r0
 80024aa:	930a      	str	r3, [sp, #40]	; 0x28
 80024ac:	6823      	ldr	r3, [r4, #0]
 80024ae:	9305      	str	r3, [sp, #20]
 80024b0:	f8d8 3000 	ldr.w	r3, [r8]
 80024b4:	3307      	adds	r3, #7
 80024b6:	f023 0307 	bic.w	r3, r3, #7
 80024ba:	f103 0208 	add.w	r2, r3, #8
 80024be:	f8c8 2000 	str.w	r2, [r8]
 80024c2:	f04f 32ff 	mov.w	r2, #4294967295
 80024c6:	e9d3 8900 	ldrd	r8, r9, [r3]
 80024ca:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80024ce:	f8cd 8018 	str.w	r8, [sp, #24]
 80024d2:	9307      	str	r3, [sp, #28]
 80024d4:	4b9f      	ldr	r3, [pc, #636]	; (8002754 <_printf_float+0x2d8>)
 80024d6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80024da:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 80024de:	f7fe fb39 	bl	8000b54 <__aeabi_dcmpun>
 80024e2:	bb88      	cbnz	r0, 8002548 <_printf_float+0xcc>
 80024e4:	f04f 32ff 	mov.w	r2, #4294967295
 80024e8:	4b9a      	ldr	r3, [pc, #616]	; (8002754 <_printf_float+0x2d8>)
 80024ea:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80024ee:	f7fe fb13 	bl	8000b18 <__aeabi_dcmple>
 80024f2:	bb48      	cbnz	r0, 8002548 <_printf_float+0xcc>
 80024f4:	2200      	movs	r2, #0
 80024f6:	2300      	movs	r3, #0
 80024f8:	4640      	mov	r0, r8
 80024fa:	4649      	mov	r1, r9
 80024fc:	f7fe fb02 	bl	8000b04 <__aeabi_dcmplt>
 8002500:	b110      	cbz	r0, 8002508 <_printf_float+0x8c>
 8002502:	232d      	movs	r3, #45	; 0x2d
 8002504:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002508:	4a93      	ldr	r2, [pc, #588]	; (8002758 <_printf_float+0x2dc>)
 800250a:	4b94      	ldr	r3, [pc, #592]	; (800275c <_printf_float+0x2e0>)
 800250c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8002510:	bf94      	ite	ls
 8002512:	4690      	movls	r8, r2
 8002514:	4698      	movhi	r8, r3
 8002516:	2303      	movs	r3, #3
 8002518:	f04f 0900 	mov.w	r9, #0
 800251c:	6123      	str	r3, [r4, #16]
 800251e:	9b05      	ldr	r3, [sp, #20]
 8002520:	f023 0304 	bic.w	r3, r3, #4
 8002524:	6023      	str	r3, [r4, #0]
 8002526:	4633      	mov	r3, r6
 8002528:	aa0b      	add	r2, sp, #44	; 0x2c
 800252a:	4621      	mov	r1, r4
 800252c:	4628      	mov	r0, r5
 800252e:	9700      	str	r7, [sp, #0]
 8002530:	f000 f9da 	bl	80028e8 <_printf_common>
 8002534:	3001      	adds	r0, #1
 8002536:	f040 8090 	bne.w	800265a <_printf_float+0x1de>
 800253a:	f04f 30ff 	mov.w	r0, #4294967295
 800253e:	b00d      	add	sp, #52	; 0x34
 8002540:	ecbd 8b02 	vpop	{d8}
 8002544:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002548:	4642      	mov	r2, r8
 800254a:	464b      	mov	r3, r9
 800254c:	4640      	mov	r0, r8
 800254e:	4649      	mov	r1, r9
 8002550:	f7fe fb00 	bl	8000b54 <__aeabi_dcmpun>
 8002554:	b140      	cbz	r0, 8002568 <_printf_float+0xec>
 8002556:	464b      	mov	r3, r9
 8002558:	4a81      	ldr	r2, [pc, #516]	; (8002760 <_printf_float+0x2e4>)
 800255a:	2b00      	cmp	r3, #0
 800255c:	bfbc      	itt	lt
 800255e:	232d      	movlt	r3, #45	; 0x2d
 8002560:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8002564:	4b7f      	ldr	r3, [pc, #508]	; (8002764 <_printf_float+0x2e8>)
 8002566:	e7d1      	b.n	800250c <_printf_float+0x90>
 8002568:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800256c:	6863      	ldr	r3, [r4, #4]
 800256e:	9206      	str	r2, [sp, #24]
 8002570:	1c5a      	adds	r2, r3, #1
 8002572:	d13f      	bne.n	80025f4 <_printf_float+0x178>
 8002574:	2306      	movs	r3, #6
 8002576:	6063      	str	r3, [r4, #4]
 8002578:	9b05      	ldr	r3, [sp, #20]
 800257a:	4628      	mov	r0, r5
 800257c:	6861      	ldr	r1, [r4, #4]
 800257e:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8002582:	2300      	movs	r3, #0
 8002584:	9303      	str	r3, [sp, #12]
 8002586:	ab0a      	add	r3, sp, #40	; 0x28
 8002588:	6022      	str	r2, [r4, #0]
 800258a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800258e:	ab09      	add	r3, sp, #36	; 0x24
 8002590:	ec49 8b10 	vmov	d0, r8, r9
 8002594:	9300      	str	r3, [sp, #0]
 8002596:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800259a:	f7ff fed0 	bl	800233e <__cvt>
 800259e:	9b06      	ldr	r3, [sp, #24]
 80025a0:	4680      	mov	r8, r0
 80025a2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80025a4:	2b47      	cmp	r3, #71	; 0x47
 80025a6:	d108      	bne.n	80025ba <_printf_float+0x13e>
 80025a8:	1cc8      	adds	r0, r1, #3
 80025aa:	db02      	blt.n	80025b2 <_printf_float+0x136>
 80025ac:	6863      	ldr	r3, [r4, #4]
 80025ae:	4299      	cmp	r1, r3
 80025b0:	dd41      	ble.n	8002636 <_printf_float+0x1ba>
 80025b2:	f1ab 0302 	sub.w	r3, fp, #2
 80025b6:	fa5f fb83 	uxtb.w	fp, r3
 80025ba:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80025be:	d820      	bhi.n	8002602 <_printf_float+0x186>
 80025c0:	3901      	subs	r1, #1
 80025c2:	465a      	mov	r2, fp
 80025c4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80025c8:	9109      	str	r1, [sp, #36]	; 0x24
 80025ca:	f7ff ff1a 	bl	8002402 <__exponent>
 80025ce:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80025d0:	4681      	mov	r9, r0
 80025d2:	1813      	adds	r3, r2, r0
 80025d4:	2a01      	cmp	r2, #1
 80025d6:	6123      	str	r3, [r4, #16]
 80025d8:	dc02      	bgt.n	80025e0 <_printf_float+0x164>
 80025da:	6822      	ldr	r2, [r4, #0]
 80025dc:	07d2      	lsls	r2, r2, #31
 80025de:	d501      	bpl.n	80025e4 <_printf_float+0x168>
 80025e0:	3301      	adds	r3, #1
 80025e2:	6123      	str	r3, [r4, #16]
 80025e4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d09c      	beq.n	8002526 <_printf_float+0xaa>
 80025ec:	232d      	movs	r3, #45	; 0x2d
 80025ee:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80025f2:	e798      	b.n	8002526 <_printf_float+0xaa>
 80025f4:	9a06      	ldr	r2, [sp, #24]
 80025f6:	2a47      	cmp	r2, #71	; 0x47
 80025f8:	d1be      	bne.n	8002578 <_printf_float+0xfc>
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d1bc      	bne.n	8002578 <_printf_float+0xfc>
 80025fe:	2301      	movs	r3, #1
 8002600:	e7b9      	b.n	8002576 <_printf_float+0xfa>
 8002602:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8002606:	d118      	bne.n	800263a <_printf_float+0x1be>
 8002608:	2900      	cmp	r1, #0
 800260a:	6863      	ldr	r3, [r4, #4]
 800260c:	dd0b      	ble.n	8002626 <_printf_float+0x1aa>
 800260e:	6121      	str	r1, [r4, #16]
 8002610:	b913      	cbnz	r3, 8002618 <_printf_float+0x19c>
 8002612:	6822      	ldr	r2, [r4, #0]
 8002614:	07d0      	lsls	r0, r2, #31
 8002616:	d502      	bpl.n	800261e <_printf_float+0x1a2>
 8002618:	3301      	adds	r3, #1
 800261a:	440b      	add	r3, r1
 800261c:	6123      	str	r3, [r4, #16]
 800261e:	f04f 0900 	mov.w	r9, #0
 8002622:	65a1      	str	r1, [r4, #88]	; 0x58
 8002624:	e7de      	b.n	80025e4 <_printf_float+0x168>
 8002626:	b913      	cbnz	r3, 800262e <_printf_float+0x1b2>
 8002628:	6822      	ldr	r2, [r4, #0]
 800262a:	07d2      	lsls	r2, r2, #31
 800262c:	d501      	bpl.n	8002632 <_printf_float+0x1b6>
 800262e:	3302      	adds	r3, #2
 8002630:	e7f4      	b.n	800261c <_printf_float+0x1a0>
 8002632:	2301      	movs	r3, #1
 8002634:	e7f2      	b.n	800261c <_printf_float+0x1a0>
 8002636:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800263a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800263c:	4299      	cmp	r1, r3
 800263e:	db05      	blt.n	800264c <_printf_float+0x1d0>
 8002640:	6823      	ldr	r3, [r4, #0]
 8002642:	6121      	str	r1, [r4, #16]
 8002644:	07d8      	lsls	r0, r3, #31
 8002646:	d5ea      	bpl.n	800261e <_printf_float+0x1a2>
 8002648:	1c4b      	adds	r3, r1, #1
 800264a:	e7e7      	b.n	800261c <_printf_float+0x1a0>
 800264c:	2900      	cmp	r1, #0
 800264e:	bfd4      	ite	le
 8002650:	f1c1 0202 	rsble	r2, r1, #2
 8002654:	2201      	movgt	r2, #1
 8002656:	4413      	add	r3, r2
 8002658:	e7e0      	b.n	800261c <_printf_float+0x1a0>
 800265a:	6823      	ldr	r3, [r4, #0]
 800265c:	055a      	lsls	r2, r3, #21
 800265e:	d407      	bmi.n	8002670 <_printf_float+0x1f4>
 8002660:	6923      	ldr	r3, [r4, #16]
 8002662:	4642      	mov	r2, r8
 8002664:	4631      	mov	r1, r6
 8002666:	4628      	mov	r0, r5
 8002668:	47b8      	blx	r7
 800266a:	3001      	adds	r0, #1
 800266c:	d12c      	bne.n	80026c8 <_printf_float+0x24c>
 800266e:	e764      	b.n	800253a <_printf_float+0xbe>
 8002670:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8002674:	f240 80e0 	bls.w	8002838 <_printf_float+0x3bc>
 8002678:	2200      	movs	r2, #0
 800267a:	2300      	movs	r3, #0
 800267c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8002680:	f7fe fa36 	bl	8000af0 <__aeabi_dcmpeq>
 8002684:	2800      	cmp	r0, #0
 8002686:	d034      	beq.n	80026f2 <_printf_float+0x276>
 8002688:	2301      	movs	r3, #1
 800268a:	4a37      	ldr	r2, [pc, #220]	; (8002768 <_printf_float+0x2ec>)
 800268c:	4631      	mov	r1, r6
 800268e:	4628      	mov	r0, r5
 8002690:	47b8      	blx	r7
 8002692:	3001      	adds	r0, #1
 8002694:	f43f af51 	beq.w	800253a <_printf_float+0xbe>
 8002698:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800269c:	429a      	cmp	r2, r3
 800269e:	db02      	blt.n	80026a6 <_printf_float+0x22a>
 80026a0:	6823      	ldr	r3, [r4, #0]
 80026a2:	07d8      	lsls	r0, r3, #31
 80026a4:	d510      	bpl.n	80026c8 <_printf_float+0x24c>
 80026a6:	ee18 3a10 	vmov	r3, s16
 80026aa:	4652      	mov	r2, sl
 80026ac:	4631      	mov	r1, r6
 80026ae:	4628      	mov	r0, r5
 80026b0:	47b8      	blx	r7
 80026b2:	3001      	adds	r0, #1
 80026b4:	f43f af41 	beq.w	800253a <_printf_float+0xbe>
 80026b8:	f04f 0800 	mov.w	r8, #0
 80026bc:	f104 091a 	add.w	r9, r4, #26
 80026c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80026c2:	3b01      	subs	r3, #1
 80026c4:	4543      	cmp	r3, r8
 80026c6:	dc09      	bgt.n	80026dc <_printf_float+0x260>
 80026c8:	6823      	ldr	r3, [r4, #0]
 80026ca:	079b      	lsls	r3, r3, #30
 80026cc:	f100 8107 	bmi.w	80028de <_printf_float+0x462>
 80026d0:	68e0      	ldr	r0, [r4, #12]
 80026d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80026d4:	4298      	cmp	r0, r3
 80026d6:	bfb8      	it	lt
 80026d8:	4618      	movlt	r0, r3
 80026da:	e730      	b.n	800253e <_printf_float+0xc2>
 80026dc:	2301      	movs	r3, #1
 80026de:	464a      	mov	r2, r9
 80026e0:	4631      	mov	r1, r6
 80026e2:	4628      	mov	r0, r5
 80026e4:	47b8      	blx	r7
 80026e6:	3001      	adds	r0, #1
 80026e8:	f43f af27 	beq.w	800253a <_printf_float+0xbe>
 80026ec:	f108 0801 	add.w	r8, r8, #1
 80026f0:	e7e6      	b.n	80026c0 <_printf_float+0x244>
 80026f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	dc39      	bgt.n	800276c <_printf_float+0x2f0>
 80026f8:	2301      	movs	r3, #1
 80026fa:	4a1b      	ldr	r2, [pc, #108]	; (8002768 <_printf_float+0x2ec>)
 80026fc:	4631      	mov	r1, r6
 80026fe:	4628      	mov	r0, r5
 8002700:	47b8      	blx	r7
 8002702:	3001      	adds	r0, #1
 8002704:	f43f af19 	beq.w	800253a <_printf_float+0xbe>
 8002708:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800270c:	4313      	orrs	r3, r2
 800270e:	d102      	bne.n	8002716 <_printf_float+0x29a>
 8002710:	6823      	ldr	r3, [r4, #0]
 8002712:	07d9      	lsls	r1, r3, #31
 8002714:	d5d8      	bpl.n	80026c8 <_printf_float+0x24c>
 8002716:	ee18 3a10 	vmov	r3, s16
 800271a:	4652      	mov	r2, sl
 800271c:	4631      	mov	r1, r6
 800271e:	4628      	mov	r0, r5
 8002720:	47b8      	blx	r7
 8002722:	3001      	adds	r0, #1
 8002724:	f43f af09 	beq.w	800253a <_printf_float+0xbe>
 8002728:	f04f 0900 	mov.w	r9, #0
 800272c:	f104 0a1a 	add.w	sl, r4, #26
 8002730:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002732:	425b      	negs	r3, r3
 8002734:	454b      	cmp	r3, r9
 8002736:	dc01      	bgt.n	800273c <_printf_float+0x2c0>
 8002738:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800273a:	e792      	b.n	8002662 <_printf_float+0x1e6>
 800273c:	2301      	movs	r3, #1
 800273e:	4652      	mov	r2, sl
 8002740:	4631      	mov	r1, r6
 8002742:	4628      	mov	r0, r5
 8002744:	47b8      	blx	r7
 8002746:	3001      	adds	r0, #1
 8002748:	f43f aef7 	beq.w	800253a <_printf_float+0xbe>
 800274c:	f109 0901 	add.w	r9, r9, #1
 8002750:	e7ee      	b.n	8002730 <_printf_float+0x2b4>
 8002752:	bf00      	nop
 8002754:	7fefffff 	.word	0x7fefffff
 8002758:	08005124 	.word	0x08005124
 800275c:	08005128 	.word	0x08005128
 8002760:	0800512c 	.word	0x0800512c
 8002764:	08005130 	.word	0x08005130
 8002768:	08005134 	.word	0x08005134
 800276c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800276e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002770:	429a      	cmp	r2, r3
 8002772:	bfa8      	it	ge
 8002774:	461a      	movge	r2, r3
 8002776:	2a00      	cmp	r2, #0
 8002778:	4691      	mov	r9, r2
 800277a:	dc37      	bgt.n	80027ec <_printf_float+0x370>
 800277c:	f04f 0b00 	mov.w	fp, #0
 8002780:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8002784:	f104 021a 	add.w	r2, r4, #26
 8002788:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800278a:	9305      	str	r3, [sp, #20]
 800278c:	eba3 0309 	sub.w	r3, r3, r9
 8002790:	455b      	cmp	r3, fp
 8002792:	dc33      	bgt.n	80027fc <_printf_float+0x380>
 8002794:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8002798:	429a      	cmp	r2, r3
 800279a:	db3b      	blt.n	8002814 <_printf_float+0x398>
 800279c:	6823      	ldr	r3, [r4, #0]
 800279e:	07da      	lsls	r2, r3, #31
 80027a0:	d438      	bmi.n	8002814 <_printf_float+0x398>
 80027a2:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80027a6:	eba2 0903 	sub.w	r9, r2, r3
 80027aa:	9b05      	ldr	r3, [sp, #20]
 80027ac:	1ad2      	subs	r2, r2, r3
 80027ae:	4591      	cmp	r9, r2
 80027b0:	bfa8      	it	ge
 80027b2:	4691      	movge	r9, r2
 80027b4:	f1b9 0f00 	cmp.w	r9, #0
 80027b8:	dc35      	bgt.n	8002826 <_printf_float+0x3aa>
 80027ba:	f04f 0800 	mov.w	r8, #0
 80027be:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80027c2:	f104 0a1a 	add.w	sl, r4, #26
 80027c6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80027ca:	1a9b      	subs	r3, r3, r2
 80027cc:	eba3 0309 	sub.w	r3, r3, r9
 80027d0:	4543      	cmp	r3, r8
 80027d2:	f77f af79 	ble.w	80026c8 <_printf_float+0x24c>
 80027d6:	2301      	movs	r3, #1
 80027d8:	4652      	mov	r2, sl
 80027da:	4631      	mov	r1, r6
 80027dc:	4628      	mov	r0, r5
 80027de:	47b8      	blx	r7
 80027e0:	3001      	adds	r0, #1
 80027e2:	f43f aeaa 	beq.w	800253a <_printf_float+0xbe>
 80027e6:	f108 0801 	add.w	r8, r8, #1
 80027ea:	e7ec      	b.n	80027c6 <_printf_float+0x34a>
 80027ec:	4613      	mov	r3, r2
 80027ee:	4631      	mov	r1, r6
 80027f0:	4642      	mov	r2, r8
 80027f2:	4628      	mov	r0, r5
 80027f4:	47b8      	blx	r7
 80027f6:	3001      	adds	r0, #1
 80027f8:	d1c0      	bne.n	800277c <_printf_float+0x300>
 80027fa:	e69e      	b.n	800253a <_printf_float+0xbe>
 80027fc:	2301      	movs	r3, #1
 80027fe:	4631      	mov	r1, r6
 8002800:	4628      	mov	r0, r5
 8002802:	9205      	str	r2, [sp, #20]
 8002804:	47b8      	blx	r7
 8002806:	3001      	adds	r0, #1
 8002808:	f43f ae97 	beq.w	800253a <_printf_float+0xbe>
 800280c:	f10b 0b01 	add.w	fp, fp, #1
 8002810:	9a05      	ldr	r2, [sp, #20]
 8002812:	e7b9      	b.n	8002788 <_printf_float+0x30c>
 8002814:	ee18 3a10 	vmov	r3, s16
 8002818:	4652      	mov	r2, sl
 800281a:	4631      	mov	r1, r6
 800281c:	4628      	mov	r0, r5
 800281e:	47b8      	blx	r7
 8002820:	3001      	adds	r0, #1
 8002822:	d1be      	bne.n	80027a2 <_printf_float+0x326>
 8002824:	e689      	b.n	800253a <_printf_float+0xbe>
 8002826:	9a05      	ldr	r2, [sp, #20]
 8002828:	464b      	mov	r3, r9
 800282a:	4631      	mov	r1, r6
 800282c:	4628      	mov	r0, r5
 800282e:	4442      	add	r2, r8
 8002830:	47b8      	blx	r7
 8002832:	3001      	adds	r0, #1
 8002834:	d1c1      	bne.n	80027ba <_printf_float+0x33e>
 8002836:	e680      	b.n	800253a <_printf_float+0xbe>
 8002838:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800283a:	2a01      	cmp	r2, #1
 800283c:	dc01      	bgt.n	8002842 <_printf_float+0x3c6>
 800283e:	07db      	lsls	r3, r3, #31
 8002840:	d53a      	bpl.n	80028b8 <_printf_float+0x43c>
 8002842:	2301      	movs	r3, #1
 8002844:	4642      	mov	r2, r8
 8002846:	4631      	mov	r1, r6
 8002848:	4628      	mov	r0, r5
 800284a:	47b8      	blx	r7
 800284c:	3001      	adds	r0, #1
 800284e:	f43f ae74 	beq.w	800253a <_printf_float+0xbe>
 8002852:	ee18 3a10 	vmov	r3, s16
 8002856:	4652      	mov	r2, sl
 8002858:	4631      	mov	r1, r6
 800285a:	4628      	mov	r0, r5
 800285c:	47b8      	blx	r7
 800285e:	3001      	adds	r0, #1
 8002860:	f43f ae6b 	beq.w	800253a <_printf_float+0xbe>
 8002864:	2200      	movs	r2, #0
 8002866:	2300      	movs	r3, #0
 8002868:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800286c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8002870:	f7fe f93e 	bl	8000af0 <__aeabi_dcmpeq>
 8002874:	b9d8      	cbnz	r0, 80028ae <_printf_float+0x432>
 8002876:	f10a 33ff 	add.w	r3, sl, #4294967295
 800287a:	f108 0201 	add.w	r2, r8, #1
 800287e:	4631      	mov	r1, r6
 8002880:	4628      	mov	r0, r5
 8002882:	47b8      	blx	r7
 8002884:	3001      	adds	r0, #1
 8002886:	d10e      	bne.n	80028a6 <_printf_float+0x42a>
 8002888:	e657      	b.n	800253a <_printf_float+0xbe>
 800288a:	2301      	movs	r3, #1
 800288c:	4652      	mov	r2, sl
 800288e:	4631      	mov	r1, r6
 8002890:	4628      	mov	r0, r5
 8002892:	47b8      	blx	r7
 8002894:	3001      	adds	r0, #1
 8002896:	f43f ae50 	beq.w	800253a <_printf_float+0xbe>
 800289a:	f108 0801 	add.w	r8, r8, #1
 800289e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80028a0:	3b01      	subs	r3, #1
 80028a2:	4543      	cmp	r3, r8
 80028a4:	dcf1      	bgt.n	800288a <_printf_float+0x40e>
 80028a6:	464b      	mov	r3, r9
 80028a8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80028ac:	e6da      	b.n	8002664 <_printf_float+0x1e8>
 80028ae:	f04f 0800 	mov.w	r8, #0
 80028b2:	f104 0a1a 	add.w	sl, r4, #26
 80028b6:	e7f2      	b.n	800289e <_printf_float+0x422>
 80028b8:	2301      	movs	r3, #1
 80028ba:	4642      	mov	r2, r8
 80028bc:	e7df      	b.n	800287e <_printf_float+0x402>
 80028be:	2301      	movs	r3, #1
 80028c0:	464a      	mov	r2, r9
 80028c2:	4631      	mov	r1, r6
 80028c4:	4628      	mov	r0, r5
 80028c6:	47b8      	blx	r7
 80028c8:	3001      	adds	r0, #1
 80028ca:	f43f ae36 	beq.w	800253a <_printf_float+0xbe>
 80028ce:	f108 0801 	add.w	r8, r8, #1
 80028d2:	68e3      	ldr	r3, [r4, #12]
 80028d4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80028d6:	1a5b      	subs	r3, r3, r1
 80028d8:	4543      	cmp	r3, r8
 80028da:	dcf0      	bgt.n	80028be <_printf_float+0x442>
 80028dc:	e6f8      	b.n	80026d0 <_printf_float+0x254>
 80028de:	f04f 0800 	mov.w	r8, #0
 80028e2:	f104 0919 	add.w	r9, r4, #25
 80028e6:	e7f4      	b.n	80028d2 <_printf_float+0x456>

080028e8 <_printf_common>:
 80028e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80028ec:	4616      	mov	r6, r2
 80028ee:	4699      	mov	r9, r3
 80028f0:	688a      	ldr	r2, [r1, #8]
 80028f2:	4607      	mov	r7, r0
 80028f4:	690b      	ldr	r3, [r1, #16]
 80028f6:	460c      	mov	r4, r1
 80028f8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80028fc:	4293      	cmp	r3, r2
 80028fe:	bfb8      	it	lt
 8002900:	4613      	movlt	r3, r2
 8002902:	6033      	str	r3, [r6, #0]
 8002904:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002908:	b10a      	cbz	r2, 800290e <_printf_common+0x26>
 800290a:	3301      	adds	r3, #1
 800290c:	6033      	str	r3, [r6, #0]
 800290e:	6823      	ldr	r3, [r4, #0]
 8002910:	0699      	lsls	r1, r3, #26
 8002912:	bf42      	ittt	mi
 8002914:	6833      	ldrmi	r3, [r6, #0]
 8002916:	3302      	addmi	r3, #2
 8002918:	6033      	strmi	r3, [r6, #0]
 800291a:	6825      	ldr	r5, [r4, #0]
 800291c:	f015 0506 	ands.w	r5, r5, #6
 8002920:	d106      	bne.n	8002930 <_printf_common+0x48>
 8002922:	f104 0a19 	add.w	sl, r4, #25
 8002926:	68e3      	ldr	r3, [r4, #12]
 8002928:	6832      	ldr	r2, [r6, #0]
 800292a:	1a9b      	subs	r3, r3, r2
 800292c:	42ab      	cmp	r3, r5
 800292e:	dc2b      	bgt.n	8002988 <_printf_common+0xa0>
 8002930:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002934:	1e13      	subs	r3, r2, #0
 8002936:	6822      	ldr	r2, [r4, #0]
 8002938:	bf18      	it	ne
 800293a:	2301      	movne	r3, #1
 800293c:	0692      	lsls	r2, r2, #26
 800293e:	d430      	bmi.n	80029a2 <_printf_common+0xba>
 8002940:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002944:	4649      	mov	r1, r9
 8002946:	4638      	mov	r0, r7
 8002948:	47c0      	blx	r8
 800294a:	3001      	adds	r0, #1
 800294c:	d023      	beq.n	8002996 <_printf_common+0xae>
 800294e:	6823      	ldr	r3, [r4, #0]
 8002950:	341a      	adds	r4, #26
 8002952:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 8002956:	f003 0306 	and.w	r3, r3, #6
 800295a:	2b04      	cmp	r3, #4
 800295c:	bf0a      	itet	eq
 800295e:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 8002962:	2500      	movne	r5, #0
 8002964:	6833      	ldreq	r3, [r6, #0]
 8002966:	f04f 0600 	mov.w	r6, #0
 800296a:	bf08      	it	eq
 800296c:	1aed      	subeq	r5, r5, r3
 800296e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8002972:	bf08      	it	eq
 8002974:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002978:	4293      	cmp	r3, r2
 800297a:	bfc4      	itt	gt
 800297c:	1a9b      	subgt	r3, r3, r2
 800297e:	18ed      	addgt	r5, r5, r3
 8002980:	42b5      	cmp	r5, r6
 8002982:	d11a      	bne.n	80029ba <_printf_common+0xd2>
 8002984:	2000      	movs	r0, #0
 8002986:	e008      	b.n	800299a <_printf_common+0xb2>
 8002988:	2301      	movs	r3, #1
 800298a:	4652      	mov	r2, sl
 800298c:	4649      	mov	r1, r9
 800298e:	4638      	mov	r0, r7
 8002990:	47c0      	blx	r8
 8002992:	3001      	adds	r0, #1
 8002994:	d103      	bne.n	800299e <_printf_common+0xb6>
 8002996:	f04f 30ff 	mov.w	r0, #4294967295
 800299a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800299e:	3501      	adds	r5, #1
 80029a0:	e7c1      	b.n	8002926 <_printf_common+0x3e>
 80029a2:	18e1      	adds	r1, r4, r3
 80029a4:	1c5a      	adds	r2, r3, #1
 80029a6:	2030      	movs	r0, #48	; 0x30
 80029a8:	3302      	adds	r3, #2
 80029aa:	4422      	add	r2, r4
 80029ac:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80029b0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80029b4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80029b8:	e7c2      	b.n	8002940 <_printf_common+0x58>
 80029ba:	2301      	movs	r3, #1
 80029bc:	4622      	mov	r2, r4
 80029be:	4649      	mov	r1, r9
 80029c0:	4638      	mov	r0, r7
 80029c2:	47c0      	blx	r8
 80029c4:	3001      	adds	r0, #1
 80029c6:	d0e6      	beq.n	8002996 <_printf_common+0xae>
 80029c8:	3601      	adds	r6, #1
 80029ca:	e7d9      	b.n	8002980 <_printf_common+0x98>

080029cc <_printf_i>:
 80029cc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80029d0:	7e0f      	ldrb	r7, [r1, #24]
 80029d2:	4691      	mov	r9, r2
 80029d4:	4680      	mov	r8, r0
 80029d6:	460c      	mov	r4, r1
 80029d8:	2f78      	cmp	r7, #120	; 0x78
 80029da:	469a      	mov	sl, r3
 80029dc:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80029de:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80029e2:	d807      	bhi.n	80029f4 <_printf_i+0x28>
 80029e4:	2f62      	cmp	r7, #98	; 0x62
 80029e6:	d80a      	bhi.n	80029fe <_printf_i+0x32>
 80029e8:	2f00      	cmp	r7, #0
 80029ea:	f000 80d3 	beq.w	8002b94 <_printf_i+0x1c8>
 80029ee:	2f58      	cmp	r7, #88	; 0x58
 80029f0:	f000 80bf 	beq.w	8002b72 <_printf_i+0x1a6>
 80029f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80029f8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80029fc:	e03a      	b.n	8002a74 <_printf_i+0xa8>
 80029fe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002a02:	2b15      	cmp	r3, #21
 8002a04:	d8f6      	bhi.n	80029f4 <_printf_i+0x28>
 8002a06:	a101      	add	r1, pc, #4	; (adr r1, 8002a0c <_printf_i+0x40>)
 8002a08:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002a0c:	08002a65 	.word	0x08002a65
 8002a10:	08002a79 	.word	0x08002a79
 8002a14:	080029f5 	.word	0x080029f5
 8002a18:	080029f5 	.word	0x080029f5
 8002a1c:	080029f5 	.word	0x080029f5
 8002a20:	080029f5 	.word	0x080029f5
 8002a24:	08002a79 	.word	0x08002a79
 8002a28:	080029f5 	.word	0x080029f5
 8002a2c:	080029f5 	.word	0x080029f5
 8002a30:	080029f5 	.word	0x080029f5
 8002a34:	080029f5 	.word	0x080029f5
 8002a38:	08002b7b 	.word	0x08002b7b
 8002a3c:	08002aa5 	.word	0x08002aa5
 8002a40:	08002b37 	.word	0x08002b37
 8002a44:	080029f5 	.word	0x080029f5
 8002a48:	080029f5 	.word	0x080029f5
 8002a4c:	08002b9d 	.word	0x08002b9d
 8002a50:	080029f5 	.word	0x080029f5
 8002a54:	08002aa5 	.word	0x08002aa5
 8002a58:	080029f5 	.word	0x080029f5
 8002a5c:	080029f5 	.word	0x080029f5
 8002a60:	08002b3f 	.word	0x08002b3f
 8002a64:	682b      	ldr	r3, [r5, #0]
 8002a66:	1d1a      	adds	r2, r3, #4
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	602a      	str	r2, [r5, #0]
 8002a6c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002a70:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002a74:	2301      	movs	r3, #1
 8002a76:	e09e      	b.n	8002bb6 <_printf_i+0x1ea>
 8002a78:	6820      	ldr	r0, [r4, #0]
 8002a7a:	682b      	ldr	r3, [r5, #0]
 8002a7c:	0607      	lsls	r7, r0, #24
 8002a7e:	f103 0104 	add.w	r1, r3, #4
 8002a82:	6029      	str	r1, [r5, #0]
 8002a84:	d501      	bpl.n	8002a8a <_printf_i+0xbe>
 8002a86:	681e      	ldr	r6, [r3, #0]
 8002a88:	e003      	b.n	8002a92 <_printf_i+0xc6>
 8002a8a:	0646      	lsls	r6, r0, #25
 8002a8c:	d5fb      	bpl.n	8002a86 <_printf_i+0xba>
 8002a8e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8002a92:	2e00      	cmp	r6, #0
 8002a94:	da03      	bge.n	8002a9e <_printf_i+0xd2>
 8002a96:	232d      	movs	r3, #45	; 0x2d
 8002a98:	4276      	negs	r6, r6
 8002a9a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002a9e:	4859      	ldr	r0, [pc, #356]	; (8002c04 <_printf_i+0x238>)
 8002aa0:	230a      	movs	r3, #10
 8002aa2:	e012      	b.n	8002aca <_printf_i+0xfe>
 8002aa4:	682b      	ldr	r3, [r5, #0]
 8002aa6:	6820      	ldr	r0, [r4, #0]
 8002aa8:	1d19      	adds	r1, r3, #4
 8002aaa:	6029      	str	r1, [r5, #0]
 8002aac:	0605      	lsls	r5, r0, #24
 8002aae:	d501      	bpl.n	8002ab4 <_printf_i+0xe8>
 8002ab0:	681e      	ldr	r6, [r3, #0]
 8002ab2:	e002      	b.n	8002aba <_printf_i+0xee>
 8002ab4:	0641      	lsls	r1, r0, #25
 8002ab6:	d5fb      	bpl.n	8002ab0 <_printf_i+0xe4>
 8002ab8:	881e      	ldrh	r6, [r3, #0]
 8002aba:	2f6f      	cmp	r7, #111	; 0x6f
 8002abc:	4851      	ldr	r0, [pc, #324]	; (8002c04 <_printf_i+0x238>)
 8002abe:	bf0c      	ite	eq
 8002ac0:	2308      	moveq	r3, #8
 8002ac2:	230a      	movne	r3, #10
 8002ac4:	2100      	movs	r1, #0
 8002ac6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002aca:	6865      	ldr	r5, [r4, #4]
 8002acc:	2d00      	cmp	r5, #0
 8002ace:	60a5      	str	r5, [r4, #8]
 8002ad0:	bfa2      	ittt	ge
 8002ad2:	6821      	ldrge	r1, [r4, #0]
 8002ad4:	f021 0104 	bicge.w	r1, r1, #4
 8002ad8:	6021      	strge	r1, [r4, #0]
 8002ada:	b90e      	cbnz	r6, 8002ae0 <_printf_i+0x114>
 8002adc:	2d00      	cmp	r5, #0
 8002ade:	d04a      	beq.n	8002b76 <_printf_i+0x1aa>
 8002ae0:	4615      	mov	r5, r2
 8002ae2:	fbb6 f1f3 	udiv	r1, r6, r3
 8002ae6:	fb03 6711 	mls	r7, r3, r1, r6
 8002aea:	5dc7      	ldrb	r7, [r0, r7]
 8002aec:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8002af0:	4637      	mov	r7, r6
 8002af2:	460e      	mov	r6, r1
 8002af4:	42bb      	cmp	r3, r7
 8002af6:	d9f4      	bls.n	8002ae2 <_printf_i+0x116>
 8002af8:	2b08      	cmp	r3, #8
 8002afa:	d10b      	bne.n	8002b14 <_printf_i+0x148>
 8002afc:	6823      	ldr	r3, [r4, #0]
 8002afe:	07de      	lsls	r6, r3, #31
 8002b00:	d508      	bpl.n	8002b14 <_printf_i+0x148>
 8002b02:	6923      	ldr	r3, [r4, #16]
 8002b04:	6861      	ldr	r1, [r4, #4]
 8002b06:	4299      	cmp	r1, r3
 8002b08:	bfde      	ittt	le
 8002b0a:	2330      	movle	r3, #48	; 0x30
 8002b0c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002b10:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002b14:	1b52      	subs	r2, r2, r5
 8002b16:	6122      	str	r2, [r4, #16]
 8002b18:	464b      	mov	r3, r9
 8002b1a:	aa03      	add	r2, sp, #12
 8002b1c:	4621      	mov	r1, r4
 8002b1e:	4640      	mov	r0, r8
 8002b20:	f8cd a000 	str.w	sl, [sp]
 8002b24:	f7ff fee0 	bl	80028e8 <_printf_common>
 8002b28:	3001      	adds	r0, #1
 8002b2a:	d149      	bne.n	8002bc0 <_printf_i+0x1f4>
 8002b2c:	f04f 30ff 	mov.w	r0, #4294967295
 8002b30:	b004      	add	sp, #16
 8002b32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002b36:	6823      	ldr	r3, [r4, #0]
 8002b38:	f043 0320 	orr.w	r3, r3, #32
 8002b3c:	6023      	str	r3, [r4, #0]
 8002b3e:	2778      	movs	r7, #120	; 0x78
 8002b40:	4831      	ldr	r0, [pc, #196]	; (8002c08 <_printf_i+0x23c>)
 8002b42:	6823      	ldr	r3, [r4, #0]
 8002b44:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8002b48:	061f      	lsls	r7, r3, #24
 8002b4a:	6829      	ldr	r1, [r5, #0]
 8002b4c:	f851 6b04 	ldr.w	r6, [r1], #4
 8002b50:	d402      	bmi.n	8002b58 <_printf_i+0x18c>
 8002b52:	065f      	lsls	r7, r3, #25
 8002b54:	bf48      	it	mi
 8002b56:	b2b6      	uxthmi	r6, r6
 8002b58:	07df      	lsls	r7, r3, #31
 8002b5a:	6029      	str	r1, [r5, #0]
 8002b5c:	bf44      	itt	mi
 8002b5e:	f043 0320 	orrmi.w	r3, r3, #32
 8002b62:	6023      	strmi	r3, [r4, #0]
 8002b64:	b91e      	cbnz	r6, 8002b6e <_printf_i+0x1a2>
 8002b66:	6823      	ldr	r3, [r4, #0]
 8002b68:	f023 0320 	bic.w	r3, r3, #32
 8002b6c:	6023      	str	r3, [r4, #0]
 8002b6e:	2310      	movs	r3, #16
 8002b70:	e7a8      	b.n	8002ac4 <_printf_i+0xf8>
 8002b72:	4824      	ldr	r0, [pc, #144]	; (8002c04 <_printf_i+0x238>)
 8002b74:	e7e5      	b.n	8002b42 <_printf_i+0x176>
 8002b76:	4615      	mov	r5, r2
 8002b78:	e7be      	b.n	8002af8 <_printf_i+0x12c>
 8002b7a:	682b      	ldr	r3, [r5, #0]
 8002b7c:	6826      	ldr	r6, [r4, #0]
 8002b7e:	1d18      	adds	r0, r3, #4
 8002b80:	6961      	ldr	r1, [r4, #20]
 8002b82:	6028      	str	r0, [r5, #0]
 8002b84:	0635      	lsls	r5, r6, #24
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	d501      	bpl.n	8002b8e <_printf_i+0x1c2>
 8002b8a:	6019      	str	r1, [r3, #0]
 8002b8c:	e002      	b.n	8002b94 <_printf_i+0x1c8>
 8002b8e:	0670      	lsls	r0, r6, #25
 8002b90:	d5fb      	bpl.n	8002b8a <_printf_i+0x1be>
 8002b92:	8019      	strh	r1, [r3, #0]
 8002b94:	2300      	movs	r3, #0
 8002b96:	4615      	mov	r5, r2
 8002b98:	6123      	str	r3, [r4, #16]
 8002b9a:	e7bd      	b.n	8002b18 <_printf_i+0x14c>
 8002b9c:	682b      	ldr	r3, [r5, #0]
 8002b9e:	2100      	movs	r1, #0
 8002ba0:	1d1a      	adds	r2, r3, #4
 8002ba2:	602a      	str	r2, [r5, #0]
 8002ba4:	681d      	ldr	r5, [r3, #0]
 8002ba6:	6862      	ldr	r2, [r4, #4]
 8002ba8:	4628      	mov	r0, r5
 8002baa:	f000 fabe 	bl	800312a <memchr>
 8002bae:	b108      	cbz	r0, 8002bb4 <_printf_i+0x1e8>
 8002bb0:	1b40      	subs	r0, r0, r5
 8002bb2:	6060      	str	r0, [r4, #4]
 8002bb4:	6863      	ldr	r3, [r4, #4]
 8002bb6:	6123      	str	r3, [r4, #16]
 8002bb8:	2300      	movs	r3, #0
 8002bba:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002bbe:	e7ab      	b.n	8002b18 <_printf_i+0x14c>
 8002bc0:	6923      	ldr	r3, [r4, #16]
 8002bc2:	462a      	mov	r2, r5
 8002bc4:	4649      	mov	r1, r9
 8002bc6:	4640      	mov	r0, r8
 8002bc8:	47d0      	blx	sl
 8002bca:	3001      	adds	r0, #1
 8002bcc:	d0ae      	beq.n	8002b2c <_printf_i+0x160>
 8002bce:	6823      	ldr	r3, [r4, #0]
 8002bd0:	079b      	lsls	r3, r3, #30
 8002bd2:	d413      	bmi.n	8002bfc <_printf_i+0x230>
 8002bd4:	68e0      	ldr	r0, [r4, #12]
 8002bd6:	9b03      	ldr	r3, [sp, #12]
 8002bd8:	4298      	cmp	r0, r3
 8002bda:	bfb8      	it	lt
 8002bdc:	4618      	movlt	r0, r3
 8002bde:	e7a7      	b.n	8002b30 <_printf_i+0x164>
 8002be0:	2301      	movs	r3, #1
 8002be2:	4632      	mov	r2, r6
 8002be4:	4649      	mov	r1, r9
 8002be6:	4640      	mov	r0, r8
 8002be8:	47d0      	blx	sl
 8002bea:	3001      	adds	r0, #1
 8002bec:	d09e      	beq.n	8002b2c <_printf_i+0x160>
 8002bee:	3501      	adds	r5, #1
 8002bf0:	68e3      	ldr	r3, [r4, #12]
 8002bf2:	9903      	ldr	r1, [sp, #12]
 8002bf4:	1a5b      	subs	r3, r3, r1
 8002bf6:	42ab      	cmp	r3, r5
 8002bf8:	dcf2      	bgt.n	8002be0 <_printf_i+0x214>
 8002bfa:	e7eb      	b.n	8002bd4 <_printf_i+0x208>
 8002bfc:	2500      	movs	r5, #0
 8002bfe:	f104 0619 	add.w	r6, r4, #25
 8002c02:	e7f5      	b.n	8002bf0 <_printf_i+0x224>
 8002c04:	08005136 	.word	0x08005136
 8002c08:	08005147 	.word	0x08005147

08002c0c <std>:
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	b510      	push	{r4, lr}
 8002c10:	4604      	mov	r4, r0
 8002c12:	6083      	str	r3, [r0, #8]
 8002c14:	8181      	strh	r1, [r0, #12]
 8002c16:	4619      	mov	r1, r3
 8002c18:	6643      	str	r3, [r0, #100]	; 0x64
 8002c1a:	81c2      	strh	r2, [r0, #14]
 8002c1c:	2208      	movs	r2, #8
 8002c1e:	6183      	str	r3, [r0, #24]
 8002c20:	e9c0 3300 	strd	r3, r3, [r0]
 8002c24:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002c28:	305c      	adds	r0, #92	; 0x5c
 8002c2a:	f000 f9ff 	bl	800302c <memset>
 8002c2e:	4b0d      	ldr	r3, [pc, #52]	; (8002c64 <std+0x58>)
 8002c30:	6224      	str	r4, [r4, #32]
 8002c32:	6263      	str	r3, [r4, #36]	; 0x24
 8002c34:	4b0c      	ldr	r3, [pc, #48]	; (8002c68 <std+0x5c>)
 8002c36:	62a3      	str	r3, [r4, #40]	; 0x28
 8002c38:	4b0c      	ldr	r3, [pc, #48]	; (8002c6c <std+0x60>)
 8002c3a:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002c3c:	4b0c      	ldr	r3, [pc, #48]	; (8002c70 <std+0x64>)
 8002c3e:	6323      	str	r3, [r4, #48]	; 0x30
 8002c40:	4b0c      	ldr	r3, [pc, #48]	; (8002c74 <std+0x68>)
 8002c42:	429c      	cmp	r4, r3
 8002c44:	d006      	beq.n	8002c54 <std+0x48>
 8002c46:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8002c4a:	4294      	cmp	r4, r2
 8002c4c:	d002      	beq.n	8002c54 <std+0x48>
 8002c4e:	33d0      	adds	r3, #208	; 0xd0
 8002c50:	429c      	cmp	r4, r3
 8002c52:	d105      	bne.n	8002c60 <std+0x54>
 8002c54:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8002c58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002c5c:	f000 ba62 	b.w	8003124 <__retarget_lock_init_recursive>
 8002c60:	bd10      	pop	{r4, pc}
 8002c62:	bf00      	nop
 8002c64:	08002e7d 	.word	0x08002e7d
 8002c68:	08002e9f 	.word	0x08002e9f
 8002c6c:	08002ed7 	.word	0x08002ed7
 8002c70:	08002efb 	.word	0x08002efb
 8002c74:	20000290 	.word	0x20000290

08002c78 <stdio_exit_handler>:
 8002c78:	4a02      	ldr	r2, [pc, #8]	; (8002c84 <stdio_exit_handler+0xc>)
 8002c7a:	4903      	ldr	r1, [pc, #12]	; (8002c88 <stdio_exit_handler+0x10>)
 8002c7c:	4803      	ldr	r0, [pc, #12]	; (8002c8c <stdio_exit_handler+0x14>)
 8002c7e:	f000 b869 	b.w	8002d54 <_fwalk_sglue>
 8002c82:	bf00      	nop
 8002c84:	2000000c 	.word	0x2000000c
 8002c88:	08004ae1 	.word	0x08004ae1
 8002c8c:	20000018 	.word	0x20000018

08002c90 <cleanup_stdio>:
 8002c90:	6841      	ldr	r1, [r0, #4]
 8002c92:	4b0c      	ldr	r3, [pc, #48]	; (8002cc4 <cleanup_stdio+0x34>)
 8002c94:	4299      	cmp	r1, r3
 8002c96:	b510      	push	{r4, lr}
 8002c98:	4604      	mov	r4, r0
 8002c9a:	d001      	beq.n	8002ca0 <cleanup_stdio+0x10>
 8002c9c:	f001 ff20 	bl	8004ae0 <_fflush_r>
 8002ca0:	68a1      	ldr	r1, [r4, #8]
 8002ca2:	4b09      	ldr	r3, [pc, #36]	; (8002cc8 <cleanup_stdio+0x38>)
 8002ca4:	4299      	cmp	r1, r3
 8002ca6:	d002      	beq.n	8002cae <cleanup_stdio+0x1e>
 8002ca8:	4620      	mov	r0, r4
 8002caa:	f001 ff19 	bl	8004ae0 <_fflush_r>
 8002cae:	68e1      	ldr	r1, [r4, #12]
 8002cb0:	4b06      	ldr	r3, [pc, #24]	; (8002ccc <cleanup_stdio+0x3c>)
 8002cb2:	4299      	cmp	r1, r3
 8002cb4:	d004      	beq.n	8002cc0 <cleanup_stdio+0x30>
 8002cb6:	4620      	mov	r0, r4
 8002cb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002cbc:	f001 bf10 	b.w	8004ae0 <_fflush_r>
 8002cc0:	bd10      	pop	{r4, pc}
 8002cc2:	bf00      	nop
 8002cc4:	20000290 	.word	0x20000290
 8002cc8:	200002f8 	.word	0x200002f8
 8002ccc:	20000360 	.word	0x20000360

08002cd0 <global_stdio_init.part.0>:
 8002cd0:	b510      	push	{r4, lr}
 8002cd2:	4b0b      	ldr	r3, [pc, #44]	; (8002d00 <global_stdio_init.part.0+0x30>)
 8002cd4:	2104      	movs	r1, #4
 8002cd6:	4c0b      	ldr	r4, [pc, #44]	; (8002d04 <global_stdio_init.part.0+0x34>)
 8002cd8:	4a0b      	ldr	r2, [pc, #44]	; (8002d08 <global_stdio_init.part.0+0x38>)
 8002cda:	4620      	mov	r0, r4
 8002cdc:	601a      	str	r2, [r3, #0]
 8002cde:	2200      	movs	r2, #0
 8002ce0:	f7ff ff94 	bl	8002c0c <std>
 8002ce4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8002ce8:	2201      	movs	r2, #1
 8002cea:	2109      	movs	r1, #9
 8002cec:	f7ff ff8e 	bl	8002c0c <std>
 8002cf0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8002cf4:	2202      	movs	r2, #2
 8002cf6:	2112      	movs	r1, #18
 8002cf8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002cfc:	f7ff bf86 	b.w	8002c0c <std>
 8002d00:	200003c8 	.word	0x200003c8
 8002d04:	20000290 	.word	0x20000290
 8002d08:	08002c79 	.word	0x08002c79

08002d0c <__sfp_lock_acquire>:
 8002d0c:	4801      	ldr	r0, [pc, #4]	; (8002d14 <__sfp_lock_acquire+0x8>)
 8002d0e:	f000 ba0a 	b.w	8003126 <__retarget_lock_acquire_recursive>
 8002d12:	bf00      	nop
 8002d14:	200003d1 	.word	0x200003d1

08002d18 <__sfp_lock_release>:
 8002d18:	4801      	ldr	r0, [pc, #4]	; (8002d20 <__sfp_lock_release+0x8>)
 8002d1a:	f000 ba05 	b.w	8003128 <__retarget_lock_release_recursive>
 8002d1e:	bf00      	nop
 8002d20:	200003d1 	.word	0x200003d1

08002d24 <__sinit>:
 8002d24:	b510      	push	{r4, lr}
 8002d26:	4604      	mov	r4, r0
 8002d28:	f7ff fff0 	bl	8002d0c <__sfp_lock_acquire>
 8002d2c:	6a23      	ldr	r3, [r4, #32]
 8002d2e:	b11b      	cbz	r3, 8002d38 <__sinit+0x14>
 8002d30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002d34:	f7ff bff0 	b.w	8002d18 <__sfp_lock_release>
 8002d38:	4b04      	ldr	r3, [pc, #16]	; (8002d4c <__sinit+0x28>)
 8002d3a:	6223      	str	r3, [r4, #32]
 8002d3c:	4b04      	ldr	r3, [pc, #16]	; (8002d50 <__sinit+0x2c>)
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d1f5      	bne.n	8002d30 <__sinit+0xc>
 8002d44:	f7ff ffc4 	bl	8002cd0 <global_stdio_init.part.0>
 8002d48:	e7f2      	b.n	8002d30 <__sinit+0xc>
 8002d4a:	bf00      	nop
 8002d4c:	08002c91 	.word	0x08002c91
 8002d50:	200003c8 	.word	0x200003c8

08002d54 <_fwalk_sglue>:
 8002d54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002d58:	4607      	mov	r7, r0
 8002d5a:	4688      	mov	r8, r1
 8002d5c:	4614      	mov	r4, r2
 8002d5e:	2600      	movs	r6, #0
 8002d60:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002d64:	f1b9 0901 	subs.w	r9, r9, #1
 8002d68:	d505      	bpl.n	8002d76 <_fwalk_sglue+0x22>
 8002d6a:	6824      	ldr	r4, [r4, #0]
 8002d6c:	2c00      	cmp	r4, #0
 8002d6e:	d1f7      	bne.n	8002d60 <_fwalk_sglue+0xc>
 8002d70:	4630      	mov	r0, r6
 8002d72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002d76:	89ab      	ldrh	r3, [r5, #12]
 8002d78:	2b01      	cmp	r3, #1
 8002d7a:	d907      	bls.n	8002d8c <_fwalk_sglue+0x38>
 8002d7c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002d80:	3301      	adds	r3, #1
 8002d82:	d003      	beq.n	8002d8c <_fwalk_sglue+0x38>
 8002d84:	4629      	mov	r1, r5
 8002d86:	4638      	mov	r0, r7
 8002d88:	47c0      	blx	r8
 8002d8a:	4306      	orrs	r6, r0
 8002d8c:	3568      	adds	r5, #104	; 0x68
 8002d8e:	e7e9      	b.n	8002d64 <_fwalk_sglue+0x10>

08002d90 <iprintf>:
 8002d90:	b40f      	push	{r0, r1, r2, r3}
 8002d92:	b507      	push	{r0, r1, r2, lr}
 8002d94:	4906      	ldr	r1, [pc, #24]	; (8002db0 <iprintf+0x20>)
 8002d96:	ab04      	add	r3, sp, #16
 8002d98:	6808      	ldr	r0, [r1, #0]
 8002d9a:	f853 2b04 	ldr.w	r2, [r3], #4
 8002d9e:	6881      	ldr	r1, [r0, #8]
 8002da0:	9301      	str	r3, [sp, #4]
 8002da2:	f001 fcff 	bl	80047a4 <_vfiprintf_r>
 8002da6:	b003      	add	sp, #12
 8002da8:	f85d eb04 	ldr.w	lr, [sp], #4
 8002dac:	b004      	add	sp, #16
 8002dae:	4770      	bx	lr
 8002db0:	20000064 	.word	0x20000064

08002db4 <putchar>:
 8002db4:	4b02      	ldr	r3, [pc, #8]	; (8002dc0 <putchar+0xc>)
 8002db6:	4601      	mov	r1, r0
 8002db8:	6818      	ldr	r0, [r3, #0]
 8002dba:	6882      	ldr	r2, [r0, #8]
 8002dbc:	f001 bf19 	b.w	8004bf2 <_putc_r>
 8002dc0:	20000064 	.word	0x20000064

08002dc4 <_puts_r>:
 8002dc4:	6a03      	ldr	r3, [r0, #32]
 8002dc6:	b570      	push	{r4, r5, r6, lr}
 8002dc8:	4605      	mov	r5, r0
 8002dca:	460e      	mov	r6, r1
 8002dcc:	6884      	ldr	r4, [r0, #8]
 8002dce:	b90b      	cbnz	r3, 8002dd4 <_puts_r+0x10>
 8002dd0:	f7ff ffa8 	bl	8002d24 <__sinit>
 8002dd4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002dd6:	07db      	lsls	r3, r3, #31
 8002dd8:	d405      	bmi.n	8002de6 <_puts_r+0x22>
 8002dda:	89a3      	ldrh	r3, [r4, #12]
 8002ddc:	0598      	lsls	r0, r3, #22
 8002dde:	d402      	bmi.n	8002de6 <_puts_r+0x22>
 8002de0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002de2:	f000 f9a0 	bl	8003126 <__retarget_lock_acquire_recursive>
 8002de6:	89a3      	ldrh	r3, [r4, #12]
 8002de8:	0719      	lsls	r1, r3, #28
 8002dea:	d513      	bpl.n	8002e14 <_puts_r+0x50>
 8002dec:	6923      	ldr	r3, [r4, #16]
 8002dee:	b18b      	cbz	r3, 8002e14 <_puts_r+0x50>
 8002df0:	3e01      	subs	r6, #1
 8002df2:	68a3      	ldr	r3, [r4, #8]
 8002df4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8002df8:	3b01      	subs	r3, #1
 8002dfa:	60a3      	str	r3, [r4, #8]
 8002dfc:	b9e9      	cbnz	r1, 8002e3a <_puts_r+0x76>
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	da2e      	bge.n	8002e60 <_puts_r+0x9c>
 8002e02:	4622      	mov	r2, r4
 8002e04:	210a      	movs	r1, #10
 8002e06:	4628      	mov	r0, r5
 8002e08:	f000 f87b 	bl	8002f02 <__swbuf_r>
 8002e0c:	3001      	adds	r0, #1
 8002e0e:	d007      	beq.n	8002e20 <_puts_r+0x5c>
 8002e10:	250a      	movs	r5, #10
 8002e12:	e007      	b.n	8002e24 <_puts_r+0x60>
 8002e14:	4621      	mov	r1, r4
 8002e16:	4628      	mov	r0, r5
 8002e18:	f000 f8b0 	bl	8002f7c <__swsetup_r>
 8002e1c:	2800      	cmp	r0, #0
 8002e1e:	d0e7      	beq.n	8002df0 <_puts_r+0x2c>
 8002e20:	f04f 35ff 	mov.w	r5, #4294967295
 8002e24:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002e26:	07da      	lsls	r2, r3, #31
 8002e28:	d405      	bmi.n	8002e36 <_puts_r+0x72>
 8002e2a:	89a3      	ldrh	r3, [r4, #12]
 8002e2c:	059b      	lsls	r3, r3, #22
 8002e2e:	d402      	bmi.n	8002e36 <_puts_r+0x72>
 8002e30:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002e32:	f000 f979 	bl	8003128 <__retarget_lock_release_recursive>
 8002e36:	4628      	mov	r0, r5
 8002e38:	bd70      	pop	{r4, r5, r6, pc}
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	da04      	bge.n	8002e48 <_puts_r+0x84>
 8002e3e:	69a2      	ldr	r2, [r4, #24]
 8002e40:	429a      	cmp	r2, r3
 8002e42:	dc06      	bgt.n	8002e52 <_puts_r+0x8e>
 8002e44:	290a      	cmp	r1, #10
 8002e46:	d004      	beq.n	8002e52 <_puts_r+0x8e>
 8002e48:	6823      	ldr	r3, [r4, #0]
 8002e4a:	1c5a      	adds	r2, r3, #1
 8002e4c:	6022      	str	r2, [r4, #0]
 8002e4e:	7019      	strb	r1, [r3, #0]
 8002e50:	e7cf      	b.n	8002df2 <_puts_r+0x2e>
 8002e52:	4622      	mov	r2, r4
 8002e54:	4628      	mov	r0, r5
 8002e56:	f000 f854 	bl	8002f02 <__swbuf_r>
 8002e5a:	3001      	adds	r0, #1
 8002e5c:	d1c9      	bne.n	8002df2 <_puts_r+0x2e>
 8002e5e:	e7df      	b.n	8002e20 <_puts_r+0x5c>
 8002e60:	6823      	ldr	r3, [r4, #0]
 8002e62:	250a      	movs	r5, #10
 8002e64:	1c5a      	adds	r2, r3, #1
 8002e66:	6022      	str	r2, [r4, #0]
 8002e68:	701d      	strb	r5, [r3, #0]
 8002e6a:	e7db      	b.n	8002e24 <_puts_r+0x60>

08002e6c <puts>:
 8002e6c:	4b02      	ldr	r3, [pc, #8]	; (8002e78 <puts+0xc>)
 8002e6e:	4601      	mov	r1, r0
 8002e70:	6818      	ldr	r0, [r3, #0]
 8002e72:	f7ff bfa7 	b.w	8002dc4 <_puts_r>
 8002e76:	bf00      	nop
 8002e78:	20000064 	.word	0x20000064

08002e7c <__sread>:
 8002e7c:	b510      	push	{r4, lr}
 8002e7e:	460c      	mov	r4, r1
 8002e80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002e84:	f000 f900 	bl	8003088 <_read_r>
 8002e88:	2800      	cmp	r0, #0
 8002e8a:	bfab      	itete	ge
 8002e8c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8002e8e:	89a3      	ldrhlt	r3, [r4, #12]
 8002e90:	181b      	addge	r3, r3, r0
 8002e92:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8002e96:	bfac      	ite	ge
 8002e98:	6563      	strge	r3, [r4, #84]	; 0x54
 8002e9a:	81a3      	strhlt	r3, [r4, #12]
 8002e9c:	bd10      	pop	{r4, pc}

08002e9e <__swrite>:
 8002e9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002ea2:	461f      	mov	r7, r3
 8002ea4:	898b      	ldrh	r3, [r1, #12]
 8002ea6:	4605      	mov	r5, r0
 8002ea8:	460c      	mov	r4, r1
 8002eaa:	05db      	lsls	r3, r3, #23
 8002eac:	4616      	mov	r6, r2
 8002eae:	d505      	bpl.n	8002ebc <__swrite+0x1e>
 8002eb0:	2302      	movs	r3, #2
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002eb8:	f000 f8d4 	bl	8003064 <_lseek_r>
 8002ebc:	89a3      	ldrh	r3, [r4, #12]
 8002ebe:	4632      	mov	r2, r6
 8002ec0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002ec4:	4628      	mov	r0, r5
 8002ec6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002eca:	81a3      	strh	r3, [r4, #12]
 8002ecc:	463b      	mov	r3, r7
 8002ece:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002ed2:	f000 b8eb 	b.w	80030ac <_write_r>

08002ed6 <__sseek>:
 8002ed6:	b510      	push	{r4, lr}
 8002ed8:	460c      	mov	r4, r1
 8002eda:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002ede:	f000 f8c1 	bl	8003064 <_lseek_r>
 8002ee2:	1c43      	adds	r3, r0, #1
 8002ee4:	89a3      	ldrh	r3, [r4, #12]
 8002ee6:	bf15      	itete	ne
 8002ee8:	6560      	strne	r0, [r4, #84]	; 0x54
 8002eea:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8002eee:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8002ef2:	81a3      	strheq	r3, [r4, #12]
 8002ef4:	bf18      	it	ne
 8002ef6:	81a3      	strhne	r3, [r4, #12]
 8002ef8:	bd10      	pop	{r4, pc}

08002efa <__sclose>:
 8002efa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002efe:	f000 b8a1 	b.w	8003044 <_close_r>

08002f02 <__swbuf_r>:
 8002f02:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f04:	460e      	mov	r6, r1
 8002f06:	4614      	mov	r4, r2
 8002f08:	4605      	mov	r5, r0
 8002f0a:	b118      	cbz	r0, 8002f14 <__swbuf_r+0x12>
 8002f0c:	6a03      	ldr	r3, [r0, #32]
 8002f0e:	b90b      	cbnz	r3, 8002f14 <__swbuf_r+0x12>
 8002f10:	f7ff ff08 	bl	8002d24 <__sinit>
 8002f14:	69a3      	ldr	r3, [r4, #24]
 8002f16:	60a3      	str	r3, [r4, #8]
 8002f18:	89a3      	ldrh	r3, [r4, #12]
 8002f1a:	071a      	lsls	r2, r3, #28
 8002f1c:	d525      	bpl.n	8002f6a <__swbuf_r+0x68>
 8002f1e:	6923      	ldr	r3, [r4, #16]
 8002f20:	b31b      	cbz	r3, 8002f6a <__swbuf_r+0x68>
 8002f22:	6823      	ldr	r3, [r4, #0]
 8002f24:	b2f6      	uxtb	r6, r6
 8002f26:	6922      	ldr	r2, [r4, #16]
 8002f28:	4637      	mov	r7, r6
 8002f2a:	1a98      	subs	r0, r3, r2
 8002f2c:	6963      	ldr	r3, [r4, #20]
 8002f2e:	4283      	cmp	r3, r0
 8002f30:	dc04      	bgt.n	8002f3c <__swbuf_r+0x3a>
 8002f32:	4621      	mov	r1, r4
 8002f34:	4628      	mov	r0, r5
 8002f36:	f001 fdd3 	bl	8004ae0 <_fflush_r>
 8002f3a:	b9e0      	cbnz	r0, 8002f76 <__swbuf_r+0x74>
 8002f3c:	68a3      	ldr	r3, [r4, #8]
 8002f3e:	3b01      	subs	r3, #1
 8002f40:	60a3      	str	r3, [r4, #8]
 8002f42:	6823      	ldr	r3, [r4, #0]
 8002f44:	1c5a      	adds	r2, r3, #1
 8002f46:	6022      	str	r2, [r4, #0]
 8002f48:	701e      	strb	r6, [r3, #0]
 8002f4a:	1c43      	adds	r3, r0, #1
 8002f4c:	6962      	ldr	r2, [r4, #20]
 8002f4e:	429a      	cmp	r2, r3
 8002f50:	d004      	beq.n	8002f5c <__swbuf_r+0x5a>
 8002f52:	89a3      	ldrh	r3, [r4, #12]
 8002f54:	07db      	lsls	r3, r3, #31
 8002f56:	d506      	bpl.n	8002f66 <__swbuf_r+0x64>
 8002f58:	2e0a      	cmp	r6, #10
 8002f5a:	d104      	bne.n	8002f66 <__swbuf_r+0x64>
 8002f5c:	4621      	mov	r1, r4
 8002f5e:	4628      	mov	r0, r5
 8002f60:	f001 fdbe 	bl	8004ae0 <_fflush_r>
 8002f64:	b938      	cbnz	r0, 8002f76 <__swbuf_r+0x74>
 8002f66:	4638      	mov	r0, r7
 8002f68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002f6a:	4621      	mov	r1, r4
 8002f6c:	4628      	mov	r0, r5
 8002f6e:	f000 f805 	bl	8002f7c <__swsetup_r>
 8002f72:	2800      	cmp	r0, #0
 8002f74:	d0d5      	beq.n	8002f22 <__swbuf_r+0x20>
 8002f76:	f04f 37ff 	mov.w	r7, #4294967295
 8002f7a:	e7f4      	b.n	8002f66 <__swbuf_r+0x64>

08002f7c <__swsetup_r>:
 8002f7c:	b538      	push	{r3, r4, r5, lr}
 8002f7e:	4b2a      	ldr	r3, [pc, #168]	; (8003028 <__swsetup_r+0xac>)
 8002f80:	4605      	mov	r5, r0
 8002f82:	460c      	mov	r4, r1
 8002f84:	6818      	ldr	r0, [r3, #0]
 8002f86:	b118      	cbz	r0, 8002f90 <__swsetup_r+0x14>
 8002f88:	6a03      	ldr	r3, [r0, #32]
 8002f8a:	b90b      	cbnz	r3, 8002f90 <__swsetup_r+0x14>
 8002f8c:	f7ff feca 	bl	8002d24 <__sinit>
 8002f90:	89a3      	ldrh	r3, [r4, #12]
 8002f92:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002f96:	0718      	lsls	r0, r3, #28
 8002f98:	d422      	bmi.n	8002fe0 <__swsetup_r+0x64>
 8002f9a:	06d9      	lsls	r1, r3, #27
 8002f9c:	d407      	bmi.n	8002fae <__swsetup_r+0x32>
 8002f9e:	2309      	movs	r3, #9
 8002fa0:	602b      	str	r3, [r5, #0]
 8002fa2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8002fa6:	f04f 30ff 	mov.w	r0, #4294967295
 8002faa:	81a3      	strh	r3, [r4, #12]
 8002fac:	e034      	b.n	8003018 <__swsetup_r+0x9c>
 8002fae:	0758      	lsls	r0, r3, #29
 8002fb0:	d512      	bpl.n	8002fd8 <__swsetup_r+0x5c>
 8002fb2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002fb4:	b141      	cbz	r1, 8002fc8 <__swsetup_r+0x4c>
 8002fb6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002fba:	4299      	cmp	r1, r3
 8002fbc:	d002      	beq.n	8002fc4 <__swsetup_r+0x48>
 8002fbe:	4628      	mov	r0, r5
 8002fc0:	f000 ff42 	bl	8003e48 <_free_r>
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	6363      	str	r3, [r4, #52]	; 0x34
 8002fc8:	89a3      	ldrh	r3, [r4, #12]
 8002fca:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002fce:	81a3      	strh	r3, [r4, #12]
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	6063      	str	r3, [r4, #4]
 8002fd4:	6923      	ldr	r3, [r4, #16]
 8002fd6:	6023      	str	r3, [r4, #0]
 8002fd8:	89a3      	ldrh	r3, [r4, #12]
 8002fda:	f043 0308 	orr.w	r3, r3, #8
 8002fde:	81a3      	strh	r3, [r4, #12]
 8002fe0:	6923      	ldr	r3, [r4, #16]
 8002fe2:	b94b      	cbnz	r3, 8002ff8 <__swsetup_r+0x7c>
 8002fe4:	89a3      	ldrh	r3, [r4, #12]
 8002fe6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8002fea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002fee:	d003      	beq.n	8002ff8 <__swsetup_r+0x7c>
 8002ff0:	4621      	mov	r1, r4
 8002ff2:	4628      	mov	r0, r5
 8002ff4:	f001 fdc1 	bl	8004b7a <__smakebuf_r>
 8002ff8:	89a0      	ldrh	r0, [r4, #12]
 8002ffa:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002ffe:	f010 0301 	ands.w	r3, r0, #1
 8003002:	d00a      	beq.n	800301a <__swsetup_r+0x9e>
 8003004:	2300      	movs	r3, #0
 8003006:	60a3      	str	r3, [r4, #8]
 8003008:	6963      	ldr	r3, [r4, #20]
 800300a:	425b      	negs	r3, r3
 800300c:	61a3      	str	r3, [r4, #24]
 800300e:	6923      	ldr	r3, [r4, #16]
 8003010:	b943      	cbnz	r3, 8003024 <__swsetup_r+0xa8>
 8003012:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003016:	d1c4      	bne.n	8002fa2 <__swsetup_r+0x26>
 8003018:	bd38      	pop	{r3, r4, r5, pc}
 800301a:	0781      	lsls	r1, r0, #30
 800301c:	bf58      	it	pl
 800301e:	6963      	ldrpl	r3, [r4, #20]
 8003020:	60a3      	str	r3, [r4, #8]
 8003022:	e7f4      	b.n	800300e <__swsetup_r+0x92>
 8003024:	2000      	movs	r0, #0
 8003026:	e7f7      	b.n	8003018 <__swsetup_r+0x9c>
 8003028:	20000064 	.word	0x20000064

0800302c <memset>:
 800302c:	4402      	add	r2, r0
 800302e:	4603      	mov	r3, r0
 8003030:	4293      	cmp	r3, r2
 8003032:	d100      	bne.n	8003036 <memset+0xa>
 8003034:	4770      	bx	lr
 8003036:	f803 1b01 	strb.w	r1, [r3], #1
 800303a:	e7f9      	b.n	8003030 <memset+0x4>

0800303c <_localeconv_r>:
 800303c:	4800      	ldr	r0, [pc, #0]	; (8003040 <_localeconv_r+0x4>)
 800303e:	4770      	bx	lr
 8003040:	20000158 	.word	0x20000158

08003044 <_close_r>:
 8003044:	b538      	push	{r3, r4, r5, lr}
 8003046:	2300      	movs	r3, #0
 8003048:	4d05      	ldr	r5, [pc, #20]	; (8003060 <_close_r+0x1c>)
 800304a:	4604      	mov	r4, r0
 800304c:	4608      	mov	r0, r1
 800304e:	602b      	str	r3, [r5, #0]
 8003050:	f7ff f8e2 	bl	8002218 <_close>
 8003054:	1c43      	adds	r3, r0, #1
 8003056:	d102      	bne.n	800305e <_close_r+0x1a>
 8003058:	682b      	ldr	r3, [r5, #0]
 800305a:	b103      	cbz	r3, 800305e <_close_r+0x1a>
 800305c:	6023      	str	r3, [r4, #0]
 800305e:	bd38      	pop	{r3, r4, r5, pc}
 8003060:	200003cc 	.word	0x200003cc

08003064 <_lseek_r>:
 8003064:	b538      	push	{r3, r4, r5, lr}
 8003066:	4604      	mov	r4, r0
 8003068:	4d06      	ldr	r5, [pc, #24]	; (8003084 <_lseek_r+0x20>)
 800306a:	4608      	mov	r0, r1
 800306c:	4611      	mov	r1, r2
 800306e:	2200      	movs	r2, #0
 8003070:	602a      	str	r2, [r5, #0]
 8003072:	461a      	mov	r2, r3
 8003074:	f7ff f8f7 	bl	8002266 <_lseek>
 8003078:	1c43      	adds	r3, r0, #1
 800307a:	d102      	bne.n	8003082 <_lseek_r+0x1e>
 800307c:	682b      	ldr	r3, [r5, #0]
 800307e:	b103      	cbz	r3, 8003082 <_lseek_r+0x1e>
 8003080:	6023      	str	r3, [r4, #0]
 8003082:	bd38      	pop	{r3, r4, r5, pc}
 8003084:	200003cc 	.word	0x200003cc

08003088 <_read_r>:
 8003088:	b538      	push	{r3, r4, r5, lr}
 800308a:	4604      	mov	r4, r0
 800308c:	4d06      	ldr	r5, [pc, #24]	; (80030a8 <_read_r+0x20>)
 800308e:	4608      	mov	r0, r1
 8003090:	4611      	mov	r1, r2
 8003092:	2200      	movs	r2, #0
 8003094:	602a      	str	r2, [r5, #0]
 8003096:	461a      	mov	r2, r3
 8003098:	f7ff f8a1 	bl	80021de <_read>
 800309c:	1c43      	adds	r3, r0, #1
 800309e:	d102      	bne.n	80030a6 <_read_r+0x1e>
 80030a0:	682b      	ldr	r3, [r5, #0]
 80030a2:	b103      	cbz	r3, 80030a6 <_read_r+0x1e>
 80030a4:	6023      	str	r3, [r4, #0]
 80030a6:	bd38      	pop	{r3, r4, r5, pc}
 80030a8:	200003cc 	.word	0x200003cc

080030ac <_write_r>:
 80030ac:	b538      	push	{r3, r4, r5, lr}
 80030ae:	4604      	mov	r4, r0
 80030b0:	4d06      	ldr	r5, [pc, #24]	; (80030cc <_write_r+0x20>)
 80030b2:	4608      	mov	r0, r1
 80030b4:	4611      	mov	r1, r2
 80030b6:	2200      	movs	r2, #0
 80030b8:	602a      	str	r2, [r5, #0]
 80030ba:	461a      	mov	r2, r3
 80030bc:	f7ff f851 	bl	8002162 <_write>
 80030c0:	1c43      	adds	r3, r0, #1
 80030c2:	d102      	bne.n	80030ca <_write_r+0x1e>
 80030c4:	682b      	ldr	r3, [r5, #0]
 80030c6:	b103      	cbz	r3, 80030ca <_write_r+0x1e>
 80030c8:	6023      	str	r3, [r4, #0]
 80030ca:	bd38      	pop	{r3, r4, r5, pc}
 80030cc:	200003cc 	.word	0x200003cc

080030d0 <__errno>:
 80030d0:	4b01      	ldr	r3, [pc, #4]	; (80030d8 <__errno+0x8>)
 80030d2:	6818      	ldr	r0, [r3, #0]
 80030d4:	4770      	bx	lr
 80030d6:	bf00      	nop
 80030d8:	20000064 	.word	0x20000064

080030dc <__libc_init_array>:
 80030dc:	b570      	push	{r4, r5, r6, lr}
 80030de:	4d0d      	ldr	r5, [pc, #52]	; (8003114 <__libc_init_array+0x38>)
 80030e0:	2600      	movs	r6, #0
 80030e2:	4c0d      	ldr	r4, [pc, #52]	; (8003118 <__libc_init_array+0x3c>)
 80030e4:	1b64      	subs	r4, r4, r5
 80030e6:	10a4      	asrs	r4, r4, #2
 80030e8:	42a6      	cmp	r6, r4
 80030ea:	d109      	bne.n	8003100 <__libc_init_array+0x24>
 80030ec:	4d0b      	ldr	r5, [pc, #44]	; (800311c <__libc_init_array+0x40>)
 80030ee:	2600      	movs	r6, #0
 80030f0:	4c0b      	ldr	r4, [pc, #44]	; (8003120 <__libc_init_array+0x44>)
 80030f2:	f001 fea5 	bl	8004e40 <_init>
 80030f6:	1b64      	subs	r4, r4, r5
 80030f8:	10a4      	asrs	r4, r4, #2
 80030fa:	42a6      	cmp	r6, r4
 80030fc:	d105      	bne.n	800310a <__libc_init_array+0x2e>
 80030fe:	bd70      	pop	{r4, r5, r6, pc}
 8003100:	f855 3b04 	ldr.w	r3, [r5], #4
 8003104:	3601      	adds	r6, #1
 8003106:	4798      	blx	r3
 8003108:	e7ee      	b.n	80030e8 <__libc_init_array+0xc>
 800310a:	f855 3b04 	ldr.w	r3, [r5], #4
 800310e:	3601      	adds	r6, #1
 8003110:	4798      	blx	r3
 8003112:	e7f2      	b.n	80030fa <__libc_init_array+0x1e>
 8003114:	08005494 	.word	0x08005494
 8003118:	08005494 	.word	0x08005494
 800311c:	08005494 	.word	0x08005494
 8003120:	08005498 	.word	0x08005498

08003124 <__retarget_lock_init_recursive>:
 8003124:	4770      	bx	lr

08003126 <__retarget_lock_acquire_recursive>:
 8003126:	4770      	bx	lr

08003128 <__retarget_lock_release_recursive>:
 8003128:	4770      	bx	lr

0800312a <memchr>:
 800312a:	b2c9      	uxtb	r1, r1
 800312c:	4402      	add	r2, r0
 800312e:	b510      	push	{r4, lr}
 8003130:	4290      	cmp	r0, r2
 8003132:	4603      	mov	r3, r0
 8003134:	d101      	bne.n	800313a <memchr+0x10>
 8003136:	2300      	movs	r3, #0
 8003138:	e003      	b.n	8003142 <memchr+0x18>
 800313a:	781c      	ldrb	r4, [r3, #0]
 800313c:	3001      	adds	r0, #1
 800313e:	428c      	cmp	r4, r1
 8003140:	d1f6      	bne.n	8003130 <memchr+0x6>
 8003142:	4618      	mov	r0, r3
 8003144:	bd10      	pop	{r4, pc}

08003146 <quorem>:
 8003146:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800314a:	6903      	ldr	r3, [r0, #16]
 800314c:	4607      	mov	r7, r0
 800314e:	690c      	ldr	r4, [r1, #16]
 8003150:	42a3      	cmp	r3, r4
 8003152:	f2c0 8086 	blt.w	8003262 <quorem+0x11c>
 8003156:	3c01      	subs	r4, #1
 8003158:	f100 0514 	add.w	r5, r0, #20
 800315c:	f101 0814 	add.w	r8, r1, #20
 8003160:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8003164:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8003168:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800316c:	9301      	str	r3, [sp, #4]
 800316e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8003172:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8003176:	3301      	adds	r3, #1
 8003178:	429a      	cmp	r2, r3
 800317a:	fbb2 f6f3 	udiv	r6, r2, r3
 800317e:	d335      	bcc.n	80031ec <quorem+0xa6>
 8003180:	f04f 0e00 	mov.w	lr, #0
 8003184:	4640      	mov	r0, r8
 8003186:	46ac      	mov	ip, r5
 8003188:	46f2      	mov	sl, lr
 800318a:	f850 2b04 	ldr.w	r2, [r0], #4
 800318e:	b293      	uxth	r3, r2
 8003190:	4581      	cmp	r9, r0
 8003192:	fb06 e303 	mla	r3, r6, r3, lr
 8003196:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800319a:	ea4f 4213 	mov.w	r2, r3, lsr #16
 800319e:	b29b      	uxth	r3, r3
 80031a0:	fb06 220e 	mla	r2, r6, lr, r2
 80031a4:	ebaa 0303 	sub.w	r3, sl, r3
 80031a8:	f8dc a000 	ldr.w	sl, [ip]
 80031ac:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80031b0:	fa1f fa8a 	uxth.w	sl, sl
 80031b4:	b292      	uxth	r2, r2
 80031b6:	4453      	add	r3, sl
 80031b8:	9300      	str	r3, [sp, #0]
 80031ba:	f8dc 3000 	ldr.w	r3, [ip]
 80031be:	ebc2 4213 	rsb	r2, r2, r3, lsr #16
 80031c2:	9b00      	ldr	r3, [sp, #0]
 80031c4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80031c8:	f8bd 3000 	ldrh.w	r3, [sp]
 80031cc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80031d0:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80031d4:	f84c 3b04 	str.w	r3, [ip], #4
 80031d8:	d2d7      	bcs.n	800318a <quorem+0x44>
 80031da:	f855 300b 	ldr.w	r3, [r5, fp]
 80031de:	b92b      	cbnz	r3, 80031ec <quorem+0xa6>
 80031e0:	9b01      	ldr	r3, [sp, #4]
 80031e2:	3b04      	subs	r3, #4
 80031e4:	429d      	cmp	r5, r3
 80031e6:	461a      	mov	r2, r3
 80031e8:	d32f      	bcc.n	800324a <quorem+0x104>
 80031ea:	613c      	str	r4, [r7, #16]
 80031ec:	4638      	mov	r0, r7
 80031ee:	f001 f9a9 	bl	8004544 <__mcmp>
 80031f2:	2800      	cmp	r0, #0
 80031f4:	db25      	blt.n	8003242 <quorem+0xfc>
 80031f6:	3601      	adds	r6, #1
 80031f8:	4629      	mov	r1, r5
 80031fa:	2000      	movs	r0, #0
 80031fc:	f858 2b04 	ldr.w	r2, [r8], #4
 8003200:	f8d1 c000 	ldr.w	ip, [r1]
 8003204:	b293      	uxth	r3, r2
 8003206:	45c1      	cmp	r9, r8
 8003208:	ea4f 4212 	mov.w	r2, r2, lsr #16
 800320c:	eba0 0303 	sub.w	r3, r0, r3
 8003210:	fa1f f08c 	uxth.w	r0, ip
 8003214:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8003218:	4403      	add	r3, r0
 800321a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800321e:	b29b      	uxth	r3, r3
 8003220:	ea4f 4022 	mov.w	r0, r2, asr #16
 8003224:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003228:	f841 3b04 	str.w	r3, [r1], #4
 800322c:	d2e6      	bcs.n	80031fc <quorem+0xb6>
 800322e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8003232:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8003236:	b922      	cbnz	r2, 8003242 <quorem+0xfc>
 8003238:	3b04      	subs	r3, #4
 800323a:	429d      	cmp	r5, r3
 800323c:	461a      	mov	r2, r3
 800323e:	d30a      	bcc.n	8003256 <quorem+0x110>
 8003240:	613c      	str	r4, [r7, #16]
 8003242:	4630      	mov	r0, r6
 8003244:	b003      	add	sp, #12
 8003246:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800324a:	6812      	ldr	r2, [r2, #0]
 800324c:	3b04      	subs	r3, #4
 800324e:	2a00      	cmp	r2, #0
 8003250:	d1cb      	bne.n	80031ea <quorem+0xa4>
 8003252:	3c01      	subs	r4, #1
 8003254:	e7c6      	b.n	80031e4 <quorem+0x9e>
 8003256:	6812      	ldr	r2, [r2, #0]
 8003258:	3b04      	subs	r3, #4
 800325a:	2a00      	cmp	r2, #0
 800325c:	d1f0      	bne.n	8003240 <quorem+0xfa>
 800325e:	3c01      	subs	r4, #1
 8003260:	e7eb      	b.n	800323a <quorem+0xf4>
 8003262:	2000      	movs	r0, #0
 8003264:	e7ee      	b.n	8003244 <quorem+0xfe>
	...

08003268 <_dtoa_r>:
 8003268:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800326c:	69c5      	ldr	r5, [r0, #28]
 800326e:	4604      	mov	r4, r0
 8003270:	ed2d 8b04 	vpush	{d8-d9}
 8003274:	b093      	sub	sp, #76	; 0x4c
 8003276:	ec57 6b10 	vmov	r6, r7, d0
 800327a:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800327e:	9107      	str	r1, [sp, #28]
 8003280:	920a      	str	r2, [sp, #40]	; 0x28
 8003282:	930d      	str	r3, [sp, #52]	; 0x34
 8003284:	ed8d 0b02 	vstr	d0, [sp, #8]
 8003288:	b975      	cbnz	r5, 80032a8 <_dtoa_r+0x40>
 800328a:	2010      	movs	r0, #16
 800328c:	f000 fe28 	bl	8003ee0 <malloc>
 8003290:	4602      	mov	r2, r0
 8003292:	61e0      	str	r0, [r4, #28]
 8003294:	b920      	cbnz	r0, 80032a0 <_dtoa_r+0x38>
 8003296:	4bae      	ldr	r3, [pc, #696]	; (8003550 <_dtoa_r+0x2e8>)
 8003298:	21ef      	movs	r1, #239	; 0xef
 800329a:	48ae      	ldr	r0, [pc, #696]	; (8003554 <_dtoa_r+0x2ec>)
 800329c:	f001 fd1e 	bl	8004cdc <__assert_func>
 80032a0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80032a4:	6005      	str	r5, [r0, #0]
 80032a6:	60c5      	str	r5, [r0, #12]
 80032a8:	69e3      	ldr	r3, [r4, #28]
 80032aa:	6819      	ldr	r1, [r3, #0]
 80032ac:	b151      	cbz	r1, 80032c4 <_dtoa_r+0x5c>
 80032ae:	685a      	ldr	r2, [r3, #4]
 80032b0:	2301      	movs	r3, #1
 80032b2:	4620      	mov	r0, r4
 80032b4:	4093      	lsls	r3, r2
 80032b6:	604a      	str	r2, [r1, #4]
 80032b8:	608b      	str	r3, [r1, #8]
 80032ba:	f000 ff05 	bl	80040c8 <_Bfree>
 80032be:	69e3      	ldr	r3, [r4, #28]
 80032c0:	2200      	movs	r2, #0
 80032c2:	601a      	str	r2, [r3, #0]
 80032c4:	1e3b      	subs	r3, r7, #0
 80032c6:	bfb7      	itett	lt
 80032c8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80032cc:	2300      	movge	r3, #0
 80032ce:	2201      	movlt	r2, #1
 80032d0:	9303      	strlt	r3, [sp, #12]
 80032d2:	bfac      	ite	ge
 80032d4:	f8c8 3000 	strge.w	r3, [r8]
 80032d8:	f8c8 2000 	strlt.w	r2, [r8]
 80032dc:	4b9e      	ldr	r3, [pc, #632]	; (8003558 <_dtoa_r+0x2f0>)
 80032de:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80032e2:	ea33 0308 	bics.w	r3, r3, r8
 80032e6:	d11b      	bne.n	8003320 <_dtoa_r+0xb8>
 80032e8:	f242 730f 	movw	r3, #9999	; 0x270f
 80032ec:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80032ee:	6013      	str	r3, [r2, #0]
 80032f0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 80032f4:	4333      	orrs	r3, r6
 80032f6:	f000 8592 	beq.w	8003e1e <_dtoa_r+0xbb6>
 80032fa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80032fc:	b963      	cbnz	r3, 8003318 <_dtoa_r+0xb0>
 80032fe:	4b97      	ldr	r3, [pc, #604]	; (800355c <_dtoa_r+0x2f4>)
 8003300:	e027      	b.n	8003352 <_dtoa_r+0xea>
 8003302:	4b97      	ldr	r3, [pc, #604]	; (8003560 <_dtoa_r+0x2f8>)
 8003304:	9300      	str	r3, [sp, #0]
 8003306:	3308      	adds	r3, #8
 8003308:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800330a:	6013      	str	r3, [r2, #0]
 800330c:	9800      	ldr	r0, [sp, #0]
 800330e:	b013      	add	sp, #76	; 0x4c
 8003310:	ecbd 8b04 	vpop	{d8-d9}
 8003314:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003318:	4b90      	ldr	r3, [pc, #576]	; (800355c <_dtoa_r+0x2f4>)
 800331a:	9300      	str	r3, [sp, #0]
 800331c:	3303      	adds	r3, #3
 800331e:	e7f3      	b.n	8003308 <_dtoa_r+0xa0>
 8003320:	ed9d 7b02 	vldr	d7, [sp, #8]
 8003324:	2200      	movs	r2, #0
 8003326:	2300      	movs	r3, #0
 8003328:	ec51 0b17 	vmov	r0, r1, d7
 800332c:	eeb0 8a47 	vmov.f32	s16, s14
 8003330:	eef0 8a67 	vmov.f32	s17, s15
 8003334:	f7fd fbdc 	bl	8000af0 <__aeabi_dcmpeq>
 8003338:	4681      	mov	r9, r0
 800333a:	b160      	cbz	r0, 8003356 <_dtoa_r+0xee>
 800333c:	2301      	movs	r3, #1
 800333e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8003340:	6013      	str	r3, [r2, #0]
 8003342:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003344:	2b00      	cmp	r3, #0
 8003346:	f000 8567 	beq.w	8003e18 <_dtoa_r+0xbb0>
 800334a:	4b86      	ldr	r3, [pc, #536]	; (8003564 <_dtoa_r+0x2fc>)
 800334c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800334e:	6013      	str	r3, [r2, #0]
 8003350:	3b01      	subs	r3, #1
 8003352:	9300      	str	r3, [sp, #0]
 8003354:	e7da      	b.n	800330c <_dtoa_r+0xa4>
 8003356:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800335a:	eeb0 0a48 	vmov.f32	s0, s16
 800335e:	eef0 0a68 	vmov.f32	s1, s17
 8003362:	aa10      	add	r2, sp, #64	; 0x40
 8003364:	a911      	add	r1, sp, #68	; 0x44
 8003366:	4620      	mov	r0, r4
 8003368:	f001 f998 	bl	800469c <__d2b>
 800336c:	4682      	mov	sl, r0
 800336e:	2d00      	cmp	r5, #0
 8003370:	d07d      	beq.n	800346e <_dtoa_r+0x206>
 8003372:	ee18 3a90 	vmov	r3, s17
 8003376:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800337a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800337e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003382:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8003386:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800338a:	ec51 0b18 	vmov	r0, r1, d8
 800338e:	4619      	mov	r1, r3
 8003390:	2200      	movs	r2, #0
 8003392:	4b75      	ldr	r3, [pc, #468]	; (8003568 <_dtoa_r+0x300>)
 8003394:	f7fc ff8c 	bl	80002b0 <__aeabi_dsub>
 8003398:	a367      	add	r3, pc, #412	; (adr r3, 8003538 <_dtoa_r+0x2d0>)
 800339a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800339e:	f7fd f93f 	bl	8000620 <__aeabi_dmul>
 80033a2:	a367      	add	r3, pc, #412	; (adr r3, 8003540 <_dtoa_r+0x2d8>)
 80033a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033a8:	f7fc ff84 	bl	80002b4 <__adddf3>
 80033ac:	4606      	mov	r6, r0
 80033ae:	460f      	mov	r7, r1
 80033b0:	4628      	mov	r0, r5
 80033b2:	f7fd f8cb 	bl	800054c <__aeabi_i2d>
 80033b6:	a364      	add	r3, pc, #400	; (adr r3, 8003548 <_dtoa_r+0x2e0>)
 80033b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033bc:	f7fd f930 	bl	8000620 <__aeabi_dmul>
 80033c0:	4602      	mov	r2, r0
 80033c2:	460b      	mov	r3, r1
 80033c4:	4630      	mov	r0, r6
 80033c6:	4639      	mov	r1, r7
 80033c8:	f7fc ff74 	bl	80002b4 <__adddf3>
 80033cc:	4606      	mov	r6, r0
 80033ce:	460f      	mov	r7, r1
 80033d0:	f7fd fbd6 	bl	8000b80 <__aeabi_d2iz>
 80033d4:	2200      	movs	r2, #0
 80033d6:	4683      	mov	fp, r0
 80033d8:	2300      	movs	r3, #0
 80033da:	4630      	mov	r0, r6
 80033dc:	4639      	mov	r1, r7
 80033de:	f7fd fb91 	bl	8000b04 <__aeabi_dcmplt>
 80033e2:	b148      	cbz	r0, 80033f8 <_dtoa_r+0x190>
 80033e4:	4658      	mov	r0, fp
 80033e6:	f7fd f8b1 	bl	800054c <__aeabi_i2d>
 80033ea:	4632      	mov	r2, r6
 80033ec:	463b      	mov	r3, r7
 80033ee:	f7fd fb7f 	bl	8000af0 <__aeabi_dcmpeq>
 80033f2:	b908      	cbnz	r0, 80033f8 <_dtoa_r+0x190>
 80033f4:	f10b 3bff 	add.w	fp, fp, #4294967295
 80033f8:	f1bb 0f16 	cmp.w	fp, #22
 80033fc:	d857      	bhi.n	80034ae <_dtoa_r+0x246>
 80033fe:	4b5b      	ldr	r3, [pc, #364]	; (800356c <_dtoa_r+0x304>)
 8003400:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8003404:	ec51 0b18 	vmov	r0, r1, d8
 8003408:	e9d3 2300 	ldrd	r2, r3, [r3]
 800340c:	f7fd fb7a 	bl	8000b04 <__aeabi_dcmplt>
 8003410:	2800      	cmp	r0, #0
 8003412:	d04e      	beq.n	80034b2 <_dtoa_r+0x24a>
 8003414:	f10b 3bff 	add.w	fp, fp, #4294967295
 8003418:	2300      	movs	r3, #0
 800341a:	930c      	str	r3, [sp, #48]	; 0x30
 800341c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800341e:	1b5b      	subs	r3, r3, r5
 8003420:	1e5a      	subs	r2, r3, #1
 8003422:	bf4c      	ite	mi
 8003424:	f1c3 0301 	rsbmi	r3, r3, #1
 8003428:	2300      	movpl	r3, #0
 800342a:	9206      	str	r2, [sp, #24]
 800342c:	bf45      	ittet	mi
 800342e:	9305      	strmi	r3, [sp, #20]
 8003430:	2300      	movmi	r3, #0
 8003432:	9305      	strpl	r3, [sp, #20]
 8003434:	9306      	strmi	r3, [sp, #24]
 8003436:	f1bb 0f00 	cmp.w	fp, #0
 800343a:	db3c      	blt.n	80034b6 <_dtoa_r+0x24e>
 800343c:	9b06      	ldr	r3, [sp, #24]
 800343e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8003442:	445b      	add	r3, fp
 8003444:	9306      	str	r3, [sp, #24]
 8003446:	2300      	movs	r3, #0
 8003448:	9308      	str	r3, [sp, #32]
 800344a:	9b07      	ldr	r3, [sp, #28]
 800344c:	2b09      	cmp	r3, #9
 800344e:	d868      	bhi.n	8003522 <_dtoa_r+0x2ba>
 8003450:	2b05      	cmp	r3, #5
 8003452:	bfc5      	ittet	gt
 8003454:	3b04      	subgt	r3, #4
 8003456:	2500      	movgt	r5, #0
 8003458:	2501      	movle	r5, #1
 800345a:	9307      	strgt	r3, [sp, #28]
 800345c:	9b07      	ldr	r3, [sp, #28]
 800345e:	3b02      	subs	r3, #2
 8003460:	2b03      	cmp	r3, #3
 8003462:	f200 8087 	bhi.w	8003574 <_dtoa_r+0x30c>
 8003466:	e8df f003 	tbb	[pc, r3]
 800346a:	3d30      	.short	0x3d30
 800346c:	5a3b      	.short	0x5a3b
 800346e:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8003472:	441d      	add	r5, r3
 8003474:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8003478:	2b20      	cmp	r3, #32
 800347a:	bfc9      	itett	gt
 800347c:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8003480:	f1c3 0320 	rsble	r3, r3, #32
 8003484:	fa08 f803 	lslgt.w	r8, r8, r3
 8003488:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800348c:	bfd8      	it	le
 800348e:	fa06 f003 	lslle.w	r0, r6, r3
 8003492:	f105 35ff 	add.w	r5, r5, #4294967295
 8003496:	bfc4      	itt	gt
 8003498:	fa26 f303 	lsrgt.w	r3, r6, r3
 800349c:	ea48 0003 	orrgt.w	r0, r8, r3
 80034a0:	f7fd f844 	bl	800052c <__aeabi_ui2d>
 80034a4:	2201      	movs	r2, #1
 80034a6:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 80034aa:	920e      	str	r2, [sp, #56]	; 0x38
 80034ac:	e76f      	b.n	800338e <_dtoa_r+0x126>
 80034ae:	2301      	movs	r3, #1
 80034b0:	e7b3      	b.n	800341a <_dtoa_r+0x1b2>
 80034b2:	900c      	str	r0, [sp, #48]	; 0x30
 80034b4:	e7b2      	b.n	800341c <_dtoa_r+0x1b4>
 80034b6:	9b05      	ldr	r3, [sp, #20]
 80034b8:	eba3 030b 	sub.w	r3, r3, fp
 80034bc:	9305      	str	r3, [sp, #20]
 80034be:	f1cb 0300 	rsb	r3, fp, #0
 80034c2:	9308      	str	r3, [sp, #32]
 80034c4:	2300      	movs	r3, #0
 80034c6:	930b      	str	r3, [sp, #44]	; 0x2c
 80034c8:	e7bf      	b.n	800344a <_dtoa_r+0x1e2>
 80034ca:	2300      	movs	r3, #0
 80034cc:	9309      	str	r3, [sp, #36]	; 0x24
 80034ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	dc52      	bgt.n	800357a <_dtoa_r+0x312>
 80034d4:	2301      	movs	r3, #1
 80034d6:	461a      	mov	r2, r3
 80034d8:	9301      	str	r3, [sp, #4]
 80034da:	9304      	str	r3, [sp, #16]
 80034dc:	920a      	str	r2, [sp, #40]	; 0x28
 80034de:	e00b      	b.n	80034f8 <_dtoa_r+0x290>
 80034e0:	2301      	movs	r3, #1
 80034e2:	e7f3      	b.n	80034cc <_dtoa_r+0x264>
 80034e4:	2300      	movs	r3, #0
 80034e6:	9309      	str	r3, [sp, #36]	; 0x24
 80034e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80034ea:	445b      	add	r3, fp
 80034ec:	9301      	str	r3, [sp, #4]
 80034ee:	3301      	adds	r3, #1
 80034f0:	2b01      	cmp	r3, #1
 80034f2:	9304      	str	r3, [sp, #16]
 80034f4:	bfb8      	it	lt
 80034f6:	2301      	movlt	r3, #1
 80034f8:	69e0      	ldr	r0, [r4, #28]
 80034fa:	2100      	movs	r1, #0
 80034fc:	2204      	movs	r2, #4
 80034fe:	f102 0614 	add.w	r6, r2, #20
 8003502:	429e      	cmp	r6, r3
 8003504:	d93d      	bls.n	8003582 <_dtoa_r+0x31a>
 8003506:	6041      	str	r1, [r0, #4]
 8003508:	4620      	mov	r0, r4
 800350a:	f000 fd9d 	bl	8004048 <_Balloc>
 800350e:	9000      	str	r0, [sp, #0]
 8003510:	2800      	cmp	r0, #0
 8003512:	d139      	bne.n	8003588 <_dtoa_r+0x320>
 8003514:	4b16      	ldr	r3, [pc, #88]	; (8003570 <_dtoa_r+0x308>)
 8003516:	4602      	mov	r2, r0
 8003518:	f240 11af 	movw	r1, #431	; 0x1af
 800351c:	e6bd      	b.n	800329a <_dtoa_r+0x32>
 800351e:	2301      	movs	r3, #1
 8003520:	e7e1      	b.n	80034e6 <_dtoa_r+0x27e>
 8003522:	2501      	movs	r5, #1
 8003524:	2300      	movs	r3, #0
 8003526:	9509      	str	r5, [sp, #36]	; 0x24
 8003528:	9307      	str	r3, [sp, #28]
 800352a:	f04f 33ff 	mov.w	r3, #4294967295
 800352e:	2200      	movs	r2, #0
 8003530:	9301      	str	r3, [sp, #4]
 8003532:	9304      	str	r3, [sp, #16]
 8003534:	2312      	movs	r3, #18
 8003536:	e7d1      	b.n	80034dc <_dtoa_r+0x274>
 8003538:	636f4361 	.word	0x636f4361
 800353c:	3fd287a7 	.word	0x3fd287a7
 8003540:	8b60c8b3 	.word	0x8b60c8b3
 8003544:	3fc68a28 	.word	0x3fc68a28
 8003548:	509f79fb 	.word	0x509f79fb
 800354c:	3fd34413 	.word	0x3fd34413
 8003550:	08005165 	.word	0x08005165
 8003554:	0800517c 	.word	0x0800517c
 8003558:	7ff00000 	.word	0x7ff00000
 800355c:	08005161 	.word	0x08005161
 8003560:	08005158 	.word	0x08005158
 8003564:	08005135 	.word	0x08005135
 8003568:	3ff80000 	.word	0x3ff80000
 800356c:	08005268 	.word	0x08005268
 8003570:	080051d4 	.word	0x080051d4
 8003574:	2301      	movs	r3, #1
 8003576:	9309      	str	r3, [sp, #36]	; 0x24
 8003578:	e7d7      	b.n	800352a <_dtoa_r+0x2c2>
 800357a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800357c:	9301      	str	r3, [sp, #4]
 800357e:	9304      	str	r3, [sp, #16]
 8003580:	e7ba      	b.n	80034f8 <_dtoa_r+0x290>
 8003582:	3101      	adds	r1, #1
 8003584:	0052      	lsls	r2, r2, #1
 8003586:	e7ba      	b.n	80034fe <_dtoa_r+0x296>
 8003588:	69e3      	ldr	r3, [r4, #28]
 800358a:	9a00      	ldr	r2, [sp, #0]
 800358c:	601a      	str	r2, [r3, #0]
 800358e:	9b04      	ldr	r3, [sp, #16]
 8003590:	2b0e      	cmp	r3, #14
 8003592:	f200 80a8 	bhi.w	80036e6 <_dtoa_r+0x47e>
 8003596:	2d00      	cmp	r5, #0
 8003598:	f000 80a5 	beq.w	80036e6 <_dtoa_r+0x47e>
 800359c:	f1bb 0f00 	cmp.w	fp, #0
 80035a0:	dd38      	ble.n	8003614 <_dtoa_r+0x3ac>
 80035a2:	f00b 020f 	and.w	r2, fp, #15
 80035a6:	4bbf      	ldr	r3, [pc, #764]	; (80038a4 <_dtoa_r+0x63c>)
 80035a8:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80035ac:	ea4f 182b 	mov.w	r8, fp, asr #4
 80035b0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80035b4:	e9d3 6700 	ldrd	r6, r7, [r3]
 80035b8:	d019      	beq.n	80035ee <_dtoa_r+0x386>
 80035ba:	4bbb      	ldr	r3, [pc, #748]	; (80038a8 <_dtoa_r+0x640>)
 80035bc:	f008 080f 	and.w	r8, r8, #15
 80035c0:	2503      	movs	r5, #3
 80035c2:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80035c6:	ec51 0b18 	vmov	r0, r1, d8
 80035ca:	f7fd f953 	bl	8000874 <__aeabi_ddiv>
 80035ce:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80035d2:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 80038a8 <_dtoa_r+0x640>
 80035d6:	f1b8 0f00 	cmp.w	r8, #0
 80035da:	d10a      	bne.n	80035f2 <_dtoa_r+0x38a>
 80035dc:	4632      	mov	r2, r6
 80035de:	463b      	mov	r3, r7
 80035e0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80035e4:	f7fd f946 	bl	8000874 <__aeabi_ddiv>
 80035e8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80035ec:	e02b      	b.n	8003646 <_dtoa_r+0x3de>
 80035ee:	2502      	movs	r5, #2
 80035f0:	e7ef      	b.n	80035d2 <_dtoa_r+0x36a>
 80035f2:	f018 0f01 	tst.w	r8, #1
 80035f6:	d008      	beq.n	800360a <_dtoa_r+0x3a2>
 80035f8:	4630      	mov	r0, r6
 80035fa:	4639      	mov	r1, r7
 80035fc:	3501      	adds	r5, #1
 80035fe:	e9d9 2300 	ldrd	r2, r3, [r9]
 8003602:	f7fd f80d 	bl	8000620 <__aeabi_dmul>
 8003606:	4606      	mov	r6, r0
 8003608:	460f      	mov	r7, r1
 800360a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800360e:	f109 0908 	add.w	r9, r9, #8
 8003612:	e7e0      	b.n	80035d6 <_dtoa_r+0x36e>
 8003614:	f000 809f 	beq.w	8003756 <_dtoa_r+0x4ee>
 8003618:	f1cb 0600 	rsb	r6, fp, #0
 800361c:	4ba1      	ldr	r3, [pc, #644]	; (80038a4 <_dtoa_r+0x63c>)
 800361e:	4fa2      	ldr	r7, [pc, #648]	; (80038a8 <_dtoa_r+0x640>)
 8003620:	2502      	movs	r5, #2
 8003622:	f006 020f 	and.w	r2, r6, #15
 8003626:	1136      	asrs	r6, r6, #4
 8003628:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800362c:	ec51 0b18 	vmov	r0, r1, d8
 8003630:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003634:	f7fc fff4 	bl	8000620 <__aeabi_dmul>
 8003638:	2300      	movs	r3, #0
 800363a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800363e:	2e00      	cmp	r6, #0
 8003640:	d17e      	bne.n	8003740 <_dtoa_r+0x4d8>
 8003642:	2b00      	cmp	r3, #0
 8003644:	d1d0      	bne.n	80035e8 <_dtoa_r+0x380>
 8003646:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003648:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800364c:	2b00      	cmp	r3, #0
 800364e:	f000 8084 	beq.w	800375a <_dtoa_r+0x4f2>
 8003652:	2200      	movs	r2, #0
 8003654:	4b95      	ldr	r3, [pc, #596]	; (80038ac <_dtoa_r+0x644>)
 8003656:	4640      	mov	r0, r8
 8003658:	4649      	mov	r1, r9
 800365a:	f7fd fa53 	bl	8000b04 <__aeabi_dcmplt>
 800365e:	2800      	cmp	r0, #0
 8003660:	d07b      	beq.n	800375a <_dtoa_r+0x4f2>
 8003662:	9b04      	ldr	r3, [sp, #16]
 8003664:	2b00      	cmp	r3, #0
 8003666:	d078      	beq.n	800375a <_dtoa_r+0x4f2>
 8003668:	9b01      	ldr	r3, [sp, #4]
 800366a:	2b00      	cmp	r3, #0
 800366c:	dd39      	ble.n	80036e2 <_dtoa_r+0x47a>
 800366e:	2200      	movs	r2, #0
 8003670:	4b8f      	ldr	r3, [pc, #572]	; (80038b0 <_dtoa_r+0x648>)
 8003672:	4640      	mov	r0, r8
 8003674:	4649      	mov	r1, r9
 8003676:	f7fc ffd3 	bl	8000620 <__aeabi_dmul>
 800367a:	f10b 37ff 	add.w	r7, fp, #4294967295
 800367e:	3501      	adds	r5, #1
 8003680:	9e01      	ldr	r6, [sp, #4]
 8003682:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003686:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800368a:	4628      	mov	r0, r5
 800368c:	f7fc ff5e 	bl	800054c <__aeabi_i2d>
 8003690:	4642      	mov	r2, r8
 8003692:	464b      	mov	r3, r9
 8003694:	f7fc ffc4 	bl	8000620 <__aeabi_dmul>
 8003698:	4b86      	ldr	r3, [pc, #536]	; (80038b4 <_dtoa_r+0x64c>)
 800369a:	2200      	movs	r2, #0
 800369c:	f7fc fe0a 	bl	80002b4 <__adddf3>
 80036a0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80036a4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80036a8:	9303      	str	r3, [sp, #12]
 80036aa:	2e00      	cmp	r6, #0
 80036ac:	d158      	bne.n	8003760 <_dtoa_r+0x4f8>
 80036ae:	2200      	movs	r2, #0
 80036b0:	4b81      	ldr	r3, [pc, #516]	; (80038b8 <_dtoa_r+0x650>)
 80036b2:	4640      	mov	r0, r8
 80036b4:	4649      	mov	r1, r9
 80036b6:	f7fc fdfb 	bl	80002b0 <__aeabi_dsub>
 80036ba:	4680      	mov	r8, r0
 80036bc:	4689      	mov	r9, r1
 80036be:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80036c2:	f7fd fa3d 	bl	8000b40 <__aeabi_dcmpgt>
 80036c6:	2800      	cmp	r0, #0
 80036c8:	f040 8296 	bne.w	8003bf8 <_dtoa_r+0x990>
 80036cc:	4640      	mov	r0, r8
 80036ce:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80036d2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80036d6:	4649      	mov	r1, r9
 80036d8:	f7fd fa14 	bl	8000b04 <__aeabi_dcmplt>
 80036dc:	2800      	cmp	r0, #0
 80036de:	f040 8289 	bne.w	8003bf4 <_dtoa_r+0x98c>
 80036e2:	ed8d 8b02 	vstr	d8, [sp, #8]
 80036e6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	f2c0 814e 	blt.w	800398a <_dtoa_r+0x722>
 80036ee:	f1bb 0f0e 	cmp.w	fp, #14
 80036f2:	f300 814a 	bgt.w	800398a <_dtoa_r+0x722>
 80036f6:	4b6b      	ldr	r3, [pc, #428]	; (80038a4 <_dtoa_r+0x63c>)
 80036f8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80036fc:	e9d3 8900 	ldrd	r8, r9, [r3]
 8003700:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003702:	2b00      	cmp	r3, #0
 8003704:	f280 80dc 	bge.w	80038c0 <_dtoa_r+0x658>
 8003708:	9b04      	ldr	r3, [sp, #16]
 800370a:	2b00      	cmp	r3, #0
 800370c:	f300 80d8 	bgt.w	80038c0 <_dtoa_r+0x658>
 8003710:	f040 826f 	bne.w	8003bf2 <_dtoa_r+0x98a>
 8003714:	2200      	movs	r2, #0
 8003716:	4b68      	ldr	r3, [pc, #416]	; (80038b8 <_dtoa_r+0x650>)
 8003718:	4640      	mov	r0, r8
 800371a:	4649      	mov	r1, r9
 800371c:	f7fc ff80 	bl	8000620 <__aeabi_dmul>
 8003720:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003724:	f7fd fa02 	bl	8000b2c <__aeabi_dcmpge>
 8003728:	9e04      	ldr	r6, [sp, #16]
 800372a:	4637      	mov	r7, r6
 800372c:	2800      	cmp	r0, #0
 800372e:	f040 8245 	bne.w	8003bbc <_dtoa_r+0x954>
 8003732:	9d00      	ldr	r5, [sp, #0]
 8003734:	2331      	movs	r3, #49	; 0x31
 8003736:	f10b 0b01 	add.w	fp, fp, #1
 800373a:	f805 3b01 	strb.w	r3, [r5], #1
 800373e:	e241      	b.n	8003bc4 <_dtoa_r+0x95c>
 8003740:	07f2      	lsls	r2, r6, #31
 8003742:	d505      	bpl.n	8003750 <_dtoa_r+0x4e8>
 8003744:	3501      	adds	r5, #1
 8003746:	e9d7 2300 	ldrd	r2, r3, [r7]
 800374a:	f7fc ff69 	bl	8000620 <__aeabi_dmul>
 800374e:	2301      	movs	r3, #1
 8003750:	1076      	asrs	r6, r6, #1
 8003752:	3708      	adds	r7, #8
 8003754:	e773      	b.n	800363e <_dtoa_r+0x3d6>
 8003756:	2502      	movs	r5, #2
 8003758:	e775      	b.n	8003646 <_dtoa_r+0x3de>
 800375a:	465f      	mov	r7, fp
 800375c:	9e04      	ldr	r6, [sp, #16]
 800375e:	e792      	b.n	8003686 <_dtoa_r+0x41e>
 8003760:	9900      	ldr	r1, [sp, #0]
 8003762:	4b50      	ldr	r3, [pc, #320]	; (80038a4 <_dtoa_r+0x63c>)
 8003764:	4431      	add	r1, r6
 8003766:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800376a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800376e:	9102      	str	r1, [sp, #8]
 8003770:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003772:	eeb0 9a47 	vmov.f32	s18, s14
 8003776:	eef0 9a67 	vmov.f32	s19, s15
 800377a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800377e:	2900      	cmp	r1, #0
 8003780:	d044      	beq.n	800380c <_dtoa_r+0x5a4>
 8003782:	2000      	movs	r0, #0
 8003784:	494d      	ldr	r1, [pc, #308]	; (80038bc <_dtoa_r+0x654>)
 8003786:	f7fd f875 	bl	8000874 <__aeabi_ddiv>
 800378a:	ec53 2b19 	vmov	r2, r3, d9
 800378e:	f7fc fd8f 	bl	80002b0 <__aeabi_dsub>
 8003792:	9d00      	ldr	r5, [sp, #0]
 8003794:	ec41 0b19 	vmov	d9, r0, r1
 8003798:	4649      	mov	r1, r9
 800379a:	4640      	mov	r0, r8
 800379c:	f7fd f9f0 	bl	8000b80 <__aeabi_d2iz>
 80037a0:	4606      	mov	r6, r0
 80037a2:	f7fc fed3 	bl	800054c <__aeabi_i2d>
 80037a6:	4602      	mov	r2, r0
 80037a8:	3630      	adds	r6, #48	; 0x30
 80037aa:	460b      	mov	r3, r1
 80037ac:	4640      	mov	r0, r8
 80037ae:	4649      	mov	r1, r9
 80037b0:	f7fc fd7e 	bl	80002b0 <__aeabi_dsub>
 80037b4:	f805 6b01 	strb.w	r6, [r5], #1
 80037b8:	4680      	mov	r8, r0
 80037ba:	4689      	mov	r9, r1
 80037bc:	ec53 2b19 	vmov	r2, r3, d9
 80037c0:	f7fd f9a0 	bl	8000b04 <__aeabi_dcmplt>
 80037c4:	2800      	cmp	r0, #0
 80037c6:	d164      	bne.n	8003892 <_dtoa_r+0x62a>
 80037c8:	4642      	mov	r2, r8
 80037ca:	464b      	mov	r3, r9
 80037cc:	2000      	movs	r0, #0
 80037ce:	4937      	ldr	r1, [pc, #220]	; (80038ac <_dtoa_r+0x644>)
 80037d0:	f7fc fd6e 	bl	80002b0 <__aeabi_dsub>
 80037d4:	ec53 2b19 	vmov	r2, r3, d9
 80037d8:	f7fd f994 	bl	8000b04 <__aeabi_dcmplt>
 80037dc:	2800      	cmp	r0, #0
 80037de:	f040 80b6 	bne.w	800394e <_dtoa_r+0x6e6>
 80037e2:	9b02      	ldr	r3, [sp, #8]
 80037e4:	429d      	cmp	r5, r3
 80037e6:	f43f af7c 	beq.w	80036e2 <_dtoa_r+0x47a>
 80037ea:	2200      	movs	r2, #0
 80037ec:	4b30      	ldr	r3, [pc, #192]	; (80038b0 <_dtoa_r+0x648>)
 80037ee:	ec51 0b19 	vmov	r0, r1, d9
 80037f2:	f7fc ff15 	bl	8000620 <__aeabi_dmul>
 80037f6:	2200      	movs	r2, #0
 80037f8:	4b2d      	ldr	r3, [pc, #180]	; (80038b0 <_dtoa_r+0x648>)
 80037fa:	ec41 0b19 	vmov	d9, r0, r1
 80037fe:	4640      	mov	r0, r8
 8003800:	4649      	mov	r1, r9
 8003802:	f7fc ff0d 	bl	8000620 <__aeabi_dmul>
 8003806:	4680      	mov	r8, r0
 8003808:	4689      	mov	r9, r1
 800380a:	e7c5      	b.n	8003798 <_dtoa_r+0x530>
 800380c:	ec51 0b17 	vmov	r0, r1, d7
 8003810:	f7fc ff06 	bl	8000620 <__aeabi_dmul>
 8003814:	9b02      	ldr	r3, [sp, #8]
 8003816:	9d00      	ldr	r5, [sp, #0]
 8003818:	930f      	str	r3, [sp, #60]	; 0x3c
 800381a:	ec41 0b19 	vmov	d9, r0, r1
 800381e:	4649      	mov	r1, r9
 8003820:	4640      	mov	r0, r8
 8003822:	f7fd f9ad 	bl	8000b80 <__aeabi_d2iz>
 8003826:	4606      	mov	r6, r0
 8003828:	f7fc fe90 	bl	800054c <__aeabi_i2d>
 800382c:	4602      	mov	r2, r0
 800382e:	460b      	mov	r3, r1
 8003830:	4640      	mov	r0, r8
 8003832:	4649      	mov	r1, r9
 8003834:	3630      	adds	r6, #48	; 0x30
 8003836:	f7fc fd3b 	bl	80002b0 <__aeabi_dsub>
 800383a:	9b02      	ldr	r3, [sp, #8]
 800383c:	f805 6b01 	strb.w	r6, [r5], #1
 8003840:	4680      	mov	r8, r0
 8003842:	429d      	cmp	r5, r3
 8003844:	4689      	mov	r9, r1
 8003846:	f04f 0200 	mov.w	r2, #0
 800384a:	d124      	bne.n	8003896 <_dtoa_r+0x62e>
 800384c:	4b1b      	ldr	r3, [pc, #108]	; (80038bc <_dtoa_r+0x654>)
 800384e:	ec51 0b19 	vmov	r0, r1, d9
 8003852:	f7fc fd2f 	bl	80002b4 <__adddf3>
 8003856:	4602      	mov	r2, r0
 8003858:	460b      	mov	r3, r1
 800385a:	4640      	mov	r0, r8
 800385c:	4649      	mov	r1, r9
 800385e:	f7fd f96f 	bl	8000b40 <__aeabi_dcmpgt>
 8003862:	2800      	cmp	r0, #0
 8003864:	d173      	bne.n	800394e <_dtoa_r+0x6e6>
 8003866:	2000      	movs	r0, #0
 8003868:	4914      	ldr	r1, [pc, #80]	; (80038bc <_dtoa_r+0x654>)
 800386a:	ec53 2b19 	vmov	r2, r3, d9
 800386e:	f7fc fd1f 	bl	80002b0 <__aeabi_dsub>
 8003872:	4602      	mov	r2, r0
 8003874:	460b      	mov	r3, r1
 8003876:	4640      	mov	r0, r8
 8003878:	4649      	mov	r1, r9
 800387a:	f7fd f943 	bl	8000b04 <__aeabi_dcmplt>
 800387e:	2800      	cmp	r0, #0
 8003880:	f43f af2f 	beq.w	80036e2 <_dtoa_r+0x47a>
 8003884:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8003886:	1e6b      	subs	r3, r5, #1
 8003888:	930f      	str	r3, [sp, #60]	; 0x3c
 800388a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800388e:	2b30      	cmp	r3, #48	; 0x30
 8003890:	d0f8      	beq.n	8003884 <_dtoa_r+0x61c>
 8003892:	46bb      	mov	fp, r7
 8003894:	e04a      	b.n	800392c <_dtoa_r+0x6c4>
 8003896:	4b06      	ldr	r3, [pc, #24]	; (80038b0 <_dtoa_r+0x648>)
 8003898:	f7fc fec2 	bl	8000620 <__aeabi_dmul>
 800389c:	4680      	mov	r8, r0
 800389e:	4689      	mov	r9, r1
 80038a0:	e7bd      	b.n	800381e <_dtoa_r+0x5b6>
 80038a2:	bf00      	nop
 80038a4:	08005268 	.word	0x08005268
 80038a8:	08005240 	.word	0x08005240
 80038ac:	3ff00000 	.word	0x3ff00000
 80038b0:	40240000 	.word	0x40240000
 80038b4:	401c0000 	.word	0x401c0000
 80038b8:	40140000 	.word	0x40140000
 80038bc:	3fe00000 	.word	0x3fe00000
 80038c0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80038c4:	9d00      	ldr	r5, [sp, #0]
 80038c6:	4642      	mov	r2, r8
 80038c8:	464b      	mov	r3, r9
 80038ca:	4630      	mov	r0, r6
 80038cc:	4639      	mov	r1, r7
 80038ce:	f7fc ffd1 	bl	8000874 <__aeabi_ddiv>
 80038d2:	f7fd f955 	bl	8000b80 <__aeabi_d2iz>
 80038d6:	9001      	str	r0, [sp, #4]
 80038d8:	f7fc fe38 	bl	800054c <__aeabi_i2d>
 80038dc:	4642      	mov	r2, r8
 80038de:	464b      	mov	r3, r9
 80038e0:	f7fc fe9e 	bl	8000620 <__aeabi_dmul>
 80038e4:	4602      	mov	r2, r0
 80038e6:	460b      	mov	r3, r1
 80038e8:	4630      	mov	r0, r6
 80038ea:	4639      	mov	r1, r7
 80038ec:	f7fc fce0 	bl	80002b0 <__aeabi_dsub>
 80038f0:	9e01      	ldr	r6, [sp, #4]
 80038f2:	9f04      	ldr	r7, [sp, #16]
 80038f4:	4602      	mov	r2, r0
 80038f6:	3630      	adds	r6, #48	; 0x30
 80038f8:	460b      	mov	r3, r1
 80038fa:	f805 6b01 	strb.w	r6, [r5], #1
 80038fe:	9e00      	ldr	r6, [sp, #0]
 8003900:	1bae      	subs	r6, r5, r6
 8003902:	42b7      	cmp	r7, r6
 8003904:	d134      	bne.n	8003970 <_dtoa_r+0x708>
 8003906:	f7fc fcd5 	bl	80002b4 <__adddf3>
 800390a:	4642      	mov	r2, r8
 800390c:	464b      	mov	r3, r9
 800390e:	4606      	mov	r6, r0
 8003910:	460f      	mov	r7, r1
 8003912:	f7fd f915 	bl	8000b40 <__aeabi_dcmpgt>
 8003916:	b9c8      	cbnz	r0, 800394c <_dtoa_r+0x6e4>
 8003918:	4642      	mov	r2, r8
 800391a:	464b      	mov	r3, r9
 800391c:	4630      	mov	r0, r6
 800391e:	4639      	mov	r1, r7
 8003920:	f7fd f8e6 	bl	8000af0 <__aeabi_dcmpeq>
 8003924:	b110      	cbz	r0, 800392c <_dtoa_r+0x6c4>
 8003926:	9b01      	ldr	r3, [sp, #4]
 8003928:	07db      	lsls	r3, r3, #31
 800392a:	d40f      	bmi.n	800394c <_dtoa_r+0x6e4>
 800392c:	4651      	mov	r1, sl
 800392e:	4620      	mov	r0, r4
 8003930:	f000 fbca 	bl	80040c8 <_Bfree>
 8003934:	2300      	movs	r3, #0
 8003936:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8003938:	702b      	strb	r3, [r5, #0]
 800393a:	f10b 0301 	add.w	r3, fp, #1
 800393e:	6013      	str	r3, [r2, #0]
 8003940:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003942:	2b00      	cmp	r3, #0
 8003944:	f43f ace2 	beq.w	800330c <_dtoa_r+0xa4>
 8003948:	601d      	str	r5, [r3, #0]
 800394a:	e4df      	b.n	800330c <_dtoa_r+0xa4>
 800394c:	465f      	mov	r7, fp
 800394e:	462b      	mov	r3, r5
 8003950:	461d      	mov	r5, r3
 8003952:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8003956:	2a39      	cmp	r2, #57	; 0x39
 8003958:	d106      	bne.n	8003968 <_dtoa_r+0x700>
 800395a:	9a00      	ldr	r2, [sp, #0]
 800395c:	429a      	cmp	r2, r3
 800395e:	d1f7      	bne.n	8003950 <_dtoa_r+0x6e8>
 8003960:	2230      	movs	r2, #48	; 0x30
 8003962:	9900      	ldr	r1, [sp, #0]
 8003964:	3701      	adds	r7, #1
 8003966:	700a      	strb	r2, [r1, #0]
 8003968:	781a      	ldrb	r2, [r3, #0]
 800396a:	3201      	adds	r2, #1
 800396c:	701a      	strb	r2, [r3, #0]
 800396e:	e790      	b.n	8003892 <_dtoa_r+0x62a>
 8003970:	2200      	movs	r2, #0
 8003972:	4ba3      	ldr	r3, [pc, #652]	; (8003c00 <_dtoa_r+0x998>)
 8003974:	f7fc fe54 	bl	8000620 <__aeabi_dmul>
 8003978:	2200      	movs	r2, #0
 800397a:	2300      	movs	r3, #0
 800397c:	4606      	mov	r6, r0
 800397e:	460f      	mov	r7, r1
 8003980:	f7fd f8b6 	bl	8000af0 <__aeabi_dcmpeq>
 8003984:	2800      	cmp	r0, #0
 8003986:	d09e      	beq.n	80038c6 <_dtoa_r+0x65e>
 8003988:	e7d0      	b.n	800392c <_dtoa_r+0x6c4>
 800398a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800398c:	2a00      	cmp	r2, #0
 800398e:	f000 80ca 	beq.w	8003b26 <_dtoa_r+0x8be>
 8003992:	9a07      	ldr	r2, [sp, #28]
 8003994:	2a01      	cmp	r2, #1
 8003996:	f300 80ad 	bgt.w	8003af4 <_dtoa_r+0x88c>
 800399a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800399c:	2a00      	cmp	r2, #0
 800399e:	f000 80a5 	beq.w	8003aec <_dtoa_r+0x884>
 80039a2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80039a6:	9e08      	ldr	r6, [sp, #32]
 80039a8:	9d05      	ldr	r5, [sp, #20]
 80039aa:	9a05      	ldr	r2, [sp, #20]
 80039ac:	2101      	movs	r1, #1
 80039ae:	4620      	mov	r0, r4
 80039b0:	441a      	add	r2, r3
 80039b2:	9205      	str	r2, [sp, #20]
 80039b4:	9a06      	ldr	r2, [sp, #24]
 80039b6:	441a      	add	r2, r3
 80039b8:	9206      	str	r2, [sp, #24]
 80039ba:	f000 fc3d 	bl	8004238 <__i2b>
 80039be:	4607      	mov	r7, r0
 80039c0:	b165      	cbz	r5, 80039dc <_dtoa_r+0x774>
 80039c2:	9b06      	ldr	r3, [sp, #24]
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	dd09      	ble.n	80039dc <_dtoa_r+0x774>
 80039c8:	42ab      	cmp	r3, r5
 80039ca:	9a05      	ldr	r2, [sp, #20]
 80039cc:	bfa8      	it	ge
 80039ce:	462b      	movge	r3, r5
 80039d0:	1ad2      	subs	r2, r2, r3
 80039d2:	1aed      	subs	r5, r5, r3
 80039d4:	9205      	str	r2, [sp, #20]
 80039d6:	9a06      	ldr	r2, [sp, #24]
 80039d8:	1ad3      	subs	r3, r2, r3
 80039da:	9306      	str	r3, [sp, #24]
 80039dc:	9b08      	ldr	r3, [sp, #32]
 80039de:	b1f3      	cbz	r3, 8003a1e <_dtoa_r+0x7b6>
 80039e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	f000 80a3 	beq.w	8003b2e <_dtoa_r+0x8c6>
 80039e8:	2e00      	cmp	r6, #0
 80039ea:	dd10      	ble.n	8003a0e <_dtoa_r+0x7a6>
 80039ec:	4639      	mov	r1, r7
 80039ee:	4632      	mov	r2, r6
 80039f0:	4620      	mov	r0, r4
 80039f2:	f000 fce1 	bl	80043b8 <__pow5mult>
 80039f6:	4652      	mov	r2, sl
 80039f8:	4601      	mov	r1, r0
 80039fa:	4607      	mov	r7, r0
 80039fc:	4620      	mov	r0, r4
 80039fe:	f000 fc31 	bl	8004264 <__multiply>
 8003a02:	4680      	mov	r8, r0
 8003a04:	4651      	mov	r1, sl
 8003a06:	4620      	mov	r0, r4
 8003a08:	46c2      	mov	sl, r8
 8003a0a:	f000 fb5d 	bl	80040c8 <_Bfree>
 8003a0e:	9b08      	ldr	r3, [sp, #32]
 8003a10:	1b9a      	subs	r2, r3, r6
 8003a12:	d004      	beq.n	8003a1e <_dtoa_r+0x7b6>
 8003a14:	4651      	mov	r1, sl
 8003a16:	4620      	mov	r0, r4
 8003a18:	f000 fcce 	bl	80043b8 <__pow5mult>
 8003a1c:	4682      	mov	sl, r0
 8003a1e:	2101      	movs	r1, #1
 8003a20:	4620      	mov	r0, r4
 8003a22:	f000 fc09 	bl	8004238 <__i2b>
 8003a26:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003a28:	4606      	mov	r6, r0
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	f340 8081 	ble.w	8003b32 <_dtoa_r+0x8ca>
 8003a30:	461a      	mov	r2, r3
 8003a32:	4601      	mov	r1, r0
 8003a34:	4620      	mov	r0, r4
 8003a36:	f000 fcbf 	bl	80043b8 <__pow5mult>
 8003a3a:	9b07      	ldr	r3, [sp, #28]
 8003a3c:	4606      	mov	r6, r0
 8003a3e:	2b01      	cmp	r3, #1
 8003a40:	dd7a      	ble.n	8003b38 <_dtoa_r+0x8d0>
 8003a42:	f04f 0800 	mov.w	r8, #0
 8003a46:	6933      	ldr	r3, [r6, #16]
 8003a48:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8003a4c:	6918      	ldr	r0, [r3, #16]
 8003a4e:	f000 fba5 	bl	800419c <__hi0bits>
 8003a52:	f1c0 0020 	rsb	r0, r0, #32
 8003a56:	9b06      	ldr	r3, [sp, #24]
 8003a58:	4418      	add	r0, r3
 8003a5a:	f010 001f 	ands.w	r0, r0, #31
 8003a5e:	f000 8094 	beq.w	8003b8a <_dtoa_r+0x922>
 8003a62:	f1c0 0320 	rsb	r3, r0, #32
 8003a66:	2b04      	cmp	r3, #4
 8003a68:	f340 8085 	ble.w	8003b76 <_dtoa_r+0x90e>
 8003a6c:	f1c0 001c 	rsb	r0, r0, #28
 8003a70:	9b05      	ldr	r3, [sp, #20]
 8003a72:	4403      	add	r3, r0
 8003a74:	4405      	add	r5, r0
 8003a76:	9305      	str	r3, [sp, #20]
 8003a78:	9b06      	ldr	r3, [sp, #24]
 8003a7a:	4403      	add	r3, r0
 8003a7c:	9306      	str	r3, [sp, #24]
 8003a7e:	9b05      	ldr	r3, [sp, #20]
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	dd05      	ble.n	8003a90 <_dtoa_r+0x828>
 8003a84:	4651      	mov	r1, sl
 8003a86:	461a      	mov	r2, r3
 8003a88:	4620      	mov	r0, r4
 8003a8a:	f000 fcef 	bl	800446c <__lshift>
 8003a8e:	4682      	mov	sl, r0
 8003a90:	9b06      	ldr	r3, [sp, #24]
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	dd05      	ble.n	8003aa2 <_dtoa_r+0x83a>
 8003a96:	4631      	mov	r1, r6
 8003a98:	461a      	mov	r2, r3
 8003a9a:	4620      	mov	r0, r4
 8003a9c:	f000 fce6 	bl	800446c <__lshift>
 8003aa0:	4606      	mov	r6, r0
 8003aa2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d072      	beq.n	8003b8e <_dtoa_r+0x926>
 8003aa8:	4631      	mov	r1, r6
 8003aaa:	4650      	mov	r0, sl
 8003aac:	f000 fd4a 	bl	8004544 <__mcmp>
 8003ab0:	2800      	cmp	r0, #0
 8003ab2:	da6c      	bge.n	8003b8e <_dtoa_r+0x926>
 8003ab4:	2300      	movs	r3, #0
 8003ab6:	4651      	mov	r1, sl
 8003ab8:	220a      	movs	r2, #10
 8003aba:	4620      	mov	r0, r4
 8003abc:	f000 fb26 	bl	800410c <__multadd>
 8003ac0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003ac2:	f10b 3bff 	add.w	fp, fp, #4294967295
 8003ac6:	4682      	mov	sl, r0
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	f000 81af 	beq.w	8003e2c <_dtoa_r+0xbc4>
 8003ace:	2300      	movs	r3, #0
 8003ad0:	4639      	mov	r1, r7
 8003ad2:	220a      	movs	r2, #10
 8003ad4:	4620      	mov	r0, r4
 8003ad6:	f000 fb19 	bl	800410c <__multadd>
 8003ada:	9b01      	ldr	r3, [sp, #4]
 8003adc:	4607      	mov	r7, r0
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	f300 8096 	bgt.w	8003c10 <_dtoa_r+0x9a8>
 8003ae4:	9b07      	ldr	r3, [sp, #28]
 8003ae6:	2b02      	cmp	r3, #2
 8003ae8:	dc59      	bgt.n	8003b9e <_dtoa_r+0x936>
 8003aea:	e091      	b.n	8003c10 <_dtoa_r+0x9a8>
 8003aec:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8003aee:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8003af2:	e758      	b.n	80039a6 <_dtoa_r+0x73e>
 8003af4:	9b04      	ldr	r3, [sp, #16]
 8003af6:	1e5e      	subs	r6, r3, #1
 8003af8:	9b08      	ldr	r3, [sp, #32]
 8003afa:	42b3      	cmp	r3, r6
 8003afc:	bfb7      	itett	lt
 8003afe:	9b08      	ldrlt	r3, [sp, #32]
 8003b00:	1b9e      	subge	r6, r3, r6
 8003b02:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8003b04:	1af3      	sublt	r3, r6, r3
 8003b06:	bfbe      	ittt	lt
 8003b08:	9608      	strlt	r6, [sp, #32]
 8003b0a:	2600      	movlt	r6, #0
 8003b0c:	18d2      	addlt	r2, r2, r3
 8003b0e:	9b04      	ldr	r3, [sp, #16]
 8003b10:	bfb8      	it	lt
 8003b12:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	bfb7      	itett	lt
 8003b18:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8003b1c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8003b20:	1a9d      	sublt	r5, r3, r2
 8003b22:	2300      	movlt	r3, #0
 8003b24:	e741      	b.n	80039aa <_dtoa_r+0x742>
 8003b26:	9e08      	ldr	r6, [sp, #32]
 8003b28:	9d05      	ldr	r5, [sp, #20]
 8003b2a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8003b2c:	e748      	b.n	80039c0 <_dtoa_r+0x758>
 8003b2e:	9a08      	ldr	r2, [sp, #32]
 8003b30:	e770      	b.n	8003a14 <_dtoa_r+0x7ac>
 8003b32:	9b07      	ldr	r3, [sp, #28]
 8003b34:	2b01      	cmp	r3, #1
 8003b36:	dc19      	bgt.n	8003b6c <_dtoa_r+0x904>
 8003b38:	9b02      	ldr	r3, [sp, #8]
 8003b3a:	b9bb      	cbnz	r3, 8003b6c <_dtoa_r+0x904>
 8003b3c:	9b03      	ldr	r3, [sp, #12]
 8003b3e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003b42:	b99b      	cbnz	r3, 8003b6c <_dtoa_r+0x904>
 8003b44:	9b03      	ldr	r3, [sp, #12]
 8003b46:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003b4a:	0d1b      	lsrs	r3, r3, #20
 8003b4c:	051b      	lsls	r3, r3, #20
 8003b4e:	b183      	cbz	r3, 8003b72 <_dtoa_r+0x90a>
 8003b50:	9b05      	ldr	r3, [sp, #20]
 8003b52:	f04f 0801 	mov.w	r8, #1
 8003b56:	3301      	adds	r3, #1
 8003b58:	9305      	str	r3, [sp, #20]
 8003b5a:	9b06      	ldr	r3, [sp, #24]
 8003b5c:	3301      	adds	r3, #1
 8003b5e:	9306      	str	r3, [sp, #24]
 8003b60:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	f47f af6f 	bne.w	8003a46 <_dtoa_r+0x7de>
 8003b68:	2001      	movs	r0, #1
 8003b6a:	e774      	b.n	8003a56 <_dtoa_r+0x7ee>
 8003b6c:	f04f 0800 	mov.w	r8, #0
 8003b70:	e7f6      	b.n	8003b60 <_dtoa_r+0x8f8>
 8003b72:	4698      	mov	r8, r3
 8003b74:	e7f4      	b.n	8003b60 <_dtoa_r+0x8f8>
 8003b76:	d082      	beq.n	8003a7e <_dtoa_r+0x816>
 8003b78:	331c      	adds	r3, #28
 8003b7a:	9a05      	ldr	r2, [sp, #20]
 8003b7c:	441a      	add	r2, r3
 8003b7e:	441d      	add	r5, r3
 8003b80:	9205      	str	r2, [sp, #20]
 8003b82:	9a06      	ldr	r2, [sp, #24]
 8003b84:	441a      	add	r2, r3
 8003b86:	9206      	str	r2, [sp, #24]
 8003b88:	e779      	b.n	8003a7e <_dtoa_r+0x816>
 8003b8a:	4603      	mov	r3, r0
 8003b8c:	e7f4      	b.n	8003b78 <_dtoa_r+0x910>
 8003b8e:	9b04      	ldr	r3, [sp, #16]
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	dc37      	bgt.n	8003c04 <_dtoa_r+0x99c>
 8003b94:	9b07      	ldr	r3, [sp, #28]
 8003b96:	2b02      	cmp	r3, #2
 8003b98:	dd34      	ble.n	8003c04 <_dtoa_r+0x99c>
 8003b9a:	9b04      	ldr	r3, [sp, #16]
 8003b9c:	9301      	str	r3, [sp, #4]
 8003b9e:	9b01      	ldr	r3, [sp, #4]
 8003ba0:	b963      	cbnz	r3, 8003bbc <_dtoa_r+0x954>
 8003ba2:	4631      	mov	r1, r6
 8003ba4:	2205      	movs	r2, #5
 8003ba6:	4620      	mov	r0, r4
 8003ba8:	f000 fab0 	bl	800410c <__multadd>
 8003bac:	4601      	mov	r1, r0
 8003bae:	4606      	mov	r6, r0
 8003bb0:	4650      	mov	r0, sl
 8003bb2:	f000 fcc7 	bl	8004544 <__mcmp>
 8003bb6:	2800      	cmp	r0, #0
 8003bb8:	f73f adbb 	bgt.w	8003732 <_dtoa_r+0x4ca>
 8003bbc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003bbe:	9d00      	ldr	r5, [sp, #0]
 8003bc0:	ea6f 0b03 	mvn.w	fp, r3
 8003bc4:	f04f 0800 	mov.w	r8, #0
 8003bc8:	4631      	mov	r1, r6
 8003bca:	4620      	mov	r0, r4
 8003bcc:	f000 fa7c 	bl	80040c8 <_Bfree>
 8003bd0:	2f00      	cmp	r7, #0
 8003bd2:	f43f aeab 	beq.w	800392c <_dtoa_r+0x6c4>
 8003bd6:	f1b8 0f00 	cmp.w	r8, #0
 8003bda:	d005      	beq.n	8003be8 <_dtoa_r+0x980>
 8003bdc:	45b8      	cmp	r8, r7
 8003bde:	d003      	beq.n	8003be8 <_dtoa_r+0x980>
 8003be0:	4641      	mov	r1, r8
 8003be2:	4620      	mov	r0, r4
 8003be4:	f000 fa70 	bl	80040c8 <_Bfree>
 8003be8:	4639      	mov	r1, r7
 8003bea:	4620      	mov	r0, r4
 8003bec:	f000 fa6c 	bl	80040c8 <_Bfree>
 8003bf0:	e69c      	b.n	800392c <_dtoa_r+0x6c4>
 8003bf2:	2600      	movs	r6, #0
 8003bf4:	4637      	mov	r7, r6
 8003bf6:	e7e1      	b.n	8003bbc <_dtoa_r+0x954>
 8003bf8:	46bb      	mov	fp, r7
 8003bfa:	4637      	mov	r7, r6
 8003bfc:	e599      	b.n	8003732 <_dtoa_r+0x4ca>
 8003bfe:	bf00      	nop
 8003c00:	40240000 	.word	0x40240000
 8003c04:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	f000 80c8 	beq.w	8003d9c <_dtoa_r+0xb34>
 8003c0c:	9b04      	ldr	r3, [sp, #16]
 8003c0e:	9301      	str	r3, [sp, #4]
 8003c10:	2d00      	cmp	r5, #0
 8003c12:	dd05      	ble.n	8003c20 <_dtoa_r+0x9b8>
 8003c14:	4639      	mov	r1, r7
 8003c16:	462a      	mov	r2, r5
 8003c18:	4620      	mov	r0, r4
 8003c1a:	f000 fc27 	bl	800446c <__lshift>
 8003c1e:	4607      	mov	r7, r0
 8003c20:	f1b8 0f00 	cmp.w	r8, #0
 8003c24:	d05b      	beq.n	8003cde <_dtoa_r+0xa76>
 8003c26:	6879      	ldr	r1, [r7, #4]
 8003c28:	4620      	mov	r0, r4
 8003c2a:	f000 fa0d 	bl	8004048 <_Balloc>
 8003c2e:	4605      	mov	r5, r0
 8003c30:	b928      	cbnz	r0, 8003c3e <_dtoa_r+0x9d6>
 8003c32:	4b82      	ldr	r3, [pc, #520]	; (8003e3c <_dtoa_r+0xbd4>)
 8003c34:	4602      	mov	r2, r0
 8003c36:	f240 21ef 	movw	r1, #751	; 0x2ef
 8003c3a:	f7ff bb2e 	b.w	800329a <_dtoa_r+0x32>
 8003c3e:	693a      	ldr	r2, [r7, #16]
 8003c40:	f107 010c 	add.w	r1, r7, #12
 8003c44:	300c      	adds	r0, #12
 8003c46:	3202      	adds	r2, #2
 8003c48:	0092      	lsls	r2, r2, #2
 8003c4a:	f001 f839 	bl	8004cc0 <memcpy>
 8003c4e:	2201      	movs	r2, #1
 8003c50:	4629      	mov	r1, r5
 8003c52:	4620      	mov	r0, r4
 8003c54:	f000 fc0a 	bl	800446c <__lshift>
 8003c58:	9b00      	ldr	r3, [sp, #0]
 8003c5a:	46b8      	mov	r8, r7
 8003c5c:	4607      	mov	r7, r0
 8003c5e:	3301      	adds	r3, #1
 8003c60:	9304      	str	r3, [sp, #16]
 8003c62:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003c66:	4413      	add	r3, r2
 8003c68:	9308      	str	r3, [sp, #32]
 8003c6a:	9b02      	ldr	r3, [sp, #8]
 8003c6c:	f003 0301 	and.w	r3, r3, #1
 8003c70:	9306      	str	r3, [sp, #24]
 8003c72:	9b04      	ldr	r3, [sp, #16]
 8003c74:	4631      	mov	r1, r6
 8003c76:	4650      	mov	r0, sl
 8003c78:	3b01      	subs	r3, #1
 8003c7a:	9301      	str	r3, [sp, #4]
 8003c7c:	f7ff fa63 	bl	8003146 <quorem>
 8003c80:	4641      	mov	r1, r8
 8003c82:	9002      	str	r0, [sp, #8]
 8003c84:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8003c88:	4650      	mov	r0, sl
 8003c8a:	f000 fc5b 	bl	8004544 <__mcmp>
 8003c8e:	463a      	mov	r2, r7
 8003c90:	9005      	str	r0, [sp, #20]
 8003c92:	4631      	mov	r1, r6
 8003c94:	4620      	mov	r0, r4
 8003c96:	f000 fc71 	bl	800457c <__mdiff>
 8003c9a:	68c2      	ldr	r2, [r0, #12]
 8003c9c:	4605      	mov	r5, r0
 8003c9e:	bb02      	cbnz	r2, 8003ce2 <_dtoa_r+0xa7a>
 8003ca0:	4601      	mov	r1, r0
 8003ca2:	4650      	mov	r0, sl
 8003ca4:	f000 fc4e 	bl	8004544 <__mcmp>
 8003ca8:	4602      	mov	r2, r0
 8003caa:	4629      	mov	r1, r5
 8003cac:	4620      	mov	r0, r4
 8003cae:	9209      	str	r2, [sp, #36]	; 0x24
 8003cb0:	f000 fa0a 	bl	80040c8 <_Bfree>
 8003cb4:	9b07      	ldr	r3, [sp, #28]
 8003cb6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003cb8:	9d04      	ldr	r5, [sp, #16]
 8003cba:	ea43 0102 	orr.w	r1, r3, r2
 8003cbe:	9b06      	ldr	r3, [sp, #24]
 8003cc0:	4319      	orrs	r1, r3
 8003cc2:	d110      	bne.n	8003ce6 <_dtoa_r+0xa7e>
 8003cc4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8003cc8:	d029      	beq.n	8003d1e <_dtoa_r+0xab6>
 8003cca:	9b05      	ldr	r3, [sp, #20]
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	dd02      	ble.n	8003cd6 <_dtoa_r+0xa6e>
 8003cd0:	9b02      	ldr	r3, [sp, #8]
 8003cd2:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8003cd6:	9b01      	ldr	r3, [sp, #4]
 8003cd8:	f883 9000 	strb.w	r9, [r3]
 8003cdc:	e774      	b.n	8003bc8 <_dtoa_r+0x960>
 8003cde:	4638      	mov	r0, r7
 8003ce0:	e7ba      	b.n	8003c58 <_dtoa_r+0x9f0>
 8003ce2:	2201      	movs	r2, #1
 8003ce4:	e7e1      	b.n	8003caa <_dtoa_r+0xa42>
 8003ce6:	9b05      	ldr	r3, [sp, #20]
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	db04      	blt.n	8003cf6 <_dtoa_r+0xa8e>
 8003cec:	9907      	ldr	r1, [sp, #28]
 8003cee:	430b      	orrs	r3, r1
 8003cf0:	9906      	ldr	r1, [sp, #24]
 8003cf2:	430b      	orrs	r3, r1
 8003cf4:	d120      	bne.n	8003d38 <_dtoa_r+0xad0>
 8003cf6:	2a00      	cmp	r2, #0
 8003cf8:	dded      	ble.n	8003cd6 <_dtoa_r+0xa6e>
 8003cfa:	4651      	mov	r1, sl
 8003cfc:	2201      	movs	r2, #1
 8003cfe:	4620      	mov	r0, r4
 8003d00:	f000 fbb4 	bl	800446c <__lshift>
 8003d04:	4631      	mov	r1, r6
 8003d06:	4682      	mov	sl, r0
 8003d08:	f000 fc1c 	bl	8004544 <__mcmp>
 8003d0c:	2800      	cmp	r0, #0
 8003d0e:	dc03      	bgt.n	8003d18 <_dtoa_r+0xab0>
 8003d10:	d1e1      	bne.n	8003cd6 <_dtoa_r+0xa6e>
 8003d12:	f019 0f01 	tst.w	r9, #1
 8003d16:	d0de      	beq.n	8003cd6 <_dtoa_r+0xa6e>
 8003d18:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8003d1c:	d1d8      	bne.n	8003cd0 <_dtoa_r+0xa68>
 8003d1e:	2339      	movs	r3, #57	; 0x39
 8003d20:	9a01      	ldr	r2, [sp, #4]
 8003d22:	7013      	strb	r3, [r2, #0]
 8003d24:	462b      	mov	r3, r5
 8003d26:	461d      	mov	r5, r3
 8003d28:	3b01      	subs	r3, #1
 8003d2a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8003d2e:	2a39      	cmp	r2, #57	; 0x39
 8003d30:	d06b      	beq.n	8003e0a <_dtoa_r+0xba2>
 8003d32:	3201      	adds	r2, #1
 8003d34:	701a      	strb	r2, [r3, #0]
 8003d36:	e747      	b.n	8003bc8 <_dtoa_r+0x960>
 8003d38:	2a00      	cmp	r2, #0
 8003d3a:	dd07      	ble.n	8003d4c <_dtoa_r+0xae4>
 8003d3c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8003d40:	d0ed      	beq.n	8003d1e <_dtoa_r+0xab6>
 8003d42:	f109 0301 	add.w	r3, r9, #1
 8003d46:	9a01      	ldr	r2, [sp, #4]
 8003d48:	7013      	strb	r3, [r2, #0]
 8003d4a:	e73d      	b.n	8003bc8 <_dtoa_r+0x960>
 8003d4c:	9b04      	ldr	r3, [sp, #16]
 8003d4e:	9a08      	ldr	r2, [sp, #32]
 8003d50:	f803 9c01 	strb.w	r9, [r3, #-1]
 8003d54:	4293      	cmp	r3, r2
 8003d56:	d042      	beq.n	8003dde <_dtoa_r+0xb76>
 8003d58:	4651      	mov	r1, sl
 8003d5a:	2300      	movs	r3, #0
 8003d5c:	220a      	movs	r2, #10
 8003d5e:	4620      	mov	r0, r4
 8003d60:	f000 f9d4 	bl	800410c <__multadd>
 8003d64:	45b8      	cmp	r8, r7
 8003d66:	4682      	mov	sl, r0
 8003d68:	f04f 0300 	mov.w	r3, #0
 8003d6c:	f04f 020a 	mov.w	r2, #10
 8003d70:	4641      	mov	r1, r8
 8003d72:	4620      	mov	r0, r4
 8003d74:	d107      	bne.n	8003d86 <_dtoa_r+0xb1e>
 8003d76:	f000 f9c9 	bl	800410c <__multadd>
 8003d7a:	4680      	mov	r8, r0
 8003d7c:	4607      	mov	r7, r0
 8003d7e:	9b04      	ldr	r3, [sp, #16]
 8003d80:	3301      	adds	r3, #1
 8003d82:	9304      	str	r3, [sp, #16]
 8003d84:	e775      	b.n	8003c72 <_dtoa_r+0xa0a>
 8003d86:	f000 f9c1 	bl	800410c <__multadd>
 8003d8a:	4639      	mov	r1, r7
 8003d8c:	4680      	mov	r8, r0
 8003d8e:	2300      	movs	r3, #0
 8003d90:	220a      	movs	r2, #10
 8003d92:	4620      	mov	r0, r4
 8003d94:	f000 f9ba 	bl	800410c <__multadd>
 8003d98:	4607      	mov	r7, r0
 8003d9a:	e7f0      	b.n	8003d7e <_dtoa_r+0xb16>
 8003d9c:	9b04      	ldr	r3, [sp, #16]
 8003d9e:	9301      	str	r3, [sp, #4]
 8003da0:	9d00      	ldr	r5, [sp, #0]
 8003da2:	4631      	mov	r1, r6
 8003da4:	4650      	mov	r0, sl
 8003da6:	f7ff f9ce 	bl	8003146 <quorem>
 8003daa:	9b00      	ldr	r3, [sp, #0]
 8003dac:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8003db0:	f805 9b01 	strb.w	r9, [r5], #1
 8003db4:	1aea      	subs	r2, r5, r3
 8003db6:	9b01      	ldr	r3, [sp, #4]
 8003db8:	4293      	cmp	r3, r2
 8003dba:	dd07      	ble.n	8003dcc <_dtoa_r+0xb64>
 8003dbc:	4651      	mov	r1, sl
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	220a      	movs	r2, #10
 8003dc2:	4620      	mov	r0, r4
 8003dc4:	f000 f9a2 	bl	800410c <__multadd>
 8003dc8:	4682      	mov	sl, r0
 8003dca:	e7ea      	b.n	8003da2 <_dtoa_r+0xb3a>
 8003dcc:	9b01      	ldr	r3, [sp, #4]
 8003dce:	f04f 0800 	mov.w	r8, #0
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	bfcc      	ite	gt
 8003dd6:	461d      	movgt	r5, r3
 8003dd8:	2501      	movle	r5, #1
 8003dda:	9b00      	ldr	r3, [sp, #0]
 8003ddc:	441d      	add	r5, r3
 8003dde:	4651      	mov	r1, sl
 8003de0:	2201      	movs	r2, #1
 8003de2:	4620      	mov	r0, r4
 8003de4:	f000 fb42 	bl	800446c <__lshift>
 8003de8:	4631      	mov	r1, r6
 8003dea:	4682      	mov	sl, r0
 8003dec:	f000 fbaa 	bl	8004544 <__mcmp>
 8003df0:	2800      	cmp	r0, #0
 8003df2:	dc97      	bgt.n	8003d24 <_dtoa_r+0xabc>
 8003df4:	d102      	bne.n	8003dfc <_dtoa_r+0xb94>
 8003df6:	f019 0f01 	tst.w	r9, #1
 8003dfa:	d193      	bne.n	8003d24 <_dtoa_r+0xabc>
 8003dfc:	462b      	mov	r3, r5
 8003dfe:	461d      	mov	r5, r3
 8003e00:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8003e04:	2a30      	cmp	r2, #48	; 0x30
 8003e06:	d0fa      	beq.n	8003dfe <_dtoa_r+0xb96>
 8003e08:	e6de      	b.n	8003bc8 <_dtoa_r+0x960>
 8003e0a:	9a00      	ldr	r2, [sp, #0]
 8003e0c:	429a      	cmp	r2, r3
 8003e0e:	d18a      	bne.n	8003d26 <_dtoa_r+0xabe>
 8003e10:	f10b 0b01 	add.w	fp, fp, #1
 8003e14:	2331      	movs	r3, #49	; 0x31
 8003e16:	e797      	b.n	8003d48 <_dtoa_r+0xae0>
 8003e18:	4b09      	ldr	r3, [pc, #36]	; (8003e40 <_dtoa_r+0xbd8>)
 8003e1a:	f7ff ba9a 	b.w	8003352 <_dtoa_r+0xea>
 8003e1e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	f47f aa6e 	bne.w	8003302 <_dtoa_r+0x9a>
 8003e26:	4b07      	ldr	r3, [pc, #28]	; (8003e44 <_dtoa_r+0xbdc>)
 8003e28:	f7ff ba93 	b.w	8003352 <_dtoa_r+0xea>
 8003e2c:	9b01      	ldr	r3, [sp, #4]
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	dcb6      	bgt.n	8003da0 <_dtoa_r+0xb38>
 8003e32:	9b07      	ldr	r3, [sp, #28]
 8003e34:	2b02      	cmp	r3, #2
 8003e36:	f73f aeb2 	bgt.w	8003b9e <_dtoa_r+0x936>
 8003e3a:	e7b1      	b.n	8003da0 <_dtoa_r+0xb38>
 8003e3c:	080051d4 	.word	0x080051d4
 8003e40:	08005134 	.word	0x08005134
 8003e44:	08005158 	.word	0x08005158

08003e48 <_free_r>:
 8003e48:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003e4a:	2900      	cmp	r1, #0
 8003e4c:	d043      	beq.n	8003ed6 <_free_r+0x8e>
 8003e4e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003e52:	1f0c      	subs	r4, r1, #4
 8003e54:	9001      	str	r0, [sp, #4]
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	bfb8      	it	lt
 8003e5a:	18e4      	addlt	r4, r4, r3
 8003e5c:	f000 f8e8 	bl	8004030 <__malloc_lock>
 8003e60:	4a1e      	ldr	r2, [pc, #120]	; (8003edc <_free_r+0x94>)
 8003e62:	9801      	ldr	r0, [sp, #4]
 8003e64:	6813      	ldr	r3, [r2, #0]
 8003e66:	b933      	cbnz	r3, 8003e76 <_free_r+0x2e>
 8003e68:	6063      	str	r3, [r4, #4]
 8003e6a:	6014      	str	r4, [r2, #0]
 8003e6c:	b003      	add	sp, #12
 8003e6e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003e72:	f000 b8e3 	b.w	800403c <__malloc_unlock>
 8003e76:	42a3      	cmp	r3, r4
 8003e78:	d908      	bls.n	8003e8c <_free_r+0x44>
 8003e7a:	6825      	ldr	r5, [r4, #0]
 8003e7c:	1961      	adds	r1, r4, r5
 8003e7e:	428b      	cmp	r3, r1
 8003e80:	bf01      	itttt	eq
 8003e82:	6819      	ldreq	r1, [r3, #0]
 8003e84:	685b      	ldreq	r3, [r3, #4]
 8003e86:	1949      	addeq	r1, r1, r5
 8003e88:	6021      	streq	r1, [r4, #0]
 8003e8a:	e7ed      	b.n	8003e68 <_free_r+0x20>
 8003e8c:	461a      	mov	r2, r3
 8003e8e:	685b      	ldr	r3, [r3, #4]
 8003e90:	b10b      	cbz	r3, 8003e96 <_free_r+0x4e>
 8003e92:	42a3      	cmp	r3, r4
 8003e94:	d9fa      	bls.n	8003e8c <_free_r+0x44>
 8003e96:	6811      	ldr	r1, [r2, #0]
 8003e98:	1855      	adds	r5, r2, r1
 8003e9a:	42a5      	cmp	r5, r4
 8003e9c:	d10b      	bne.n	8003eb6 <_free_r+0x6e>
 8003e9e:	6824      	ldr	r4, [r4, #0]
 8003ea0:	4421      	add	r1, r4
 8003ea2:	1854      	adds	r4, r2, r1
 8003ea4:	6011      	str	r1, [r2, #0]
 8003ea6:	42a3      	cmp	r3, r4
 8003ea8:	d1e0      	bne.n	8003e6c <_free_r+0x24>
 8003eaa:	681c      	ldr	r4, [r3, #0]
 8003eac:	685b      	ldr	r3, [r3, #4]
 8003eae:	440c      	add	r4, r1
 8003eb0:	6053      	str	r3, [r2, #4]
 8003eb2:	6014      	str	r4, [r2, #0]
 8003eb4:	e7da      	b.n	8003e6c <_free_r+0x24>
 8003eb6:	d902      	bls.n	8003ebe <_free_r+0x76>
 8003eb8:	230c      	movs	r3, #12
 8003eba:	6003      	str	r3, [r0, #0]
 8003ebc:	e7d6      	b.n	8003e6c <_free_r+0x24>
 8003ebe:	6825      	ldr	r5, [r4, #0]
 8003ec0:	1961      	adds	r1, r4, r5
 8003ec2:	428b      	cmp	r3, r1
 8003ec4:	bf02      	ittt	eq
 8003ec6:	6819      	ldreq	r1, [r3, #0]
 8003ec8:	685b      	ldreq	r3, [r3, #4]
 8003eca:	1949      	addeq	r1, r1, r5
 8003ecc:	6063      	str	r3, [r4, #4]
 8003ece:	bf08      	it	eq
 8003ed0:	6021      	streq	r1, [r4, #0]
 8003ed2:	6054      	str	r4, [r2, #4]
 8003ed4:	e7ca      	b.n	8003e6c <_free_r+0x24>
 8003ed6:	b003      	add	sp, #12
 8003ed8:	bd30      	pop	{r4, r5, pc}
 8003eda:	bf00      	nop
 8003edc:	200003d4 	.word	0x200003d4

08003ee0 <malloc>:
 8003ee0:	4b02      	ldr	r3, [pc, #8]	; (8003eec <malloc+0xc>)
 8003ee2:	4601      	mov	r1, r0
 8003ee4:	6818      	ldr	r0, [r3, #0]
 8003ee6:	f000 b823 	b.w	8003f30 <_malloc_r>
 8003eea:	bf00      	nop
 8003eec:	20000064 	.word	0x20000064

08003ef0 <sbrk_aligned>:
 8003ef0:	b570      	push	{r4, r5, r6, lr}
 8003ef2:	4e0e      	ldr	r6, [pc, #56]	; (8003f2c <sbrk_aligned+0x3c>)
 8003ef4:	460c      	mov	r4, r1
 8003ef6:	4605      	mov	r5, r0
 8003ef8:	6831      	ldr	r1, [r6, #0]
 8003efa:	b911      	cbnz	r1, 8003f02 <sbrk_aligned+0x12>
 8003efc:	f000 fed0 	bl	8004ca0 <_sbrk_r>
 8003f00:	6030      	str	r0, [r6, #0]
 8003f02:	4621      	mov	r1, r4
 8003f04:	4628      	mov	r0, r5
 8003f06:	f000 fecb 	bl	8004ca0 <_sbrk_r>
 8003f0a:	1c43      	adds	r3, r0, #1
 8003f0c:	d00a      	beq.n	8003f24 <sbrk_aligned+0x34>
 8003f0e:	1cc4      	adds	r4, r0, #3
 8003f10:	f024 0403 	bic.w	r4, r4, #3
 8003f14:	42a0      	cmp	r0, r4
 8003f16:	d007      	beq.n	8003f28 <sbrk_aligned+0x38>
 8003f18:	1a21      	subs	r1, r4, r0
 8003f1a:	4628      	mov	r0, r5
 8003f1c:	f000 fec0 	bl	8004ca0 <_sbrk_r>
 8003f20:	3001      	adds	r0, #1
 8003f22:	d101      	bne.n	8003f28 <sbrk_aligned+0x38>
 8003f24:	f04f 34ff 	mov.w	r4, #4294967295
 8003f28:	4620      	mov	r0, r4
 8003f2a:	bd70      	pop	{r4, r5, r6, pc}
 8003f2c:	200003d8 	.word	0x200003d8

08003f30 <_malloc_r>:
 8003f30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003f34:	1ccd      	adds	r5, r1, #3
 8003f36:	4607      	mov	r7, r0
 8003f38:	f025 0503 	bic.w	r5, r5, #3
 8003f3c:	3508      	adds	r5, #8
 8003f3e:	2d0c      	cmp	r5, #12
 8003f40:	bf38      	it	cc
 8003f42:	250c      	movcc	r5, #12
 8003f44:	2d00      	cmp	r5, #0
 8003f46:	db01      	blt.n	8003f4c <_malloc_r+0x1c>
 8003f48:	42a9      	cmp	r1, r5
 8003f4a:	d905      	bls.n	8003f58 <_malloc_r+0x28>
 8003f4c:	230c      	movs	r3, #12
 8003f4e:	2600      	movs	r6, #0
 8003f50:	603b      	str	r3, [r7, #0]
 8003f52:	4630      	mov	r0, r6
 8003f54:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003f58:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800402c <_malloc_r+0xfc>
 8003f5c:	f000 f868 	bl	8004030 <__malloc_lock>
 8003f60:	f8d8 3000 	ldr.w	r3, [r8]
 8003f64:	461c      	mov	r4, r3
 8003f66:	bb5c      	cbnz	r4, 8003fc0 <_malloc_r+0x90>
 8003f68:	4629      	mov	r1, r5
 8003f6a:	4638      	mov	r0, r7
 8003f6c:	f7ff ffc0 	bl	8003ef0 <sbrk_aligned>
 8003f70:	1c43      	adds	r3, r0, #1
 8003f72:	4604      	mov	r4, r0
 8003f74:	d155      	bne.n	8004022 <_malloc_r+0xf2>
 8003f76:	f8d8 4000 	ldr.w	r4, [r8]
 8003f7a:	4626      	mov	r6, r4
 8003f7c:	2e00      	cmp	r6, #0
 8003f7e:	d145      	bne.n	800400c <_malloc_r+0xdc>
 8003f80:	2c00      	cmp	r4, #0
 8003f82:	d048      	beq.n	8004016 <_malloc_r+0xe6>
 8003f84:	6823      	ldr	r3, [r4, #0]
 8003f86:	4631      	mov	r1, r6
 8003f88:	4638      	mov	r0, r7
 8003f8a:	eb04 0903 	add.w	r9, r4, r3
 8003f8e:	f000 fe87 	bl	8004ca0 <_sbrk_r>
 8003f92:	4581      	cmp	r9, r0
 8003f94:	d13f      	bne.n	8004016 <_malloc_r+0xe6>
 8003f96:	6821      	ldr	r1, [r4, #0]
 8003f98:	4638      	mov	r0, r7
 8003f9a:	1a6d      	subs	r5, r5, r1
 8003f9c:	4629      	mov	r1, r5
 8003f9e:	f7ff ffa7 	bl	8003ef0 <sbrk_aligned>
 8003fa2:	3001      	adds	r0, #1
 8003fa4:	d037      	beq.n	8004016 <_malloc_r+0xe6>
 8003fa6:	6823      	ldr	r3, [r4, #0]
 8003fa8:	442b      	add	r3, r5
 8003faa:	6023      	str	r3, [r4, #0]
 8003fac:	f8d8 3000 	ldr.w	r3, [r8]
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d038      	beq.n	8004026 <_malloc_r+0xf6>
 8003fb4:	685a      	ldr	r2, [r3, #4]
 8003fb6:	42a2      	cmp	r2, r4
 8003fb8:	d12b      	bne.n	8004012 <_malloc_r+0xe2>
 8003fba:	2200      	movs	r2, #0
 8003fbc:	605a      	str	r2, [r3, #4]
 8003fbe:	e00f      	b.n	8003fe0 <_malloc_r+0xb0>
 8003fc0:	6822      	ldr	r2, [r4, #0]
 8003fc2:	1b52      	subs	r2, r2, r5
 8003fc4:	d41f      	bmi.n	8004006 <_malloc_r+0xd6>
 8003fc6:	2a0b      	cmp	r2, #11
 8003fc8:	d917      	bls.n	8003ffa <_malloc_r+0xca>
 8003fca:	1961      	adds	r1, r4, r5
 8003fcc:	42a3      	cmp	r3, r4
 8003fce:	6025      	str	r5, [r4, #0]
 8003fd0:	bf18      	it	ne
 8003fd2:	6059      	strne	r1, [r3, #4]
 8003fd4:	6863      	ldr	r3, [r4, #4]
 8003fd6:	bf08      	it	eq
 8003fd8:	f8c8 1000 	streq.w	r1, [r8]
 8003fdc:	5162      	str	r2, [r4, r5]
 8003fde:	604b      	str	r3, [r1, #4]
 8003fe0:	f104 060b 	add.w	r6, r4, #11
 8003fe4:	4638      	mov	r0, r7
 8003fe6:	f000 f829 	bl	800403c <__malloc_unlock>
 8003fea:	1d23      	adds	r3, r4, #4
 8003fec:	f026 0607 	bic.w	r6, r6, #7
 8003ff0:	1af2      	subs	r2, r6, r3
 8003ff2:	d0ae      	beq.n	8003f52 <_malloc_r+0x22>
 8003ff4:	1b9b      	subs	r3, r3, r6
 8003ff6:	50a3      	str	r3, [r4, r2]
 8003ff8:	e7ab      	b.n	8003f52 <_malloc_r+0x22>
 8003ffa:	42a3      	cmp	r3, r4
 8003ffc:	6862      	ldr	r2, [r4, #4]
 8003ffe:	d1dd      	bne.n	8003fbc <_malloc_r+0x8c>
 8004000:	f8c8 2000 	str.w	r2, [r8]
 8004004:	e7ec      	b.n	8003fe0 <_malloc_r+0xb0>
 8004006:	4623      	mov	r3, r4
 8004008:	6864      	ldr	r4, [r4, #4]
 800400a:	e7ac      	b.n	8003f66 <_malloc_r+0x36>
 800400c:	4634      	mov	r4, r6
 800400e:	6876      	ldr	r6, [r6, #4]
 8004010:	e7b4      	b.n	8003f7c <_malloc_r+0x4c>
 8004012:	4613      	mov	r3, r2
 8004014:	e7cc      	b.n	8003fb0 <_malloc_r+0x80>
 8004016:	230c      	movs	r3, #12
 8004018:	4638      	mov	r0, r7
 800401a:	603b      	str	r3, [r7, #0]
 800401c:	f000 f80e 	bl	800403c <__malloc_unlock>
 8004020:	e797      	b.n	8003f52 <_malloc_r+0x22>
 8004022:	6025      	str	r5, [r4, #0]
 8004024:	e7dc      	b.n	8003fe0 <_malloc_r+0xb0>
 8004026:	605b      	str	r3, [r3, #4]
 8004028:	deff      	udf	#255	; 0xff
 800402a:	bf00      	nop
 800402c:	200003d4 	.word	0x200003d4

08004030 <__malloc_lock>:
 8004030:	4801      	ldr	r0, [pc, #4]	; (8004038 <__malloc_lock+0x8>)
 8004032:	f7ff b878 	b.w	8003126 <__retarget_lock_acquire_recursive>
 8004036:	bf00      	nop
 8004038:	200003d0 	.word	0x200003d0

0800403c <__malloc_unlock>:
 800403c:	4801      	ldr	r0, [pc, #4]	; (8004044 <__malloc_unlock+0x8>)
 800403e:	f7ff b873 	b.w	8003128 <__retarget_lock_release_recursive>
 8004042:	bf00      	nop
 8004044:	200003d0 	.word	0x200003d0

08004048 <_Balloc>:
 8004048:	b570      	push	{r4, r5, r6, lr}
 800404a:	69c6      	ldr	r6, [r0, #28]
 800404c:	4604      	mov	r4, r0
 800404e:	460d      	mov	r5, r1
 8004050:	b976      	cbnz	r6, 8004070 <_Balloc+0x28>
 8004052:	2010      	movs	r0, #16
 8004054:	f7ff ff44 	bl	8003ee0 <malloc>
 8004058:	4602      	mov	r2, r0
 800405a:	61e0      	str	r0, [r4, #28]
 800405c:	b920      	cbnz	r0, 8004068 <_Balloc+0x20>
 800405e:	4b18      	ldr	r3, [pc, #96]	; (80040c0 <_Balloc+0x78>)
 8004060:	216b      	movs	r1, #107	; 0x6b
 8004062:	4818      	ldr	r0, [pc, #96]	; (80040c4 <_Balloc+0x7c>)
 8004064:	f000 fe3a 	bl	8004cdc <__assert_func>
 8004068:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800406c:	6006      	str	r6, [r0, #0]
 800406e:	60c6      	str	r6, [r0, #12]
 8004070:	69e6      	ldr	r6, [r4, #28]
 8004072:	68f3      	ldr	r3, [r6, #12]
 8004074:	b183      	cbz	r3, 8004098 <_Balloc+0x50>
 8004076:	69e3      	ldr	r3, [r4, #28]
 8004078:	68db      	ldr	r3, [r3, #12]
 800407a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800407e:	b9b8      	cbnz	r0, 80040b0 <_Balloc+0x68>
 8004080:	2101      	movs	r1, #1
 8004082:	4620      	mov	r0, r4
 8004084:	fa01 f605 	lsl.w	r6, r1, r5
 8004088:	1d72      	adds	r2, r6, #5
 800408a:	0092      	lsls	r2, r2, #2
 800408c:	f000 fe44 	bl	8004d18 <_calloc_r>
 8004090:	b160      	cbz	r0, 80040ac <_Balloc+0x64>
 8004092:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8004096:	e00e      	b.n	80040b6 <_Balloc+0x6e>
 8004098:	2221      	movs	r2, #33	; 0x21
 800409a:	2104      	movs	r1, #4
 800409c:	4620      	mov	r0, r4
 800409e:	f000 fe3b 	bl	8004d18 <_calloc_r>
 80040a2:	69e3      	ldr	r3, [r4, #28]
 80040a4:	60f0      	str	r0, [r6, #12]
 80040a6:	68db      	ldr	r3, [r3, #12]
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d1e4      	bne.n	8004076 <_Balloc+0x2e>
 80040ac:	2000      	movs	r0, #0
 80040ae:	bd70      	pop	{r4, r5, r6, pc}
 80040b0:	6802      	ldr	r2, [r0, #0]
 80040b2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80040b6:	2300      	movs	r3, #0
 80040b8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80040bc:	e7f7      	b.n	80040ae <_Balloc+0x66>
 80040be:	bf00      	nop
 80040c0:	08005165 	.word	0x08005165
 80040c4:	080051e5 	.word	0x080051e5

080040c8 <_Bfree>:
 80040c8:	b570      	push	{r4, r5, r6, lr}
 80040ca:	69c6      	ldr	r6, [r0, #28]
 80040cc:	4605      	mov	r5, r0
 80040ce:	460c      	mov	r4, r1
 80040d0:	b976      	cbnz	r6, 80040f0 <_Bfree+0x28>
 80040d2:	2010      	movs	r0, #16
 80040d4:	f7ff ff04 	bl	8003ee0 <malloc>
 80040d8:	4602      	mov	r2, r0
 80040da:	61e8      	str	r0, [r5, #28]
 80040dc:	b920      	cbnz	r0, 80040e8 <_Bfree+0x20>
 80040de:	4b09      	ldr	r3, [pc, #36]	; (8004104 <_Bfree+0x3c>)
 80040e0:	218f      	movs	r1, #143	; 0x8f
 80040e2:	4809      	ldr	r0, [pc, #36]	; (8004108 <_Bfree+0x40>)
 80040e4:	f000 fdfa 	bl	8004cdc <__assert_func>
 80040e8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80040ec:	6006      	str	r6, [r0, #0]
 80040ee:	60c6      	str	r6, [r0, #12]
 80040f0:	b13c      	cbz	r4, 8004102 <_Bfree+0x3a>
 80040f2:	69eb      	ldr	r3, [r5, #28]
 80040f4:	6862      	ldr	r2, [r4, #4]
 80040f6:	68db      	ldr	r3, [r3, #12]
 80040f8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80040fc:	6021      	str	r1, [r4, #0]
 80040fe:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8004102:	bd70      	pop	{r4, r5, r6, pc}
 8004104:	08005165 	.word	0x08005165
 8004108:	080051e5 	.word	0x080051e5

0800410c <__multadd>:
 800410c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004110:	f101 0c14 	add.w	ip, r1, #20
 8004114:	4607      	mov	r7, r0
 8004116:	460c      	mov	r4, r1
 8004118:	461e      	mov	r6, r3
 800411a:	690d      	ldr	r5, [r1, #16]
 800411c:	2000      	movs	r0, #0
 800411e:	f8dc 3000 	ldr.w	r3, [ip]
 8004122:	3001      	adds	r0, #1
 8004124:	b299      	uxth	r1, r3
 8004126:	4285      	cmp	r5, r0
 8004128:	fb02 6101 	mla	r1, r2, r1, r6
 800412c:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8004130:	ea4f 4311 	mov.w	r3, r1, lsr #16
 8004134:	b289      	uxth	r1, r1
 8004136:	fb02 3306 	mla	r3, r2, r6, r3
 800413a:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800413e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8004142:	f84c 1b04 	str.w	r1, [ip], #4
 8004146:	dcea      	bgt.n	800411e <__multadd+0x12>
 8004148:	b30e      	cbz	r6, 800418e <__multadd+0x82>
 800414a:	68a3      	ldr	r3, [r4, #8]
 800414c:	42ab      	cmp	r3, r5
 800414e:	dc19      	bgt.n	8004184 <__multadd+0x78>
 8004150:	6861      	ldr	r1, [r4, #4]
 8004152:	4638      	mov	r0, r7
 8004154:	3101      	adds	r1, #1
 8004156:	f7ff ff77 	bl	8004048 <_Balloc>
 800415a:	4680      	mov	r8, r0
 800415c:	b928      	cbnz	r0, 800416a <__multadd+0x5e>
 800415e:	4602      	mov	r2, r0
 8004160:	4b0c      	ldr	r3, [pc, #48]	; (8004194 <__multadd+0x88>)
 8004162:	21ba      	movs	r1, #186	; 0xba
 8004164:	480c      	ldr	r0, [pc, #48]	; (8004198 <__multadd+0x8c>)
 8004166:	f000 fdb9 	bl	8004cdc <__assert_func>
 800416a:	6922      	ldr	r2, [r4, #16]
 800416c:	f104 010c 	add.w	r1, r4, #12
 8004170:	300c      	adds	r0, #12
 8004172:	3202      	adds	r2, #2
 8004174:	0092      	lsls	r2, r2, #2
 8004176:	f000 fda3 	bl	8004cc0 <memcpy>
 800417a:	4621      	mov	r1, r4
 800417c:	4644      	mov	r4, r8
 800417e:	4638      	mov	r0, r7
 8004180:	f7ff ffa2 	bl	80040c8 <_Bfree>
 8004184:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8004188:	3501      	adds	r5, #1
 800418a:	615e      	str	r6, [r3, #20]
 800418c:	6125      	str	r5, [r4, #16]
 800418e:	4620      	mov	r0, r4
 8004190:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004194:	080051d4 	.word	0x080051d4
 8004198:	080051e5 	.word	0x080051e5

0800419c <__hi0bits>:
 800419c:	0c03      	lsrs	r3, r0, #16
 800419e:	041b      	lsls	r3, r3, #16
 80041a0:	b9d3      	cbnz	r3, 80041d8 <__hi0bits+0x3c>
 80041a2:	0400      	lsls	r0, r0, #16
 80041a4:	2310      	movs	r3, #16
 80041a6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80041aa:	bf04      	itt	eq
 80041ac:	0200      	lsleq	r0, r0, #8
 80041ae:	3308      	addeq	r3, #8
 80041b0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80041b4:	bf04      	itt	eq
 80041b6:	0100      	lsleq	r0, r0, #4
 80041b8:	3304      	addeq	r3, #4
 80041ba:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80041be:	bf04      	itt	eq
 80041c0:	0080      	lsleq	r0, r0, #2
 80041c2:	3302      	addeq	r3, #2
 80041c4:	2800      	cmp	r0, #0
 80041c6:	db05      	blt.n	80041d4 <__hi0bits+0x38>
 80041c8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80041cc:	f103 0301 	add.w	r3, r3, #1
 80041d0:	bf08      	it	eq
 80041d2:	2320      	moveq	r3, #32
 80041d4:	4618      	mov	r0, r3
 80041d6:	4770      	bx	lr
 80041d8:	2300      	movs	r3, #0
 80041da:	e7e4      	b.n	80041a6 <__hi0bits+0xa>

080041dc <__lo0bits>:
 80041dc:	6803      	ldr	r3, [r0, #0]
 80041de:	f013 0207 	ands.w	r2, r3, #7
 80041e2:	d00c      	beq.n	80041fe <__lo0bits+0x22>
 80041e4:	07d9      	lsls	r1, r3, #31
 80041e6:	d422      	bmi.n	800422e <__lo0bits+0x52>
 80041e8:	079a      	lsls	r2, r3, #30
 80041ea:	bf47      	ittee	mi
 80041ec:	085b      	lsrmi	r3, r3, #1
 80041ee:	2201      	movmi	r2, #1
 80041f0:	089b      	lsrpl	r3, r3, #2
 80041f2:	2202      	movpl	r2, #2
 80041f4:	bf4c      	ite	mi
 80041f6:	6003      	strmi	r3, [r0, #0]
 80041f8:	6003      	strpl	r3, [r0, #0]
 80041fa:	4610      	mov	r0, r2
 80041fc:	4770      	bx	lr
 80041fe:	b299      	uxth	r1, r3
 8004200:	b909      	cbnz	r1, 8004206 <__lo0bits+0x2a>
 8004202:	0c1b      	lsrs	r3, r3, #16
 8004204:	2210      	movs	r2, #16
 8004206:	b2d9      	uxtb	r1, r3
 8004208:	b909      	cbnz	r1, 800420e <__lo0bits+0x32>
 800420a:	3208      	adds	r2, #8
 800420c:	0a1b      	lsrs	r3, r3, #8
 800420e:	0719      	lsls	r1, r3, #28
 8004210:	bf04      	itt	eq
 8004212:	091b      	lsreq	r3, r3, #4
 8004214:	3204      	addeq	r2, #4
 8004216:	0799      	lsls	r1, r3, #30
 8004218:	bf04      	itt	eq
 800421a:	089b      	lsreq	r3, r3, #2
 800421c:	3202      	addeq	r2, #2
 800421e:	07d9      	lsls	r1, r3, #31
 8004220:	d403      	bmi.n	800422a <__lo0bits+0x4e>
 8004222:	085b      	lsrs	r3, r3, #1
 8004224:	f102 0201 	add.w	r2, r2, #1
 8004228:	d003      	beq.n	8004232 <__lo0bits+0x56>
 800422a:	6003      	str	r3, [r0, #0]
 800422c:	e7e5      	b.n	80041fa <__lo0bits+0x1e>
 800422e:	2200      	movs	r2, #0
 8004230:	e7e3      	b.n	80041fa <__lo0bits+0x1e>
 8004232:	2220      	movs	r2, #32
 8004234:	e7e1      	b.n	80041fa <__lo0bits+0x1e>
	...

08004238 <__i2b>:
 8004238:	b510      	push	{r4, lr}
 800423a:	460c      	mov	r4, r1
 800423c:	2101      	movs	r1, #1
 800423e:	f7ff ff03 	bl	8004048 <_Balloc>
 8004242:	4602      	mov	r2, r0
 8004244:	b928      	cbnz	r0, 8004252 <__i2b+0x1a>
 8004246:	4b05      	ldr	r3, [pc, #20]	; (800425c <__i2b+0x24>)
 8004248:	f240 1145 	movw	r1, #325	; 0x145
 800424c:	4804      	ldr	r0, [pc, #16]	; (8004260 <__i2b+0x28>)
 800424e:	f000 fd45 	bl	8004cdc <__assert_func>
 8004252:	2301      	movs	r3, #1
 8004254:	6144      	str	r4, [r0, #20]
 8004256:	6103      	str	r3, [r0, #16]
 8004258:	bd10      	pop	{r4, pc}
 800425a:	bf00      	nop
 800425c:	080051d4 	.word	0x080051d4
 8004260:	080051e5 	.word	0x080051e5

08004264 <__multiply>:
 8004264:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004268:	4691      	mov	r9, r2
 800426a:	690a      	ldr	r2, [r1, #16]
 800426c:	460c      	mov	r4, r1
 800426e:	b085      	sub	sp, #20
 8004270:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8004274:	429a      	cmp	r2, r3
 8004276:	bfbe      	ittt	lt
 8004278:	460b      	movlt	r3, r1
 800427a:	464c      	movlt	r4, r9
 800427c:	4699      	movlt	r9, r3
 800427e:	6927      	ldr	r7, [r4, #16]
 8004280:	68a3      	ldr	r3, [r4, #8]
 8004282:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8004286:	6861      	ldr	r1, [r4, #4]
 8004288:	eb07 060a 	add.w	r6, r7, sl
 800428c:	42b3      	cmp	r3, r6
 800428e:	bfb8      	it	lt
 8004290:	3101      	addlt	r1, #1
 8004292:	f7ff fed9 	bl	8004048 <_Balloc>
 8004296:	b930      	cbnz	r0, 80042a6 <__multiply+0x42>
 8004298:	4602      	mov	r2, r0
 800429a:	4b45      	ldr	r3, [pc, #276]	; (80043b0 <__multiply+0x14c>)
 800429c:	f44f 71b1 	mov.w	r1, #354	; 0x162
 80042a0:	4844      	ldr	r0, [pc, #272]	; (80043b4 <__multiply+0x150>)
 80042a2:	f000 fd1b 	bl	8004cdc <__assert_func>
 80042a6:	f100 0514 	add.w	r5, r0, #20
 80042aa:	2200      	movs	r2, #0
 80042ac:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80042b0:	462b      	mov	r3, r5
 80042b2:	4543      	cmp	r3, r8
 80042b4:	d321      	bcc.n	80042fa <__multiply+0x96>
 80042b6:	f104 0314 	add.w	r3, r4, #20
 80042ba:	f104 0115 	add.w	r1, r4, #21
 80042be:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80042c2:	f109 0314 	add.w	r3, r9, #20
 80042c6:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80042ca:	9202      	str	r2, [sp, #8]
 80042cc:	1b3a      	subs	r2, r7, r4
 80042ce:	3a15      	subs	r2, #21
 80042d0:	f022 0203 	bic.w	r2, r2, #3
 80042d4:	3204      	adds	r2, #4
 80042d6:	428f      	cmp	r7, r1
 80042d8:	bf38      	it	cc
 80042da:	2204      	movcc	r2, #4
 80042dc:	9201      	str	r2, [sp, #4]
 80042de:	9a02      	ldr	r2, [sp, #8]
 80042e0:	9303      	str	r3, [sp, #12]
 80042e2:	429a      	cmp	r2, r3
 80042e4:	d80c      	bhi.n	8004300 <__multiply+0x9c>
 80042e6:	2e00      	cmp	r6, #0
 80042e8:	dd03      	ble.n	80042f2 <__multiply+0x8e>
 80042ea:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d05b      	beq.n	80043aa <__multiply+0x146>
 80042f2:	6106      	str	r6, [r0, #16]
 80042f4:	b005      	add	sp, #20
 80042f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80042fa:	f843 2b04 	str.w	r2, [r3], #4
 80042fe:	e7d8      	b.n	80042b2 <__multiply+0x4e>
 8004300:	f8b3 a000 	ldrh.w	sl, [r3]
 8004304:	f1ba 0f00 	cmp.w	sl, #0
 8004308:	d024      	beq.n	8004354 <__multiply+0xf0>
 800430a:	f104 0e14 	add.w	lr, r4, #20
 800430e:	46a9      	mov	r9, r5
 8004310:	f04f 0c00 	mov.w	ip, #0
 8004314:	f85e 2b04 	ldr.w	r2, [lr], #4
 8004318:	f8d9 1000 	ldr.w	r1, [r9]
 800431c:	fa1f fb82 	uxth.w	fp, r2
 8004320:	4577      	cmp	r7, lr
 8004322:	b289      	uxth	r1, r1
 8004324:	fb0a 110b 	mla	r1, sl, fp, r1
 8004328:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800432c:	f8d9 2000 	ldr.w	r2, [r9]
 8004330:	4461      	add	r1, ip
 8004332:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8004336:	fb0a c20b 	mla	r2, sl, fp, ip
 800433a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800433e:	b289      	uxth	r1, r1
 8004340:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8004344:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8004348:	f849 1b04 	str.w	r1, [r9], #4
 800434c:	d8e2      	bhi.n	8004314 <__multiply+0xb0>
 800434e:	9a01      	ldr	r2, [sp, #4]
 8004350:	f845 c002 	str.w	ip, [r5, r2]
 8004354:	9a03      	ldr	r2, [sp, #12]
 8004356:	3304      	adds	r3, #4
 8004358:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800435c:	f1b9 0f00 	cmp.w	r9, #0
 8004360:	d021      	beq.n	80043a6 <__multiply+0x142>
 8004362:	6829      	ldr	r1, [r5, #0]
 8004364:	f104 0c14 	add.w	ip, r4, #20
 8004368:	46ae      	mov	lr, r5
 800436a:	f04f 0a00 	mov.w	sl, #0
 800436e:	f8bc b000 	ldrh.w	fp, [ip]
 8004372:	b289      	uxth	r1, r1
 8004374:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8004378:	fb09 220b 	mla	r2, r9, fp, r2
 800437c:	4452      	add	r2, sl
 800437e:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8004382:	f84e 1b04 	str.w	r1, [lr], #4
 8004386:	f85c 1b04 	ldr.w	r1, [ip], #4
 800438a:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800438e:	f8be 1000 	ldrh.w	r1, [lr]
 8004392:	4567      	cmp	r7, ip
 8004394:	fb09 110a 	mla	r1, r9, sl, r1
 8004398:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800439c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80043a0:	d8e5      	bhi.n	800436e <__multiply+0x10a>
 80043a2:	9a01      	ldr	r2, [sp, #4]
 80043a4:	50a9      	str	r1, [r5, r2]
 80043a6:	3504      	adds	r5, #4
 80043a8:	e799      	b.n	80042de <__multiply+0x7a>
 80043aa:	3e01      	subs	r6, #1
 80043ac:	e79b      	b.n	80042e6 <__multiply+0x82>
 80043ae:	bf00      	nop
 80043b0:	080051d4 	.word	0x080051d4
 80043b4:	080051e5 	.word	0x080051e5

080043b8 <__pow5mult>:
 80043b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80043bc:	4615      	mov	r5, r2
 80043be:	f012 0203 	ands.w	r2, r2, #3
 80043c2:	4606      	mov	r6, r0
 80043c4:	460f      	mov	r7, r1
 80043c6:	d007      	beq.n	80043d8 <__pow5mult+0x20>
 80043c8:	3a01      	subs	r2, #1
 80043ca:	4c25      	ldr	r4, [pc, #148]	; (8004460 <__pow5mult+0xa8>)
 80043cc:	2300      	movs	r3, #0
 80043ce:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80043d2:	f7ff fe9b 	bl	800410c <__multadd>
 80043d6:	4607      	mov	r7, r0
 80043d8:	10ad      	asrs	r5, r5, #2
 80043da:	d03d      	beq.n	8004458 <__pow5mult+0xa0>
 80043dc:	69f4      	ldr	r4, [r6, #28]
 80043de:	b97c      	cbnz	r4, 8004400 <__pow5mult+0x48>
 80043e0:	2010      	movs	r0, #16
 80043e2:	f7ff fd7d 	bl	8003ee0 <malloc>
 80043e6:	4602      	mov	r2, r0
 80043e8:	61f0      	str	r0, [r6, #28]
 80043ea:	b928      	cbnz	r0, 80043f8 <__pow5mult+0x40>
 80043ec:	4b1d      	ldr	r3, [pc, #116]	; (8004464 <__pow5mult+0xac>)
 80043ee:	f240 11b3 	movw	r1, #435	; 0x1b3
 80043f2:	481d      	ldr	r0, [pc, #116]	; (8004468 <__pow5mult+0xb0>)
 80043f4:	f000 fc72 	bl	8004cdc <__assert_func>
 80043f8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80043fc:	6004      	str	r4, [r0, #0]
 80043fe:	60c4      	str	r4, [r0, #12]
 8004400:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8004404:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8004408:	b94c      	cbnz	r4, 800441e <__pow5mult+0x66>
 800440a:	f240 2171 	movw	r1, #625	; 0x271
 800440e:	4630      	mov	r0, r6
 8004410:	f7ff ff12 	bl	8004238 <__i2b>
 8004414:	2300      	movs	r3, #0
 8004416:	4604      	mov	r4, r0
 8004418:	f8c8 0008 	str.w	r0, [r8, #8]
 800441c:	6003      	str	r3, [r0, #0]
 800441e:	f04f 0900 	mov.w	r9, #0
 8004422:	07eb      	lsls	r3, r5, #31
 8004424:	d50a      	bpl.n	800443c <__pow5mult+0x84>
 8004426:	4639      	mov	r1, r7
 8004428:	4622      	mov	r2, r4
 800442a:	4630      	mov	r0, r6
 800442c:	f7ff ff1a 	bl	8004264 <__multiply>
 8004430:	4680      	mov	r8, r0
 8004432:	4639      	mov	r1, r7
 8004434:	4630      	mov	r0, r6
 8004436:	4647      	mov	r7, r8
 8004438:	f7ff fe46 	bl	80040c8 <_Bfree>
 800443c:	106d      	asrs	r5, r5, #1
 800443e:	d00b      	beq.n	8004458 <__pow5mult+0xa0>
 8004440:	6820      	ldr	r0, [r4, #0]
 8004442:	b938      	cbnz	r0, 8004454 <__pow5mult+0x9c>
 8004444:	4622      	mov	r2, r4
 8004446:	4621      	mov	r1, r4
 8004448:	4630      	mov	r0, r6
 800444a:	f7ff ff0b 	bl	8004264 <__multiply>
 800444e:	6020      	str	r0, [r4, #0]
 8004450:	f8c0 9000 	str.w	r9, [r0]
 8004454:	4604      	mov	r4, r0
 8004456:	e7e4      	b.n	8004422 <__pow5mult+0x6a>
 8004458:	4638      	mov	r0, r7
 800445a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800445e:	bf00      	nop
 8004460:	08005330 	.word	0x08005330
 8004464:	08005165 	.word	0x08005165
 8004468:	080051e5 	.word	0x080051e5

0800446c <__lshift>:
 800446c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004470:	460c      	mov	r4, r1
 8004472:	4607      	mov	r7, r0
 8004474:	4691      	mov	r9, r2
 8004476:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800447a:	6923      	ldr	r3, [r4, #16]
 800447c:	6849      	ldr	r1, [r1, #4]
 800447e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8004482:	68a3      	ldr	r3, [r4, #8]
 8004484:	f108 0601 	add.w	r6, r8, #1
 8004488:	42b3      	cmp	r3, r6
 800448a:	db0b      	blt.n	80044a4 <__lshift+0x38>
 800448c:	4638      	mov	r0, r7
 800448e:	f7ff fddb 	bl	8004048 <_Balloc>
 8004492:	4605      	mov	r5, r0
 8004494:	b948      	cbnz	r0, 80044aa <__lshift+0x3e>
 8004496:	4602      	mov	r2, r0
 8004498:	4b28      	ldr	r3, [pc, #160]	; (800453c <__lshift+0xd0>)
 800449a:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800449e:	4828      	ldr	r0, [pc, #160]	; (8004540 <__lshift+0xd4>)
 80044a0:	f000 fc1c 	bl	8004cdc <__assert_func>
 80044a4:	3101      	adds	r1, #1
 80044a6:	005b      	lsls	r3, r3, #1
 80044a8:	e7ee      	b.n	8004488 <__lshift+0x1c>
 80044aa:	2300      	movs	r3, #0
 80044ac:	f100 0114 	add.w	r1, r0, #20
 80044b0:	f100 0210 	add.w	r2, r0, #16
 80044b4:	4618      	mov	r0, r3
 80044b6:	4553      	cmp	r3, sl
 80044b8:	db33      	blt.n	8004522 <__lshift+0xb6>
 80044ba:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80044be:	f104 0314 	add.w	r3, r4, #20
 80044c2:	6920      	ldr	r0, [r4, #16]
 80044c4:	f019 091f 	ands.w	r9, r9, #31
 80044c8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80044cc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80044d0:	d02b      	beq.n	800452a <__lshift+0xbe>
 80044d2:	f1c9 0e20 	rsb	lr, r9, #32
 80044d6:	468a      	mov	sl, r1
 80044d8:	2200      	movs	r2, #0
 80044da:	6818      	ldr	r0, [r3, #0]
 80044dc:	fa00 f009 	lsl.w	r0, r0, r9
 80044e0:	4310      	orrs	r0, r2
 80044e2:	f84a 0b04 	str.w	r0, [sl], #4
 80044e6:	f853 2b04 	ldr.w	r2, [r3], #4
 80044ea:	459c      	cmp	ip, r3
 80044ec:	fa22 f20e 	lsr.w	r2, r2, lr
 80044f0:	d8f3      	bhi.n	80044da <__lshift+0x6e>
 80044f2:	ebac 0304 	sub.w	r3, ip, r4
 80044f6:	f104 0015 	add.w	r0, r4, #21
 80044fa:	3b15      	subs	r3, #21
 80044fc:	f023 0303 	bic.w	r3, r3, #3
 8004500:	3304      	adds	r3, #4
 8004502:	4584      	cmp	ip, r0
 8004504:	bf38      	it	cc
 8004506:	2304      	movcc	r3, #4
 8004508:	50ca      	str	r2, [r1, r3]
 800450a:	b10a      	cbz	r2, 8004510 <__lshift+0xa4>
 800450c:	f108 0602 	add.w	r6, r8, #2
 8004510:	3e01      	subs	r6, #1
 8004512:	4638      	mov	r0, r7
 8004514:	4621      	mov	r1, r4
 8004516:	612e      	str	r6, [r5, #16]
 8004518:	f7ff fdd6 	bl	80040c8 <_Bfree>
 800451c:	4628      	mov	r0, r5
 800451e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004522:	3301      	adds	r3, #1
 8004524:	f842 0f04 	str.w	r0, [r2, #4]!
 8004528:	e7c5      	b.n	80044b6 <__lshift+0x4a>
 800452a:	3904      	subs	r1, #4
 800452c:	f853 2b04 	ldr.w	r2, [r3], #4
 8004530:	459c      	cmp	ip, r3
 8004532:	f841 2f04 	str.w	r2, [r1, #4]!
 8004536:	d8f9      	bhi.n	800452c <__lshift+0xc0>
 8004538:	e7ea      	b.n	8004510 <__lshift+0xa4>
 800453a:	bf00      	nop
 800453c:	080051d4 	.word	0x080051d4
 8004540:	080051e5 	.word	0x080051e5

08004544 <__mcmp>:
 8004544:	6902      	ldr	r2, [r0, #16]
 8004546:	b530      	push	{r4, r5, lr}
 8004548:	690c      	ldr	r4, [r1, #16]
 800454a:	1b12      	subs	r2, r2, r4
 800454c:	d10e      	bne.n	800456c <__mcmp+0x28>
 800454e:	f100 0314 	add.w	r3, r0, #20
 8004552:	3114      	adds	r1, #20
 8004554:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8004558:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800455c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8004560:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8004564:	42a5      	cmp	r5, r4
 8004566:	d003      	beq.n	8004570 <__mcmp+0x2c>
 8004568:	d305      	bcc.n	8004576 <__mcmp+0x32>
 800456a:	2201      	movs	r2, #1
 800456c:	4610      	mov	r0, r2
 800456e:	bd30      	pop	{r4, r5, pc}
 8004570:	4283      	cmp	r3, r0
 8004572:	d3f3      	bcc.n	800455c <__mcmp+0x18>
 8004574:	e7fa      	b.n	800456c <__mcmp+0x28>
 8004576:	f04f 32ff 	mov.w	r2, #4294967295
 800457a:	e7f7      	b.n	800456c <__mcmp+0x28>

0800457c <__mdiff>:
 800457c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004580:	460c      	mov	r4, r1
 8004582:	4606      	mov	r6, r0
 8004584:	4611      	mov	r1, r2
 8004586:	4692      	mov	sl, r2
 8004588:	4620      	mov	r0, r4
 800458a:	f7ff ffdb 	bl	8004544 <__mcmp>
 800458e:	1e05      	subs	r5, r0, #0
 8004590:	d110      	bne.n	80045b4 <__mdiff+0x38>
 8004592:	4629      	mov	r1, r5
 8004594:	4630      	mov	r0, r6
 8004596:	f7ff fd57 	bl	8004048 <_Balloc>
 800459a:	b930      	cbnz	r0, 80045aa <__mdiff+0x2e>
 800459c:	4b3d      	ldr	r3, [pc, #244]	; (8004694 <__mdiff+0x118>)
 800459e:	4602      	mov	r2, r0
 80045a0:	f240 2137 	movw	r1, #567	; 0x237
 80045a4:	483c      	ldr	r0, [pc, #240]	; (8004698 <__mdiff+0x11c>)
 80045a6:	f000 fb99 	bl	8004cdc <__assert_func>
 80045aa:	2301      	movs	r3, #1
 80045ac:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80045b0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80045b4:	bfa4      	itt	ge
 80045b6:	4653      	movge	r3, sl
 80045b8:	46a2      	movge	sl, r4
 80045ba:	4630      	mov	r0, r6
 80045bc:	bfa8      	it	ge
 80045be:	2500      	movge	r5, #0
 80045c0:	f8da 1004 	ldr.w	r1, [sl, #4]
 80045c4:	bfac      	ite	ge
 80045c6:	461c      	movge	r4, r3
 80045c8:	2501      	movlt	r5, #1
 80045ca:	f7ff fd3d 	bl	8004048 <_Balloc>
 80045ce:	b920      	cbnz	r0, 80045da <__mdiff+0x5e>
 80045d0:	4b30      	ldr	r3, [pc, #192]	; (8004694 <__mdiff+0x118>)
 80045d2:	4602      	mov	r2, r0
 80045d4:	f240 2145 	movw	r1, #581	; 0x245
 80045d8:	e7e4      	b.n	80045a4 <__mdiff+0x28>
 80045da:	f8da 7010 	ldr.w	r7, [sl, #16]
 80045de:	f104 0914 	add.w	r9, r4, #20
 80045e2:	6926      	ldr	r6, [r4, #16]
 80045e4:	f100 0814 	add.w	r8, r0, #20
 80045e8:	60c5      	str	r5, [r0, #12]
 80045ea:	f10a 0514 	add.w	r5, sl, #20
 80045ee:	f10a 0210 	add.w	r2, sl, #16
 80045f2:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80045f6:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 80045fa:	46c2      	mov	sl, r8
 80045fc:	f04f 0c00 	mov.w	ip, #0
 8004600:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8004604:	f859 3b04 	ldr.w	r3, [r9], #4
 8004608:	fa1f f18b 	uxth.w	r1, fp
 800460c:	454e      	cmp	r6, r9
 800460e:	4461      	add	r1, ip
 8004610:	fa1f fc83 	uxth.w	ip, r3
 8004614:	ea4f 4313 	mov.w	r3, r3, lsr #16
 8004618:	eba1 010c 	sub.w	r1, r1, ip
 800461c:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8004620:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8004624:	b289      	uxth	r1, r1
 8004626:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800462a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800462e:	f84a 1b04 	str.w	r1, [sl], #4
 8004632:	d8e5      	bhi.n	8004600 <__mdiff+0x84>
 8004634:	1b33      	subs	r3, r6, r4
 8004636:	3415      	adds	r4, #21
 8004638:	3b15      	subs	r3, #21
 800463a:	f023 0303 	bic.w	r3, r3, #3
 800463e:	3304      	adds	r3, #4
 8004640:	42a6      	cmp	r6, r4
 8004642:	bf38      	it	cc
 8004644:	2304      	movcc	r3, #4
 8004646:	441d      	add	r5, r3
 8004648:	4443      	add	r3, r8
 800464a:	462c      	mov	r4, r5
 800464c:	461e      	mov	r6, r3
 800464e:	4574      	cmp	r4, lr
 8004650:	d30e      	bcc.n	8004670 <__mdiff+0xf4>
 8004652:	f10e 0203 	add.w	r2, lr, #3
 8004656:	1b52      	subs	r2, r2, r5
 8004658:	3d03      	subs	r5, #3
 800465a:	f022 0203 	bic.w	r2, r2, #3
 800465e:	45ae      	cmp	lr, r5
 8004660:	bf38      	it	cc
 8004662:	2200      	movcc	r2, #0
 8004664:	4413      	add	r3, r2
 8004666:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800466a:	b18a      	cbz	r2, 8004690 <__mdiff+0x114>
 800466c:	6107      	str	r7, [r0, #16]
 800466e:	e79f      	b.n	80045b0 <__mdiff+0x34>
 8004670:	f854 8b04 	ldr.w	r8, [r4], #4
 8004674:	fa1f f288 	uxth.w	r2, r8
 8004678:	4462      	add	r2, ip
 800467a:	1411      	asrs	r1, r2, #16
 800467c:	b292      	uxth	r2, r2
 800467e:	eb01 4118 	add.w	r1, r1, r8, lsr #16
 8004682:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8004686:	ea4f 4c21 	mov.w	ip, r1, asr #16
 800468a:	f846 2b04 	str.w	r2, [r6], #4
 800468e:	e7de      	b.n	800464e <__mdiff+0xd2>
 8004690:	3f01      	subs	r7, #1
 8004692:	e7e8      	b.n	8004666 <__mdiff+0xea>
 8004694:	080051d4 	.word	0x080051d4
 8004698:	080051e5 	.word	0x080051e5

0800469c <__d2b>:
 800469c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80046a0:	460f      	mov	r7, r1
 80046a2:	2101      	movs	r1, #1
 80046a4:	4616      	mov	r6, r2
 80046a6:	ec59 8b10 	vmov	r8, r9, d0
 80046aa:	f7ff fccd 	bl	8004048 <_Balloc>
 80046ae:	4604      	mov	r4, r0
 80046b0:	b930      	cbnz	r0, 80046c0 <__d2b+0x24>
 80046b2:	4602      	mov	r2, r0
 80046b4:	4b24      	ldr	r3, [pc, #144]	; (8004748 <__d2b+0xac>)
 80046b6:	f240 310f 	movw	r1, #783	; 0x30f
 80046ba:	4824      	ldr	r0, [pc, #144]	; (800474c <__d2b+0xb0>)
 80046bc:	f000 fb0e 	bl	8004cdc <__assert_func>
 80046c0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80046c4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80046c8:	bb2d      	cbnz	r5, 8004716 <__d2b+0x7a>
 80046ca:	9301      	str	r3, [sp, #4]
 80046cc:	f1b8 0300 	subs.w	r3, r8, #0
 80046d0:	d026      	beq.n	8004720 <__d2b+0x84>
 80046d2:	4668      	mov	r0, sp
 80046d4:	9300      	str	r3, [sp, #0]
 80046d6:	f7ff fd81 	bl	80041dc <__lo0bits>
 80046da:	e9dd 1200 	ldrd	r1, r2, [sp]
 80046de:	b1e8      	cbz	r0, 800471c <__d2b+0x80>
 80046e0:	f1c0 0320 	rsb	r3, r0, #32
 80046e4:	fa02 f303 	lsl.w	r3, r2, r3
 80046e8:	40c2      	lsrs	r2, r0
 80046ea:	430b      	orrs	r3, r1
 80046ec:	9201      	str	r2, [sp, #4]
 80046ee:	6163      	str	r3, [r4, #20]
 80046f0:	9b01      	ldr	r3, [sp, #4]
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	61a3      	str	r3, [r4, #24]
 80046f6:	bf14      	ite	ne
 80046f8:	2202      	movne	r2, #2
 80046fa:	2201      	moveq	r2, #1
 80046fc:	6122      	str	r2, [r4, #16]
 80046fe:	b1bd      	cbz	r5, 8004730 <__d2b+0x94>
 8004700:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8004704:	4405      	add	r5, r0
 8004706:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800470a:	603d      	str	r5, [r7, #0]
 800470c:	6030      	str	r0, [r6, #0]
 800470e:	4620      	mov	r0, r4
 8004710:	b003      	add	sp, #12
 8004712:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004716:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800471a:	e7d6      	b.n	80046ca <__d2b+0x2e>
 800471c:	6161      	str	r1, [r4, #20]
 800471e:	e7e7      	b.n	80046f0 <__d2b+0x54>
 8004720:	a801      	add	r0, sp, #4
 8004722:	f7ff fd5b 	bl	80041dc <__lo0bits>
 8004726:	9b01      	ldr	r3, [sp, #4]
 8004728:	3020      	adds	r0, #32
 800472a:	2201      	movs	r2, #1
 800472c:	6163      	str	r3, [r4, #20]
 800472e:	e7e5      	b.n	80046fc <__d2b+0x60>
 8004730:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8004734:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8004738:	6038      	str	r0, [r7, #0]
 800473a:	6918      	ldr	r0, [r3, #16]
 800473c:	f7ff fd2e 	bl	800419c <__hi0bits>
 8004740:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8004744:	e7e2      	b.n	800470c <__d2b+0x70>
 8004746:	bf00      	nop
 8004748:	080051d4 	.word	0x080051d4
 800474c:	080051e5 	.word	0x080051e5

08004750 <__sfputc_r>:
 8004750:	6893      	ldr	r3, [r2, #8]
 8004752:	3b01      	subs	r3, #1
 8004754:	2b00      	cmp	r3, #0
 8004756:	6093      	str	r3, [r2, #8]
 8004758:	b410      	push	{r4}
 800475a:	da08      	bge.n	800476e <__sfputc_r+0x1e>
 800475c:	6994      	ldr	r4, [r2, #24]
 800475e:	42a3      	cmp	r3, r4
 8004760:	db01      	blt.n	8004766 <__sfputc_r+0x16>
 8004762:	290a      	cmp	r1, #10
 8004764:	d103      	bne.n	800476e <__sfputc_r+0x1e>
 8004766:	f85d 4b04 	ldr.w	r4, [sp], #4
 800476a:	f7fe bbca 	b.w	8002f02 <__swbuf_r>
 800476e:	6813      	ldr	r3, [r2, #0]
 8004770:	1c58      	adds	r0, r3, #1
 8004772:	6010      	str	r0, [r2, #0]
 8004774:	4608      	mov	r0, r1
 8004776:	7019      	strb	r1, [r3, #0]
 8004778:	f85d 4b04 	ldr.w	r4, [sp], #4
 800477c:	4770      	bx	lr

0800477e <__sfputs_r>:
 800477e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004780:	4606      	mov	r6, r0
 8004782:	460f      	mov	r7, r1
 8004784:	4614      	mov	r4, r2
 8004786:	18d5      	adds	r5, r2, r3
 8004788:	42ac      	cmp	r4, r5
 800478a:	d101      	bne.n	8004790 <__sfputs_r+0x12>
 800478c:	2000      	movs	r0, #0
 800478e:	e007      	b.n	80047a0 <__sfputs_r+0x22>
 8004790:	463a      	mov	r2, r7
 8004792:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004796:	4630      	mov	r0, r6
 8004798:	f7ff ffda 	bl	8004750 <__sfputc_r>
 800479c:	1c43      	adds	r3, r0, #1
 800479e:	d1f3      	bne.n	8004788 <__sfputs_r+0xa>
 80047a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080047a4 <_vfiprintf_r>:
 80047a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80047a8:	460d      	mov	r5, r1
 80047aa:	b09d      	sub	sp, #116	; 0x74
 80047ac:	4614      	mov	r4, r2
 80047ae:	4698      	mov	r8, r3
 80047b0:	4606      	mov	r6, r0
 80047b2:	b118      	cbz	r0, 80047bc <_vfiprintf_r+0x18>
 80047b4:	6a03      	ldr	r3, [r0, #32]
 80047b6:	b90b      	cbnz	r3, 80047bc <_vfiprintf_r+0x18>
 80047b8:	f7fe fab4 	bl	8002d24 <__sinit>
 80047bc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80047be:	07d9      	lsls	r1, r3, #31
 80047c0:	d405      	bmi.n	80047ce <_vfiprintf_r+0x2a>
 80047c2:	89ab      	ldrh	r3, [r5, #12]
 80047c4:	059a      	lsls	r2, r3, #22
 80047c6:	d402      	bmi.n	80047ce <_vfiprintf_r+0x2a>
 80047c8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80047ca:	f7fe fcac 	bl	8003126 <__retarget_lock_acquire_recursive>
 80047ce:	89ab      	ldrh	r3, [r5, #12]
 80047d0:	071b      	lsls	r3, r3, #28
 80047d2:	d501      	bpl.n	80047d8 <_vfiprintf_r+0x34>
 80047d4:	692b      	ldr	r3, [r5, #16]
 80047d6:	b99b      	cbnz	r3, 8004800 <_vfiprintf_r+0x5c>
 80047d8:	4629      	mov	r1, r5
 80047da:	4630      	mov	r0, r6
 80047dc:	f7fe fbce 	bl	8002f7c <__swsetup_r>
 80047e0:	b170      	cbz	r0, 8004800 <_vfiprintf_r+0x5c>
 80047e2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80047e4:	07dc      	lsls	r4, r3, #31
 80047e6:	d504      	bpl.n	80047f2 <_vfiprintf_r+0x4e>
 80047e8:	f04f 30ff 	mov.w	r0, #4294967295
 80047ec:	b01d      	add	sp, #116	; 0x74
 80047ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80047f2:	89ab      	ldrh	r3, [r5, #12]
 80047f4:	0598      	lsls	r0, r3, #22
 80047f6:	d4f7      	bmi.n	80047e8 <_vfiprintf_r+0x44>
 80047f8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80047fa:	f7fe fc95 	bl	8003128 <__retarget_lock_release_recursive>
 80047fe:	e7f3      	b.n	80047e8 <_vfiprintf_r+0x44>
 8004800:	2300      	movs	r3, #0
 8004802:	f8cd 800c 	str.w	r8, [sp, #12]
 8004806:	f04f 0901 	mov.w	r9, #1
 800480a:	f8df 81b8 	ldr.w	r8, [pc, #440]	; 80049c4 <_vfiprintf_r+0x220>
 800480e:	9309      	str	r3, [sp, #36]	; 0x24
 8004810:	2320      	movs	r3, #32
 8004812:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004816:	2330      	movs	r3, #48	; 0x30
 8004818:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800481c:	4623      	mov	r3, r4
 800481e:	469a      	mov	sl, r3
 8004820:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004824:	b10a      	cbz	r2, 800482a <_vfiprintf_r+0x86>
 8004826:	2a25      	cmp	r2, #37	; 0x25
 8004828:	d1f9      	bne.n	800481e <_vfiprintf_r+0x7a>
 800482a:	ebba 0b04 	subs.w	fp, sl, r4
 800482e:	d00b      	beq.n	8004848 <_vfiprintf_r+0xa4>
 8004830:	465b      	mov	r3, fp
 8004832:	4622      	mov	r2, r4
 8004834:	4629      	mov	r1, r5
 8004836:	4630      	mov	r0, r6
 8004838:	f7ff ffa1 	bl	800477e <__sfputs_r>
 800483c:	3001      	adds	r0, #1
 800483e:	f000 80a9 	beq.w	8004994 <_vfiprintf_r+0x1f0>
 8004842:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004844:	445a      	add	r2, fp
 8004846:	9209      	str	r2, [sp, #36]	; 0x24
 8004848:	f89a 3000 	ldrb.w	r3, [sl]
 800484c:	2b00      	cmp	r3, #0
 800484e:	f000 80a1 	beq.w	8004994 <_vfiprintf_r+0x1f0>
 8004852:	2300      	movs	r3, #0
 8004854:	f04f 32ff 	mov.w	r2, #4294967295
 8004858:	f10a 0a01 	add.w	sl, sl, #1
 800485c:	9304      	str	r3, [sp, #16]
 800485e:	9307      	str	r3, [sp, #28]
 8004860:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004864:	931a      	str	r3, [sp, #104]	; 0x68
 8004866:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800486a:	4654      	mov	r4, sl
 800486c:	2205      	movs	r2, #5
 800486e:	4855      	ldr	r0, [pc, #340]	; (80049c4 <_vfiprintf_r+0x220>)
 8004870:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004874:	f7fe fc59 	bl	800312a <memchr>
 8004878:	9a04      	ldr	r2, [sp, #16]
 800487a:	b9d8      	cbnz	r0, 80048b4 <_vfiprintf_r+0x110>
 800487c:	06d1      	lsls	r1, r2, #27
 800487e:	bf44      	itt	mi
 8004880:	2320      	movmi	r3, #32
 8004882:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004886:	0713      	lsls	r3, r2, #28
 8004888:	bf44      	itt	mi
 800488a:	232b      	movmi	r3, #43	; 0x2b
 800488c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004890:	f89a 3000 	ldrb.w	r3, [sl]
 8004894:	2b2a      	cmp	r3, #42	; 0x2a
 8004896:	d015      	beq.n	80048c4 <_vfiprintf_r+0x120>
 8004898:	9a07      	ldr	r2, [sp, #28]
 800489a:	4654      	mov	r4, sl
 800489c:	2000      	movs	r0, #0
 800489e:	f04f 0c0a 	mov.w	ip, #10
 80048a2:	4621      	mov	r1, r4
 80048a4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80048a8:	3b30      	subs	r3, #48	; 0x30
 80048aa:	2b09      	cmp	r3, #9
 80048ac:	d94d      	bls.n	800494a <_vfiprintf_r+0x1a6>
 80048ae:	b1b0      	cbz	r0, 80048de <_vfiprintf_r+0x13a>
 80048b0:	9207      	str	r2, [sp, #28]
 80048b2:	e014      	b.n	80048de <_vfiprintf_r+0x13a>
 80048b4:	eba0 0308 	sub.w	r3, r0, r8
 80048b8:	46a2      	mov	sl, r4
 80048ba:	fa09 f303 	lsl.w	r3, r9, r3
 80048be:	4313      	orrs	r3, r2
 80048c0:	9304      	str	r3, [sp, #16]
 80048c2:	e7d2      	b.n	800486a <_vfiprintf_r+0xc6>
 80048c4:	9b03      	ldr	r3, [sp, #12]
 80048c6:	1d19      	adds	r1, r3, #4
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	9103      	str	r1, [sp, #12]
 80048ce:	bfbb      	ittet	lt
 80048d0:	425b      	neglt	r3, r3
 80048d2:	f042 0202 	orrlt.w	r2, r2, #2
 80048d6:	9307      	strge	r3, [sp, #28]
 80048d8:	9307      	strlt	r3, [sp, #28]
 80048da:	bfb8      	it	lt
 80048dc:	9204      	strlt	r2, [sp, #16]
 80048de:	7823      	ldrb	r3, [r4, #0]
 80048e0:	2b2e      	cmp	r3, #46	; 0x2e
 80048e2:	d10c      	bne.n	80048fe <_vfiprintf_r+0x15a>
 80048e4:	7863      	ldrb	r3, [r4, #1]
 80048e6:	2b2a      	cmp	r3, #42	; 0x2a
 80048e8:	d134      	bne.n	8004954 <_vfiprintf_r+0x1b0>
 80048ea:	9b03      	ldr	r3, [sp, #12]
 80048ec:	3402      	adds	r4, #2
 80048ee:	1d1a      	adds	r2, r3, #4
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	9203      	str	r2, [sp, #12]
 80048f6:	bfb8      	it	lt
 80048f8:	f04f 33ff 	movlt.w	r3, #4294967295
 80048fc:	9305      	str	r3, [sp, #20]
 80048fe:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80049d4 <_vfiprintf_r+0x230>
 8004902:	2203      	movs	r2, #3
 8004904:	7821      	ldrb	r1, [r4, #0]
 8004906:	4650      	mov	r0, sl
 8004908:	f7fe fc0f 	bl	800312a <memchr>
 800490c:	b138      	cbz	r0, 800491e <_vfiprintf_r+0x17a>
 800490e:	eba0 000a 	sub.w	r0, r0, sl
 8004912:	2240      	movs	r2, #64	; 0x40
 8004914:	9b04      	ldr	r3, [sp, #16]
 8004916:	3401      	adds	r4, #1
 8004918:	4082      	lsls	r2, r0
 800491a:	4313      	orrs	r3, r2
 800491c:	9304      	str	r3, [sp, #16]
 800491e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004922:	2206      	movs	r2, #6
 8004924:	4828      	ldr	r0, [pc, #160]	; (80049c8 <_vfiprintf_r+0x224>)
 8004926:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800492a:	f7fe fbfe 	bl	800312a <memchr>
 800492e:	2800      	cmp	r0, #0
 8004930:	d03f      	beq.n	80049b2 <_vfiprintf_r+0x20e>
 8004932:	4b26      	ldr	r3, [pc, #152]	; (80049cc <_vfiprintf_r+0x228>)
 8004934:	bb1b      	cbnz	r3, 800497e <_vfiprintf_r+0x1da>
 8004936:	9b03      	ldr	r3, [sp, #12]
 8004938:	3307      	adds	r3, #7
 800493a:	f023 0307 	bic.w	r3, r3, #7
 800493e:	3308      	adds	r3, #8
 8004940:	9303      	str	r3, [sp, #12]
 8004942:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004944:	443b      	add	r3, r7
 8004946:	9309      	str	r3, [sp, #36]	; 0x24
 8004948:	e768      	b.n	800481c <_vfiprintf_r+0x78>
 800494a:	fb0c 3202 	mla	r2, ip, r2, r3
 800494e:	460c      	mov	r4, r1
 8004950:	2001      	movs	r0, #1
 8004952:	e7a6      	b.n	80048a2 <_vfiprintf_r+0xfe>
 8004954:	2300      	movs	r3, #0
 8004956:	3401      	adds	r4, #1
 8004958:	f04f 0c0a 	mov.w	ip, #10
 800495c:	4619      	mov	r1, r3
 800495e:	9305      	str	r3, [sp, #20]
 8004960:	4620      	mov	r0, r4
 8004962:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004966:	3a30      	subs	r2, #48	; 0x30
 8004968:	2a09      	cmp	r2, #9
 800496a:	d903      	bls.n	8004974 <_vfiprintf_r+0x1d0>
 800496c:	2b00      	cmp	r3, #0
 800496e:	d0c6      	beq.n	80048fe <_vfiprintf_r+0x15a>
 8004970:	9105      	str	r1, [sp, #20]
 8004972:	e7c4      	b.n	80048fe <_vfiprintf_r+0x15a>
 8004974:	fb0c 2101 	mla	r1, ip, r1, r2
 8004978:	4604      	mov	r4, r0
 800497a:	2301      	movs	r3, #1
 800497c:	e7f0      	b.n	8004960 <_vfiprintf_r+0x1bc>
 800497e:	ab03      	add	r3, sp, #12
 8004980:	462a      	mov	r2, r5
 8004982:	a904      	add	r1, sp, #16
 8004984:	4630      	mov	r0, r6
 8004986:	9300      	str	r3, [sp, #0]
 8004988:	4b11      	ldr	r3, [pc, #68]	; (80049d0 <_vfiprintf_r+0x22c>)
 800498a:	f7fd fd77 	bl	800247c <_printf_float>
 800498e:	4607      	mov	r7, r0
 8004990:	1c78      	adds	r0, r7, #1
 8004992:	d1d6      	bne.n	8004942 <_vfiprintf_r+0x19e>
 8004994:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004996:	07d9      	lsls	r1, r3, #31
 8004998:	d405      	bmi.n	80049a6 <_vfiprintf_r+0x202>
 800499a:	89ab      	ldrh	r3, [r5, #12]
 800499c:	059a      	lsls	r2, r3, #22
 800499e:	d402      	bmi.n	80049a6 <_vfiprintf_r+0x202>
 80049a0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80049a2:	f7fe fbc1 	bl	8003128 <__retarget_lock_release_recursive>
 80049a6:	89ab      	ldrh	r3, [r5, #12]
 80049a8:	065b      	lsls	r3, r3, #25
 80049aa:	f53f af1d 	bmi.w	80047e8 <_vfiprintf_r+0x44>
 80049ae:	9809      	ldr	r0, [sp, #36]	; 0x24
 80049b0:	e71c      	b.n	80047ec <_vfiprintf_r+0x48>
 80049b2:	ab03      	add	r3, sp, #12
 80049b4:	462a      	mov	r2, r5
 80049b6:	a904      	add	r1, sp, #16
 80049b8:	4630      	mov	r0, r6
 80049ba:	9300      	str	r3, [sp, #0]
 80049bc:	4b04      	ldr	r3, [pc, #16]	; (80049d0 <_vfiprintf_r+0x22c>)
 80049be:	f7fe f805 	bl	80029cc <_printf_i>
 80049c2:	e7e4      	b.n	800498e <_vfiprintf_r+0x1ea>
 80049c4:	0800533c 	.word	0x0800533c
 80049c8:	08005346 	.word	0x08005346
 80049cc:	0800247d 	.word	0x0800247d
 80049d0:	0800477f 	.word	0x0800477f
 80049d4:	08005342 	.word	0x08005342

080049d8 <__sflush_r>:
 80049d8:	898a      	ldrh	r2, [r1, #12]
 80049da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80049de:	4605      	mov	r5, r0
 80049e0:	0710      	lsls	r0, r2, #28
 80049e2:	460c      	mov	r4, r1
 80049e4:	d458      	bmi.n	8004a98 <__sflush_r+0xc0>
 80049e6:	684b      	ldr	r3, [r1, #4]
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	dc05      	bgt.n	80049f8 <__sflush_r+0x20>
 80049ec:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	dc02      	bgt.n	80049f8 <__sflush_r+0x20>
 80049f2:	2000      	movs	r0, #0
 80049f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80049f8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80049fa:	2e00      	cmp	r6, #0
 80049fc:	d0f9      	beq.n	80049f2 <__sflush_r+0x1a>
 80049fe:	2300      	movs	r3, #0
 8004a00:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004a04:	682f      	ldr	r7, [r5, #0]
 8004a06:	6a21      	ldr	r1, [r4, #32]
 8004a08:	602b      	str	r3, [r5, #0]
 8004a0a:	d032      	beq.n	8004a72 <__sflush_r+0x9a>
 8004a0c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004a0e:	89a3      	ldrh	r3, [r4, #12]
 8004a10:	075a      	lsls	r2, r3, #29
 8004a12:	d505      	bpl.n	8004a20 <__sflush_r+0x48>
 8004a14:	6863      	ldr	r3, [r4, #4]
 8004a16:	1ac0      	subs	r0, r0, r3
 8004a18:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004a1a:	b10b      	cbz	r3, 8004a20 <__sflush_r+0x48>
 8004a1c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004a1e:	1ac0      	subs	r0, r0, r3
 8004a20:	2300      	movs	r3, #0
 8004a22:	4602      	mov	r2, r0
 8004a24:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004a26:	4628      	mov	r0, r5
 8004a28:	6a21      	ldr	r1, [r4, #32]
 8004a2a:	47b0      	blx	r6
 8004a2c:	1c43      	adds	r3, r0, #1
 8004a2e:	89a3      	ldrh	r3, [r4, #12]
 8004a30:	d106      	bne.n	8004a40 <__sflush_r+0x68>
 8004a32:	6829      	ldr	r1, [r5, #0]
 8004a34:	291d      	cmp	r1, #29
 8004a36:	d82b      	bhi.n	8004a90 <__sflush_r+0xb8>
 8004a38:	4a28      	ldr	r2, [pc, #160]	; (8004adc <__sflush_r+0x104>)
 8004a3a:	410a      	asrs	r2, r1
 8004a3c:	07d6      	lsls	r6, r2, #31
 8004a3e:	d427      	bmi.n	8004a90 <__sflush_r+0xb8>
 8004a40:	2200      	movs	r2, #0
 8004a42:	04d9      	lsls	r1, r3, #19
 8004a44:	6062      	str	r2, [r4, #4]
 8004a46:	6922      	ldr	r2, [r4, #16]
 8004a48:	6022      	str	r2, [r4, #0]
 8004a4a:	d504      	bpl.n	8004a56 <__sflush_r+0x7e>
 8004a4c:	1c42      	adds	r2, r0, #1
 8004a4e:	d101      	bne.n	8004a54 <__sflush_r+0x7c>
 8004a50:	682b      	ldr	r3, [r5, #0]
 8004a52:	b903      	cbnz	r3, 8004a56 <__sflush_r+0x7e>
 8004a54:	6560      	str	r0, [r4, #84]	; 0x54
 8004a56:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004a58:	602f      	str	r7, [r5, #0]
 8004a5a:	2900      	cmp	r1, #0
 8004a5c:	d0c9      	beq.n	80049f2 <__sflush_r+0x1a>
 8004a5e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004a62:	4299      	cmp	r1, r3
 8004a64:	d002      	beq.n	8004a6c <__sflush_r+0x94>
 8004a66:	4628      	mov	r0, r5
 8004a68:	f7ff f9ee 	bl	8003e48 <_free_r>
 8004a6c:	2000      	movs	r0, #0
 8004a6e:	6360      	str	r0, [r4, #52]	; 0x34
 8004a70:	e7c0      	b.n	80049f4 <__sflush_r+0x1c>
 8004a72:	2301      	movs	r3, #1
 8004a74:	4628      	mov	r0, r5
 8004a76:	47b0      	blx	r6
 8004a78:	1c41      	adds	r1, r0, #1
 8004a7a:	d1c8      	bne.n	8004a0e <__sflush_r+0x36>
 8004a7c:	682b      	ldr	r3, [r5, #0]
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d0c5      	beq.n	8004a0e <__sflush_r+0x36>
 8004a82:	2b1d      	cmp	r3, #29
 8004a84:	d001      	beq.n	8004a8a <__sflush_r+0xb2>
 8004a86:	2b16      	cmp	r3, #22
 8004a88:	d101      	bne.n	8004a8e <__sflush_r+0xb6>
 8004a8a:	602f      	str	r7, [r5, #0]
 8004a8c:	e7b1      	b.n	80049f2 <__sflush_r+0x1a>
 8004a8e:	89a3      	ldrh	r3, [r4, #12]
 8004a90:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004a94:	81a3      	strh	r3, [r4, #12]
 8004a96:	e7ad      	b.n	80049f4 <__sflush_r+0x1c>
 8004a98:	690f      	ldr	r7, [r1, #16]
 8004a9a:	2f00      	cmp	r7, #0
 8004a9c:	d0a9      	beq.n	80049f2 <__sflush_r+0x1a>
 8004a9e:	0793      	lsls	r3, r2, #30
 8004aa0:	680e      	ldr	r6, [r1, #0]
 8004aa2:	600f      	str	r7, [r1, #0]
 8004aa4:	bf0c      	ite	eq
 8004aa6:	694b      	ldreq	r3, [r1, #20]
 8004aa8:	2300      	movne	r3, #0
 8004aaa:	eba6 0807 	sub.w	r8, r6, r7
 8004aae:	608b      	str	r3, [r1, #8]
 8004ab0:	f1b8 0f00 	cmp.w	r8, #0
 8004ab4:	dd9d      	ble.n	80049f2 <__sflush_r+0x1a>
 8004ab6:	4643      	mov	r3, r8
 8004ab8:	463a      	mov	r2, r7
 8004aba:	6a21      	ldr	r1, [r4, #32]
 8004abc:	4628      	mov	r0, r5
 8004abe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004ac0:	47b0      	blx	r6
 8004ac2:	2800      	cmp	r0, #0
 8004ac4:	dc06      	bgt.n	8004ad4 <__sflush_r+0xfc>
 8004ac6:	89a3      	ldrh	r3, [r4, #12]
 8004ac8:	f04f 30ff 	mov.w	r0, #4294967295
 8004acc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004ad0:	81a3      	strh	r3, [r4, #12]
 8004ad2:	e78f      	b.n	80049f4 <__sflush_r+0x1c>
 8004ad4:	4407      	add	r7, r0
 8004ad6:	eba8 0800 	sub.w	r8, r8, r0
 8004ada:	e7e9      	b.n	8004ab0 <__sflush_r+0xd8>
 8004adc:	dfbffffe 	.word	0xdfbffffe

08004ae0 <_fflush_r>:
 8004ae0:	b538      	push	{r3, r4, r5, lr}
 8004ae2:	690b      	ldr	r3, [r1, #16]
 8004ae4:	4605      	mov	r5, r0
 8004ae6:	460c      	mov	r4, r1
 8004ae8:	b913      	cbnz	r3, 8004af0 <_fflush_r+0x10>
 8004aea:	2500      	movs	r5, #0
 8004aec:	4628      	mov	r0, r5
 8004aee:	bd38      	pop	{r3, r4, r5, pc}
 8004af0:	b118      	cbz	r0, 8004afa <_fflush_r+0x1a>
 8004af2:	6a03      	ldr	r3, [r0, #32]
 8004af4:	b90b      	cbnz	r3, 8004afa <_fflush_r+0x1a>
 8004af6:	f7fe f915 	bl	8002d24 <__sinit>
 8004afa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d0f3      	beq.n	8004aea <_fflush_r+0xa>
 8004b02:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004b04:	07d0      	lsls	r0, r2, #31
 8004b06:	d404      	bmi.n	8004b12 <_fflush_r+0x32>
 8004b08:	0599      	lsls	r1, r3, #22
 8004b0a:	d402      	bmi.n	8004b12 <_fflush_r+0x32>
 8004b0c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004b0e:	f7fe fb0a 	bl	8003126 <__retarget_lock_acquire_recursive>
 8004b12:	4628      	mov	r0, r5
 8004b14:	4621      	mov	r1, r4
 8004b16:	f7ff ff5f 	bl	80049d8 <__sflush_r>
 8004b1a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004b1c:	4605      	mov	r5, r0
 8004b1e:	07da      	lsls	r2, r3, #31
 8004b20:	d4e4      	bmi.n	8004aec <_fflush_r+0xc>
 8004b22:	89a3      	ldrh	r3, [r4, #12]
 8004b24:	059b      	lsls	r3, r3, #22
 8004b26:	d4e1      	bmi.n	8004aec <_fflush_r+0xc>
 8004b28:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004b2a:	f7fe fafd 	bl	8003128 <__retarget_lock_release_recursive>
 8004b2e:	e7dd      	b.n	8004aec <_fflush_r+0xc>

08004b30 <__swhatbuf_r>:
 8004b30:	b570      	push	{r4, r5, r6, lr}
 8004b32:	460c      	mov	r4, r1
 8004b34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004b38:	b096      	sub	sp, #88	; 0x58
 8004b3a:	4615      	mov	r5, r2
 8004b3c:	2900      	cmp	r1, #0
 8004b3e:	461e      	mov	r6, r3
 8004b40:	da0c      	bge.n	8004b5c <__swhatbuf_r+0x2c>
 8004b42:	89a3      	ldrh	r3, [r4, #12]
 8004b44:	2100      	movs	r1, #0
 8004b46:	f013 0f80 	tst.w	r3, #128	; 0x80
 8004b4a:	bf0c      	ite	eq
 8004b4c:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8004b50:	2340      	movne	r3, #64	; 0x40
 8004b52:	2000      	movs	r0, #0
 8004b54:	6031      	str	r1, [r6, #0]
 8004b56:	602b      	str	r3, [r5, #0]
 8004b58:	b016      	add	sp, #88	; 0x58
 8004b5a:	bd70      	pop	{r4, r5, r6, pc}
 8004b5c:	466a      	mov	r2, sp
 8004b5e:	f000 f87d 	bl	8004c5c <_fstat_r>
 8004b62:	2800      	cmp	r0, #0
 8004b64:	dbed      	blt.n	8004b42 <__swhatbuf_r+0x12>
 8004b66:	9901      	ldr	r1, [sp, #4]
 8004b68:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8004b6c:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8004b70:	4259      	negs	r1, r3
 8004b72:	4159      	adcs	r1, r3
 8004b74:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004b78:	e7eb      	b.n	8004b52 <__swhatbuf_r+0x22>

08004b7a <__smakebuf_r>:
 8004b7a:	898b      	ldrh	r3, [r1, #12]
 8004b7c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004b7e:	079d      	lsls	r5, r3, #30
 8004b80:	4606      	mov	r6, r0
 8004b82:	460c      	mov	r4, r1
 8004b84:	d507      	bpl.n	8004b96 <__smakebuf_r+0x1c>
 8004b86:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004b8a:	6023      	str	r3, [r4, #0]
 8004b8c:	6123      	str	r3, [r4, #16]
 8004b8e:	2301      	movs	r3, #1
 8004b90:	6163      	str	r3, [r4, #20]
 8004b92:	b002      	add	sp, #8
 8004b94:	bd70      	pop	{r4, r5, r6, pc}
 8004b96:	ab01      	add	r3, sp, #4
 8004b98:	466a      	mov	r2, sp
 8004b9a:	f7ff ffc9 	bl	8004b30 <__swhatbuf_r>
 8004b9e:	9900      	ldr	r1, [sp, #0]
 8004ba0:	4605      	mov	r5, r0
 8004ba2:	4630      	mov	r0, r6
 8004ba4:	f7ff f9c4 	bl	8003f30 <_malloc_r>
 8004ba8:	b948      	cbnz	r0, 8004bbe <__smakebuf_r+0x44>
 8004baa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004bae:	059a      	lsls	r2, r3, #22
 8004bb0:	d4ef      	bmi.n	8004b92 <__smakebuf_r+0x18>
 8004bb2:	f023 0303 	bic.w	r3, r3, #3
 8004bb6:	f043 0302 	orr.w	r3, r3, #2
 8004bba:	81a3      	strh	r3, [r4, #12]
 8004bbc:	e7e3      	b.n	8004b86 <__smakebuf_r+0xc>
 8004bbe:	89a3      	ldrh	r3, [r4, #12]
 8004bc0:	6020      	str	r0, [r4, #0]
 8004bc2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004bc6:	6120      	str	r0, [r4, #16]
 8004bc8:	81a3      	strh	r3, [r4, #12]
 8004bca:	9b00      	ldr	r3, [sp, #0]
 8004bcc:	6163      	str	r3, [r4, #20]
 8004bce:	9b01      	ldr	r3, [sp, #4]
 8004bd0:	b15b      	cbz	r3, 8004bea <__smakebuf_r+0x70>
 8004bd2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004bd6:	4630      	mov	r0, r6
 8004bd8:	f000 f852 	bl	8004c80 <_isatty_r>
 8004bdc:	b128      	cbz	r0, 8004bea <__smakebuf_r+0x70>
 8004bde:	89a3      	ldrh	r3, [r4, #12]
 8004be0:	f023 0303 	bic.w	r3, r3, #3
 8004be4:	f043 0301 	orr.w	r3, r3, #1
 8004be8:	81a3      	strh	r3, [r4, #12]
 8004bea:	89a3      	ldrh	r3, [r4, #12]
 8004bec:	431d      	orrs	r5, r3
 8004bee:	81a5      	strh	r5, [r4, #12]
 8004bf0:	e7cf      	b.n	8004b92 <__smakebuf_r+0x18>

08004bf2 <_putc_r>:
 8004bf2:	b570      	push	{r4, r5, r6, lr}
 8004bf4:	460d      	mov	r5, r1
 8004bf6:	4614      	mov	r4, r2
 8004bf8:	4606      	mov	r6, r0
 8004bfa:	b118      	cbz	r0, 8004c04 <_putc_r+0x12>
 8004bfc:	6a03      	ldr	r3, [r0, #32]
 8004bfe:	b90b      	cbnz	r3, 8004c04 <_putc_r+0x12>
 8004c00:	f7fe f890 	bl	8002d24 <__sinit>
 8004c04:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004c06:	07d8      	lsls	r0, r3, #31
 8004c08:	d405      	bmi.n	8004c16 <_putc_r+0x24>
 8004c0a:	89a3      	ldrh	r3, [r4, #12]
 8004c0c:	0599      	lsls	r1, r3, #22
 8004c0e:	d402      	bmi.n	8004c16 <_putc_r+0x24>
 8004c10:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004c12:	f7fe fa88 	bl	8003126 <__retarget_lock_acquire_recursive>
 8004c16:	68a3      	ldr	r3, [r4, #8]
 8004c18:	3b01      	subs	r3, #1
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	60a3      	str	r3, [r4, #8]
 8004c1e:	da05      	bge.n	8004c2c <_putc_r+0x3a>
 8004c20:	69a2      	ldr	r2, [r4, #24]
 8004c22:	4293      	cmp	r3, r2
 8004c24:	db12      	blt.n	8004c4c <_putc_r+0x5a>
 8004c26:	b2eb      	uxtb	r3, r5
 8004c28:	2b0a      	cmp	r3, #10
 8004c2a:	d00f      	beq.n	8004c4c <_putc_r+0x5a>
 8004c2c:	6823      	ldr	r3, [r4, #0]
 8004c2e:	1c5a      	adds	r2, r3, #1
 8004c30:	6022      	str	r2, [r4, #0]
 8004c32:	701d      	strb	r5, [r3, #0]
 8004c34:	b2ed      	uxtb	r5, r5
 8004c36:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004c38:	07da      	lsls	r2, r3, #31
 8004c3a:	d405      	bmi.n	8004c48 <_putc_r+0x56>
 8004c3c:	89a3      	ldrh	r3, [r4, #12]
 8004c3e:	059b      	lsls	r3, r3, #22
 8004c40:	d402      	bmi.n	8004c48 <_putc_r+0x56>
 8004c42:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004c44:	f7fe fa70 	bl	8003128 <__retarget_lock_release_recursive>
 8004c48:	4628      	mov	r0, r5
 8004c4a:	bd70      	pop	{r4, r5, r6, pc}
 8004c4c:	4629      	mov	r1, r5
 8004c4e:	4622      	mov	r2, r4
 8004c50:	4630      	mov	r0, r6
 8004c52:	f7fe f956 	bl	8002f02 <__swbuf_r>
 8004c56:	4605      	mov	r5, r0
 8004c58:	e7ed      	b.n	8004c36 <_putc_r+0x44>
	...

08004c5c <_fstat_r>:
 8004c5c:	b538      	push	{r3, r4, r5, lr}
 8004c5e:	2300      	movs	r3, #0
 8004c60:	4d06      	ldr	r5, [pc, #24]	; (8004c7c <_fstat_r+0x20>)
 8004c62:	4604      	mov	r4, r0
 8004c64:	4608      	mov	r0, r1
 8004c66:	4611      	mov	r1, r2
 8004c68:	602b      	str	r3, [r5, #0]
 8004c6a:	f7fd fae1 	bl	8002230 <_fstat>
 8004c6e:	1c43      	adds	r3, r0, #1
 8004c70:	d102      	bne.n	8004c78 <_fstat_r+0x1c>
 8004c72:	682b      	ldr	r3, [r5, #0]
 8004c74:	b103      	cbz	r3, 8004c78 <_fstat_r+0x1c>
 8004c76:	6023      	str	r3, [r4, #0]
 8004c78:	bd38      	pop	{r3, r4, r5, pc}
 8004c7a:	bf00      	nop
 8004c7c:	200003cc 	.word	0x200003cc

08004c80 <_isatty_r>:
 8004c80:	b538      	push	{r3, r4, r5, lr}
 8004c82:	2300      	movs	r3, #0
 8004c84:	4d05      	ldr	r5, [pc, #20]	; (8004c9c <_isatty_r+0x1c>)
 8004c86:	4604      	mov	r4, r0
 8004c88:	4608      	mov	r0, r1
 8004c8a:	602b      	str	r3, [r5, #0]
 8004c8c:	f7fd fae0 	bl	8002250 <_isatty>
 8004c90:	1c43      	adds	r3, r0, #1
 8004c92:	d102      	bne.n	8004c9a <_isatty_r+0x1a>
 8004c94:	682b      	ldr	r3, [r5, #0]
 8004c96:	b103      	cbz	r3, 8004c9a <_isatty_r+0x1a>
 8004c98:	6023      	str	r3, [r4, #0]
 8004c9a:	bd38      	pop	{r3, r4, r5, pc}
 8004c9c:	200003cc 	.word	0x200003cc

08004ca0 <_sbrk_r>:
 8004ca0:	b538      	push	{r3, r4, r5, lr}
 8004ca2:	2300      	movs	r3, #0
 8004ca4:	4d05      	ldr	r5, [pc, #20]	; (8004cbc <_sbrk_r+0x1c>)
 8004ca6:	4604      	mov	r4, r0
 8004ca8:	4608      	mov	r0, r1
 8004caa:	602b      	str	r3, [r5, #0]
 8004cac:	f7fd fae8 	bl	8002280 <_sbrk>
 8004cb0:	1c43      	adds	r3, r0, #1
 8004cb2:	d102      	bne.n	8004cba <_sbrk_r+0x1a>
 8004cb4:	682b      	ldr	r3, [r5, #0]
 8004cb6:	b103      	cbz	r3, 8004cba <_sbrk_r+0x1a>
 8004cb8:	6023      	str	r3, [r4, #0]
 8004cba:	bd38      	pop	{r3, r4, r5, pc}
 8004cbc:	200003cc 	.word	0x200003cc

08004cc0 <memcpy>:
 8004cc0:	440a      	add	r2, r1
 8004cc2:	1e43      	subs	r3, r0, #1
 8004cc4:	4291      	cmp	r1, r2
 8004cc6:	d100      	bne.n	8004cca <memcpy+0xa>
 8004cc8:	4770      	bx	lr
 8004cca:	b510      	push	{r4, lr}
 8004ccc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004cd0:	4291      	cmp	r1, r2
 8004cd2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004cd6:	d1f9      	bne.n	8004ccc <memcpy+0xc>
 8004cd8:	bd10      	pop	{r4, pc}
	...

08004cdc <__assert_func>:
 8004cdc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8004cde:	4614      	mov	r4, r2
 8004ce0:	461a      	mov	r2, r3
 8004ce2:	4b09      	ldr	r3, [pc, #36]	; (8004d08 <__assert_func+0x2c>)
 8004ce4:	4605      	mov	r5, r0
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	68d8      	ldr	r0, [r3, #12]
 8004cea:	b14c      	cbz	r4, 8004d00 <__assert_func+0x24>
 8004cec:	4b07      	ldr	r3, [pc, #28]	; (8004d0c <__assert_func+0x30>)
 8004cee:	9100      	str	r1, [sp, #0]
 8004cf0:	4907      	ldr	r1, [pc, #28]	; (8004d10 <__assert_func+0x34>)
 8004cf2:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8004cf6:	462b      	mov	r3, r5
 8004cf8:	f000 f844 	bl	8004d84 <fiprintf>
 8004cfc:	f000 f854 	bl	8004da8 <abort>
 8004d00:	4b04      	ldr	r3, [pc, #16]	; (8004d14 <__assert_func+0x38>)
 8004d02:	461c      	mov	r4, r3
 8004d04:	e7f3      	b.n	8004cee <__assert_func+0x12>
 8004d06:	bf00      	nop
 8004d08:	20000064 	.word	0x20000064
 8004d0c:	08005357 	.word	0x08005357
 8004d10:	08005364 	.word	0x08005364
 8004d14:	08005392 	.word	0x08005392

08004d18 <_calloc_r>:
 8004d18:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004d1a:	fba1 2402 	umull	r2, r4, r1, r2
 8004d1e:	b94c      	cbnz	r4, 8004d34 <_calloc_r+0x1c>
 8004d20:	4611      	mov	r1, r2
 8004d22:	9201      	str	r2, [sp, #4]
 8004d24:	f7ff f904 	bl	8003f30 <_malloc_r>
 8004d28:	9a01      	ldr	r2, [sp, #4]
 8004d2a:	4605      	mov	r5, r0
 8004d2c:	b930      	cbnz	r0, 8004d3c <_calloc_r+0x24>
 8004d2e:	4628      	mov	r0, r5
 8004d30:	b003      	add	sp, #12
 8004d32:	bd30      	pop	{r4, r5, pc}
 8004d34:	220c      	movs	r2, #12
 8004d36:	2500      	movs	r5, #0
 8004d38:	6002      	str	r2, [r0, #0]
 8004d3a:	e7f8      	b.n	8004d2e <_calloc_r+0x16>
 8004d3c:	4621      	mov	r1, r4
 8004d3e:	f7fe f975 	bl	800302c <memset>
 8004d42:	e7f4      	b.n	8004d2e <_calloc_r+0x16>

08004d44 <__ascii_mbtowc>:
 8004d44:	b082      	sub	sp, #8
 8004d46:	b901      	cbnz	r1, 8004d4a <__ascii_mbtowc+0x6>
 8004d48:	a901      	add	r1, sp, #4
 8004d4a:	b142      	cbz	r2, 8004d5e <__ascii_mbtowc+0x1a>
 8004d4c:	b14b      	cbz	r3, 8004d62 <__ascii_mbtowc+0x1e>
 8004d4e:	7813      	ldrb	r3, [r2, #0]
 8004d50:	600b      	str	r3, [r1, #0]
 8004d52:	7812      	ldrb	r2, [r2, #0]
 8004d54:	1e10      	subs	r0, r2, #0
 8004d56:	bf18      	it	ne
 8004d58:	2001      	movne	r0, #1
 8004d5a:	b002      	add	sp, #8
 8004d5c:	4770      	bx	lr
 8004d5e:	4610      	mov	r0, r2
 8004d60:	e7fb      	b.n	8004d5a <__ascii_mbtowc+0x16>
 8004d62:	f06f 0001 	mvn.w	r0, #1
 8004d66:	e7f8      	b.n	8004d5a <__ascii_mbtowc+0x16>

08004d68 <__ascii_wctomb>:
 8004d68:	b149      	cbz	r1, 8004d7e <__ascii_wctomb+0x16>
 8004d6a:	2aff      	cmp	r2, #255	; 0xff
 8004d6c:	bf8d      	iteet	hi
 8004d6e:	238a      	movhi	r3, #138	; 0x8a
 8004d70:	2001      	movls	r0, #1
 8004d72:	700a      	strbls	r2, [r1, #0]
 8004d74:	6003      	strhi	r3, [r0, #0]
 8004d76:	bf88      	it	hi
 8004d78:	f04f 30ff 	movhi.w	r0, #4294967295
 8004d7c:	4770      	bx	lr
 8004d7e:	4608      	mov	r0, r1
 8004d80:	4770      	bx	lr
	...

08004d84 <fiprintf>:
 8004d84:	b40e      	push	{r1, r2, r3}
 8004d86:	b503      	push	{r0, r1, lr}
 8004d88:	ab03      	add	r3, sp, #12
 8004d8a:	4601      	mov	r1, r0
 8004d8c:	4805      	ldr	r0, [pc, #20]	; (8004da4 <fiprintf+0x20>)
 8004d8e:	f853 2b04 	ldr.w	r2, [r3], #4
 8004d92:	6800      	ldr	r0, [r0, #0]
 8004d94:	9301      	str	r3, [sp, #4]
 8004d96:	f7ff fd05 	bl	80047a4 <_vfiprintf_r>
 8004d9a:	b002      	add	sp, #8
 8004d9c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004da0:	b003      	add	sp, #12
 8004da2:	4770      	bx	lr
 8004da4:	20000064 	.word	0x20000064

08004da8 <abort>:
 8004da8:	2006      	movs	r0, #6
 8004daa:	b508      	push	{r3, lr}
 8004dac:	f000 f82c 	bl	8004e08 <raise>
 8004db0:	2001      	movs	r0, #1
 8004db2:	f7fd fa0a 	bl	80021ca <_exit>

08004db6 <_raise_r>:
 8004db6:	291f      	cmp	r1, #31
 8004db8:	b538      	push	{r3, r4, r5, lr}
 8004dba:	4604      	mov	r4, r0
 8004dbc:	460d      	mov	r5, r1
 8004dbe:	d904      	bls.n	8004dca <_raise_r+0x14>
 8004dc0:	2316      	movs	r3, #22
 8004dc2:	6003      	str	r3, [r0, #0]
 8004dc4:	f04f 30ff 	mov.w	r0, #4294967295
 8004dc8:	bd38      	pop	{r3, r4, r5, pc}
 8004dca:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8004dcc:	b112      	cbz	r2, 8004dd4 <_raise_r+0x1e>
 8004dce:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8004dd2:	b94b      	cbnz	r3, 8004de8 <_raise_r+0x32>
 8004dd4:	4620      	mov	r0, r4
 8004dd6:	f000 f831 	bl	8004e3c <_getpid_r>
 8004dda:	462a      	mov	r2, r5
 8004ddc:	4601      	mov	r1, r0
 8004dde:	4620      	mov	r0, r4
 8004de0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004de4:	f000 b818 	b.w	8004e18 <_kill_r>
 8004de8:	2b01      	cmp	r3, #1
 8004dea:	d00a      	beq.n	8004e02 <_raise_r+0x4c>
 8004dec:	1c59      	adds	r1, r3, #1
 8004dee:	d103      	bne.n	8004df8 <_raise_r+0x42>
 8004df0:	2316      	movs	r3, #22
 8004df2:	6003      	str	r3, [r0, #0]
 8004df4:	2001      	movs	r0, #1
 8004df6:	e7e7      	b.n	8004dc8 <_raise_r+0x12>
 8004df8:	2400      	movs	r4, #0
 8004dfa:	4628      	mov	r0, r5
 8004dfc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8004e00:	4798      	blx	r3
 8004e02:	2000      	movs	r0, #0
 8004e04:	e7e0      	b.n	8004dc8 <_raise_r+0x12>
	...

08004e08 <raise>:
 8004e08:	4b02      	ldr	r3, [pc, #8]	; (8004e14 <raise+0xc>)
 8004e0a:	4601      	mov	r1, r0
 8004e0c:	6818      	ldr	r0, [r3, #0]
 8004e0e:	f7ff bfd2 	b.w	8004db6 <_raise_r>
 8004e12:	bf00      	nop
 8004e14:	20000064 	.word	0x20000064

08004e18 <_kill_r>:
 8004e18:	b538      	push	{r3, r4, r5, lr}
 8004e1a:	2300      	movs	r3, #0
 8004e1c:	4d06      	ldr	r5, [pc, #24]	; (8004e38 <_kill_r+0x20>)
 8004e1e:	4604      	mov	r4, r0
 8004e20:	4608      	mov	r0, r1
 8004e22:	4611      	mov	r1, r2
 8004e24:	602b      	str	r3, [r5, #0]
 8004e26:	f7fd f9c0 	bl	80021aa <_kill>
 8004e2a:	1c43      	adds	r3, r0, #1
 8004e2c:	d102      	bne.n	8004e34 <_kill_r+0x1c>
 8004e2e:	682b      	ldr	r3, [r5, #0]
 8004e30:	b103      	cbz	r3, 8004e34 <_kill_r+0x1c>
 8004e32:	6023      	str	r3, [r4, #0]
 8004e34:	bd38      	pop	{r3, r4, r5, pc}
 8004e36:	bf00      	nop
 8004e38:	200003cc 	.word	0x200003cc

08004e3c <_getpid_r>:
 8004e3c:	f7fd b9ad 	b.w	800219a <_getpid>

08004e40 <_init>:
 8004e40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e42:	bf00      	nop
 8004e44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e46:	bc08      	pop	{r3}
 8004e48:	469e      	mov	lr, r3
 8004e4a:	4770      	bx	lr

08004e4c <_fini>:
 8004e4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e4e:	bf00      	nop
 8004e50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e52:	bc08      	pop	{r3}
 8004e54:	469e      	mov	lr, r3
 8004e56:	4770      	bx	lr
